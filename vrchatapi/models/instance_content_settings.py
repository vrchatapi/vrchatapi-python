# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class InstanceContentSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'drones': 'bool',
        'emoji': 'bool',
        'pedestals': 'bool',
        'prints': 'bool',
        'stickers': 'bool',
        'props': 'bool'
    }

    attribute_map = {
        'drones': 'drones',
        'emoji': 'emoji',
        'pedestals': 'pedestals',
        'prints': 'prints',
        'stickers': 'stickers',
        'props': 'props'
    }

    def __init__(self, drones=True, emoji=True, pedestals=True, prints=True, stickers=True, props=True, local_vars_configuration=None):  # noqa: E501
        """InstanceContentSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._drones = None
        self._emoji = None
        self._pedestals = None
        self._prints = None
        self._stickers = None
        self._props = None
        self.discriminator = None

        if drones is not None:
            self.drones = drones
        if emoji is not None:
            self.emoji = emoji
        if pedestals is not None:
            self.pedestals = pedestals
        if prints is not None:
            self.prints = prints
        if stickers is not None:
            self.stickers = stickers
        if props is not None:
            self.props = props

    @property
    def drones(self):
        """Gets the drones of this InstanceContentSettings.  # noqa: E501


        :return: The drones of this InstanceContentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._drones

    @drones.setter
    def drones(self, drones):
        """Sets the drones of this InstanceContentSettings.


        :param drones: The drones of this InstanceContentSettings.  # noqa: E501
        :type drones: bool
        """

        self._drones = drones

    @property
    def emoji(self):
        """Gets the emoji of this InstanceContentSettings.  # noqa: E501


        :return: The emoji of this InstanceContentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._emoji

    @emoji.setter
    def emoji(self, emoji):
        """Sets the emoji of this InstanceContentSettings.


        :param emoji: The emoji of this InstanceContentSettings.  # noqa: E501
        :type emoji: bool
        """

        self._emoji = emoji

    @property
    def pedestals(self):
        """Gets the pedestals of this InstanceContentSettings.  # noqa: E501


        :return: The pedestals of this InstanceContentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._pedestals

    @pedestals.setter
    def pedestals(self, pedestals):
        """Sets the pedestals of this InstanceContentSettings.


        :param pedestals: The pedestals of this InstanceContentSettings.  # noqa: E501
        :type pedestals: bool
        """

        self._pedestals = pedestals

    @property
    def prints(self):
        """Gets the prints of this InstanceContentSettings.  # noqa: E501


        :return: The prints of this InstanceContentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._prints

    @prints.setter
    def prints(self, prints):
        """Sets the prints of this InstanceContentSettings.


        :param prints: The prints of this InstanceContentSettings.  # noqa: E501
        :type prints: bool
        """

        self._prints = prints

    @property
    def stickers(self):
        """Gets the stickers of this InstanceContentSettings.  # noqa: E501


        :return: The stickers of this InstanceContentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._stickers

    @stickers.setter
    def stickers(self, stickers):
        """Sets the stickers of this InstanceContentSettings.


        :param stickers: The stickers of this InstanceContentSettings.  # noqa: E501
        :type stickers: bool
        """

        self._stickers = stickers

    @property
    def props(self):
        """Gets the props of this InstanceContentSettings.  # noqa: E501


        :return: The props of this InstanceContentSettings.  # noqa: E501
        :rtype: bool
        """
        return self._props

    @props.setter
    def props(self, props):
        """Sets the props of this InstanceContentSettings.


        :param props: The props of this InstanceContentSettings.  # noqa: E501
        :type props: bool
        """

        self._props = props

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceContentSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InstanceContentSettings):
            return True

        return self.to_dict() != other.to_dict()
