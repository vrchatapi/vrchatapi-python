# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class UpdateCalendarEventRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'title': 'str',
        'starts_at': 'datetime',
        'description': 'str',
        'ends_at': 'datetime',
        'category': 'str',
        'tags': 'list[str]',
        'is_draft': 'bool',
        'image_id': 'str',
        'role_ids': 'list[str]',
        'parent_id': 'str',
        'platforms': 'list[str]',
        'languages': 'list[str]',
        'send_creation_notification': 'bool',
        'featured': 'bool',
        'host_early_join_minutes': 'int',
        'guest_early_join_minutes': 'int',
        'close_instance_after_end_minutes': 'int',
        'uses_instance_overflow': 'bool'
    }

    attribute_map = {
        'title': 'title',
        'starts_at': 'startsAt',
        'description': 'description',
        'ends_at': 'endsAt',
        'category': 'category',
        'tags': 'tags',
        'is_draft': 'isDraft',
        'image_id': 'imageId',
        'role_ids': 'roleIds',
        'parent_id': 'parentId',
        'platforms': 'platforms',
        'languages': 'languages',
        'send_creation_notification': 'sendCreationNotification',
        'featured': 'featured',
        'host_early_join_minutes': 'hostEarlyJoinMinutes',
        'guest_early_join_minutes': 'guestEarlyJoinMinutes',
        'close_instance_after_end_minutes': 'closeInstanceAfterEndMinutes',
        'uses_instance_overflow': 'usesInstanceOverflow'
    }

    def __init__(self, title=None, starts_at=None, description=None, ends_at=None, category=None, tags=None, is_draft=None, image_id=None, role_ids=None, parent_id=None, platforms=None, languages=None, send_creation_notification=False, featured=None, host_early_join_minutes=None, guest_early_join_minutes=None, close_instance_after_end_minutes=None, uses_instance_overflow=None, local_vars_configuration=None):  # noqa: E501
        """UpdateCalendarEventRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._title = None
        self._starts_at = None
        self._description = None
        self._ends_at = None
        self._category = None
        self._tags = None
        self._is_draft = None
        self._image_id = None
        self._role_ids = None
        self._parent_id = None
        self._platforms = None
        self._languages = None
        self._send_creation_notification = None
        self._featured = None
        self._host_early_join_minutes = None
        self._guest_early_join_minutes = None
        self._close_instance_after_end_minutes = None
        self._uses_instance_overflow = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if starts_at is not None:
            self.starts_at = starts_at
        if description is not None:
            self.description = description
        if ends_at is not None:
            self.ends_at = ends_at
        if category is not None:
            self.category = category
        if tags is not None:
            self.tags = tags
        if is_draft is not None:
            self.is_draft = is_draft
        if image_id is not None:
            self.image_id = image_id
        if role_ids is not None:
            self.role_ids = role_ids
        if parent_id is not None:
            self.parent_id = parent_id
        if platforms is not None:
            self.platforms = platforms
        if languages is not None:
            self.languages = languages
        if send_creation_notification is not None:
            self.send_creation_notification = send_creation_notification
        if featured is not None:
            self.featured = featured
        if host_early_join_minutes is not None:
            self.host_early_join_minutes = host_early_join_minutes
        if guest_early_join_minutes is not None:
            self.guest_early_join_minutes = guest_early_join_minutes
        if close_instance_after_end_minutes is not None:
            self.close_instance_after_end_minutes = close_instance_after_end_minutes
        if uses_instance_overflow is not None:
            self.uses_instance_overflow = uses_instance_overflow

    @property
    def title(self):
        """Gets the title of this UpdateCalendarEventRequest.  # noqa: E501

        Event title  # noqa: E501

        :return: The title of this UpdateCalendarEventRequest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UpdateCalendarEventRequest.

        Event title  # noqa: E501

        :param title: The title of this UpdateCalendarEventRequest.  # noqa: E501
        :type title: str
        """
        if (self.local_vars_configuration.client_side_validation and
                title is not None and len(title) < 1):
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def starts_at(self):
        """Gets the starts_at of this UpdateCalendarEventRequest.  # noqa: E501

        Time the vent starts at  # noqa: E501

        :return: The starts_at of this UpdateCalendarEventRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._starts_at

    @starts_at.setter
    def starts_at(self, starts_at):
        """Sets the starts_at of this UpdateCalendarEventRequest.

        Time the vent starts at  # noqa: E501

        :param starts_at: The starts_at of this UpdateCalendarEventRequest.  # noqa: E501
        :type starts_at: datetime
        """

        self._starts_at = starts_at

    @property
    def description(self):
        """Gets the description of this UpdateCalendarEventRequest.  # noqa: E501


        :return: The description of this UpdateCalendarEventRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateCalendarEventRequest.


        :param description: The description of this UpdateCalendarEventRequest.  # noqa: E501
        :type description: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) < 1):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def ends_at(self):
        """Gets the ends_at of this UpdateCalendarEventRequest.  # noqa: E501

        Time the vent starts at  # noqa: E501

        :return: The ends_at of this UpdateCalendarEventRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._ends_at

    @ends_at.setter
    def ends_at(self, ends_at):
        """Sets the ends_at of this UpdateCalendarEventRequest.

        Time the vent starts at  # noqa: E501

        :param ends_at: The ends_at of this UpdateCalendarEventRequest.  # noqa: E501
        :type ends_at: datetime
        """

        self._ends_at = ends_at

    @property
    def category(self):
        """Gets the category of this UpdateCalendarEventRequest.  # noqa: E501


        :return: The category of this UpdateCalendarEventRequest.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this UpdateCalendarEventRequest.


        :param category: The category of this UpdateCalendarEventRequest.  # noqa: E501
        :type category: str
        """

        self._category = category

    @property
    def tags(self):
        """Gets the tags of this UpdateCalendarEventRequest.  # noqa: E501


        :return: The tags of this UpdateCalendarEventRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this UpdateCalendarEventRequest.


        :param tags: The tags of this UpdateCalendarEventRequest.  # noqa: E501
        :type tags: list[str]
        """

        self._tags = tags

    @property
    def is_draft(self):
        """Gets the is_draft of this UpdateCalendarEventRequest.  # noqa: E501


        :return: The is_draft of this UpdateCalendarEventRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_draft

    @is_draft.setter
    def is_draft(self, is_draft):
        """Sets the is_draft of this UpdateCalendarEventRequest.


        :param is_draft: The is_draft of this UpdateCalendarEventRequest.  # noqa: E501
        :type is_draft: bool
        """

        self._is_draft = is_draft

    @property
    def image_id(self):
        """Gets the image_id of this UpdateCalendarEventRequest.  # noqa: E501


        :return: The image_id of this UpdateCalendarEventRequest.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this UpdateCalendarEventRequest.


        :param image_id: The image_id of this UpdateCalendarEventRequest.  # noqa: E501
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def role_ids(self):
        """Gets the role_ids of this UpdateCalendarEventRequest.  # noqa: E501


        :return: The role_ids of this UpdateCalendarEventRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._role_ids

    @role_ids.setter
    def role_ids(self, role_ids):
        """Sets the role_ids of this UpdateCalendarEventRequest.


        :param role_ids: The role_ids of this UpdateCalendarEventRequest.  # noqa: E501
        :type role_ids: list[str]
        """

        self._role_ids = role_ids

    @property
    def parent_id(self):
        """Gets the parent_id of this UpdateCalendarEventRequest.  # noqa: E501


        :return: The parent_id of this UpdateCalendarEventRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this UpdateCalendarEventRequest.


        :param parent_id: The parent_id of this UpdateCalendarEventRequest.  # noqa: E501
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def platforms(self):
        """Gets the platforms of this UpdateCalendarEventRequest.  # noqa: E501


        :return: The platforms of this UpdateCalendarEventRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._platforms

    @platforms.setter
    def platforms(self, platforms):
        """Sets the platforms of this UpdateCalendarEventRequest.


        :param platforms: The platforms of this UpdateCalendarEventRequest.  # noqa: E501
        :type platforms: list[str]
        """

        self._platforms = platforms

    @property
    def languages(self):
        """Gets the languages of this UpdateCalendarEventRequest.  # noqa: E501


        :return: The languages of this UpdateCalendarEventRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this UpdateCalendarEventRequest.


        :param languages: The languages of this UpdateCalendarEventRequest.  # noqa: E501
        :type languages: list[str]
        """

        self._languages = languages

    @property
    def send_creation_notification(self):
        """Gets the send_creation_notification of this UpdateCalendarEventRequest.  # noqa: E501

        Send notification to group members.  # noqa: E501

        :return: The send_creation_notification of this UpdateCalendarEventRequest.  # noqa: E501
        :rtype: bool
        """
        return self._send_creation_notification

    @send_creation_notification.setter
    def send_creation_notification(self, send_creation_notification):
        """Sets the send_creation_notification of this UpdateCalendarEventRequest.

        Send notification to group members.  # noqa: E501

        :param send_creation_notification: The send_creation_notification of this UpdateCalendarEventRequest.  # noqa: E501
        :type send_creation_notification: bool
        """

        self._send_creation_notification = send_creation_notification

    @property
    def featured(self):
        """Gets the featured of this UpdateCalendarEventRequest.  # noqa: E501


        :return: The featured of this UpdateCalendarEventRequest.  # noqa: E501
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured):
        """Sets the featured of this UpdateCalendarEventRequest.


        :param featured: The featured of this UpdateCalendarEventRequest.  # noqa: E501
        :type featured: bool
        """

        self._featured = featured

    @property
    def host_early_join_minutes(self):
        """Gets the host_early_join_minutes of this UpdateCalendarEventRequest.  # noqa: E501


        :return: The host_early_join_minutes of this UpdateCalendarEventRequest.  # noqa: E501
        :rtype: int
        """
        return self._host_early_join_minutes

    @host_early_join_minutes.setter
    def host_early_join_minutes(self, host_early_join_minutes):
        """Sets the host_early_join_minutes of this UpdateCalendarEventRequest.


        :param host_early_join_minutes: The host_early_join_minutes of this UpdateCalendarEventRequest.  # noqa: E501
        :type host_early_join_minutes: int
        """

        self._host_early_join_minutes = host_early_join_minutes

    @property
    def guest_early_join_minutes(self):
        """Gets the guest_early_join_minutes of this UpdateCalendarEventRequest.  # noqa: E501


        :return: The guest_early_join_minutes of this UpdateCalendarEventRequest.  # noqa: E501
        :rtype: int
        """
        return self._guest_early_join_minutes

    @guest_early_join_minutes.setter
    def guest_early_join_minutes(self, guest_early_join_minutes):
        """Sets the guest_early_join_minutes of this UpdateCalendarEventRequest.


        :param guest_early_join_minutes: The guest_early_join_minutes of this UpdateCalendarEventRequest.  # noqa: E501
        :type guest_early_join_minutes: int
        """

        self._guest_early_join_minutes = guest_early_join_minutes

    @property
    def close_instance_after_end_minutes(self):
        """Gets the close_instance_after_end_minutes of this UpdateCalendarEventRequest.  # noqa: E501


        :return: The close_instance_after_end_minutes of this UpdateCalendarEventRequest.  # noqa: E501
        :rtype: int
        """
        return self._close_instance_after_end_minutes

    @close_instance_after_end_minutes.setter
    def close_instance_after_end_minutes(self, close_instance_after_end_minutes):
        """Sets the close_instance_after_end_minutes of this UpdateCalendarEventRequest.


        :param close_instance_after_end_minutes: The close_instance_after_end_minutes of this UpdateCalendarEventRequest.  # noqa: E501
        :type close_instance_after_end_minutes: int
        """

        self._close_instance_after_end_minutes = close_instance_after_end_minutes

    @property
    def uses_instance_overflow(self):
        """Gets the uses_instance_overflow of this UpdateCalendarEventRequest.  # noqa: E501


        :return: The uses_instance_overflow of this UpdateCalendarEventRequest.  # noqa: E501
        :rtype: bool
        """
        return self._uses_instance_overflow

    @uses_instance_overflow.setter
    def uses_instance_overflow(self, uses_instance_overflow):
        """Sets the uses_instance_overflow of this UpdateCalendarEventRequest.


        :param uses_instance_overflow: The uses_instance_overflow of this UpdateCalendarEventRequest.  # noqa: E501
        :type uses_instance_overflow: bool
        """

        self._uses_instance_overflow = uses_instance_overflow

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateCalendarEventRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateCalendarEventRequest):
            return True

        return self.to_dict() != other.to_dict()
