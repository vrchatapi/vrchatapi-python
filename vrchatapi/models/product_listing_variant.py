# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class ProductListingVariant(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'effective_from': 'datetime',
        'listing_variant_id': 'str',
        'non_refundable': 'bool',
        'quantity': 'int',
        'seller_variant': 'bool',
        'unit_price_tokens': 'int'
    }

    attribute_map = {
        'effective_from': 'effectiveFrom',
        'listing_variant_id': 'listingVariantId',
        'non_refundable': 'nonRefundable',
        'quantity': 'quantity',
        'seller_variant': 'sellerVariant',
        'unit_price_tokens': 'unitPriceTokens'
    }

    def __init__(self, effective_from=None, listing_variant_id=None, non_refundable=None, quantity=None, seller_variant=None, unit_price_tokens=None, local_vars_configuration=None):  # noqa: E501
        """ProductListingVariant - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._effective_from = None
        self._listing_variant_id = None
        self._non_refundable = None
        self._quantity = None
        self._seller_variant = None
        self._unit_price_tokens = None
        self.discriminator = None

        if effective_from is not None:
            self.effective_from = effective_from
        self.listing_variant_id = listing_variant_id
        self.non_refundable = non_refundable
        self.quantity = quantity
        self.seller_variant = seller_variant
        self.unit_price_tokens = unit_price_tokens

    @property
    def effective_from(self):
        """Gets the effective_from of this ProductListingVariant.  # noqa: E501


        :return: The effective_from of this ProductListingVariant.  # noqa: E501
        :rtype: datetime
        """
        return self._effective_from

    @effective_from.setter
    def effective_from(self, effective_from):
        """Sets the effective_from of this ProductListingVariant.


        :param effective_from: The effective_from of this ProductListingVariant.  # noqa: E501
        :type effective_from: datetime
        """

        self._effective_from = effective_from

    @property
    def listing_variant_id(self):
        """Gets the listing_variant_id of this ProductListingVariant.  # noqa: E501


        :return: The listing_variant_id of this ProductListingVariant.  # noqa: E501
        :rtype: str
        """
        return self._listing_variant_id

    @listing_variant_id.setter
    def listing_variant_id(self, listing_variant_id):
        """Sets the listing_variant_id of this ProductListingVariant.


        :param listing_variant_id: The listing_variant_id of this ProductListingVariant.  # noqa: E501
        :type listing_variant_id: str
        """
        if self.local_vars_configuration.client_side_validation and listing_variant_id is None:  # noqa: E501
            raise ValueError("Invalid value for `listing_variant_id`, must not be `None`")  # noqa: E501

        self._listing_variant_id = listing_variant_id

    @property
    def non_refundable(self):
        """Gets the non_refundable of this ProductListingVariant.  # noqa: E501


        :return: The non_refundable of this ProductListingVariant.  # noqa: E501
        :rtype: bool
        """
        return self._non_refundable

    @non_refundable.setter
    def non_refundable(self, non_refundable):
        """Sets the non_refundable of this ProductListingVariant.


        :param non_refundable: The non_refundable of this ProductListingVariant.  # noqa: E501
        :type non_refundable: bool
        """
        if self.local_vars_configuration.client_side_validation and non_refundable is None:  # noqa: E501
            raise ValueError("Invalid value for `non_refundable`, must not be `None`")  # noqa: E501

        self._non_refundable = non_refundable

    @property
    def quantity(self):
        """Gets the quantity of this ProductListingVariant.  # noqa: E501


        :return: The quantity of this ProductListingVariant.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProductListingVariant.


        :param quantity: The quantity of this ProductListingVariant.  # noqa: E501
        :type quantity: int
        """
        if self.local_vars_configuration.client_side_validation and quantity is None:  # noqa: E501
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def seller_variant(self):
        """Gets the seller_variant of this ProductListingVariant.  # noqa: E501


        :return: The seller_variant of this ProductListingVariant.  # noqa: E501
        :rtype: bool
        """
        return self._seller_variant

    @seller_variant.setter
    def seller_variant(self, seller_variant):
        """Sets the seller_variant of this ProductListingVariant.


        :param seller_variant: The seller_variant of this ProductListingVariant.  # noqa: E501
        :type seller_variant: bool
        """
        if self.local_vars_configuration.client_side_validation and seller_variant is None:  # noqa: E501
            raise ValueError("Invalid value for `seller_variant`, must not be `None`")  # noqa: E501

        self._seller_variant = seller_variant

    @property
    def unit_price_tokens(self):
        """Gets the unit_price_tokens of this ProductListingVariant.  # noqa: E501


        :return: The unit_price_tokens of this ProductListingVariant.  # noqa: E501
        :rtype: int
        """
        return self._unit_price_tokens

    @unit_price_tokens.setter
    def unit_price_tokens(self, unit_price_tokens):
        """Sets the unit_price_tokens of this ProductListingVariant.


        :param unit_price_tokens: The unit_price_tokens of this ProductListingVariant.  # noqa: E501
        :type unit_price_tokens: int
        """
        if self.local_vars_configuration.client_side_validation and unit_price_tokens is None:  # noqa: E501
            raise ValueError("Invalid value for `unit_price_tokens`, must not be `None`")  # noqa: E501

        self._unit_price_tokens = unit_price_tokens

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductListingVariant):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductListingVariant):
            return True

        return self.to_dict() != other.to_dict()
