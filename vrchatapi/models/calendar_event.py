# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class CalendarEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_type': 'str',
        'category': 'str',
        'close_instance_after_end_minutes': 'int',
        'created_at': 'datetime',
        'deleted_at': 'datetime',
        'description': 'str',
        'ends_at': 'datetime',
        'featured': 'bool',
        'guest_early_join_minutes': 'int',
        'host_early_join_minutes': 'int',
        'id': 'str',
        'image_id': 'str',
        'image_url': 'str',
        'interested_user_count': 'int',
        'is_draft': 'bool',
        'languages': 'list[str]',
        'owner_id': 'str',
        'platforms': 'list[str]',
        'role_ids': 'list[str]',
        'starts_at': 'datetime',
        'tags': 'list[str]',
        'title': 'str',
        'type': 'str',
        'updated_at': 'datetime',
        'uses_instance_overflow': 'bool',
        'user_interest': 'CalendarEventUserInterest'
    }

    attribute_map = {
        'access_type': 'accessType',
        'category': 'category',
        'close_instance_after_end_minutes': 'closeInstanceAfterEndMinutes',
        'created_at': 'createdAt',
        'deleted_at': 'deletedAt',
        'description': 'description',
        'ends_at': 'endsAt',
        'featured': 'featured',
        'guest_early_join_minutes': 'guestEarlyJoinMinutes',
        'host_early_join_minutes': 'hostEarlyJoinMinutes',
        'id': 'id',
        'image_id': 'imageId',
        'image_url': 'imageUrl',
        'interested_user_count': 'interestedUserCount',
        'is_draft': 'isDraft',
        'languages': 'languages',
        'owner_id': 'ownerId',
        'platforms': 'platforms',
        'role_ids': 'roleIds',
        'starts_at': 'startsAt',
        'tags': 'tags',
        'title': 'title',
        'type': 'type',
        'updated_at': 'updatedAt',
        'uses_instance_overflow': 'usesInstanceOverflow',
        'user_interest': 'userInterest'
    }

    def __init__(self, access_type=None, category=None, close_instance_after_end_minutes=None, created_at=None, deleted_at=None, description=None, ends_at=None, featured=None, guest_early_join_minutes=None, host_early_join_minutes=None, id=None, image_id=None, image_url=None, interested_user_count=None, is_draft=None, languages=None, owner_id=None, platforms=None, role_ids=None, starts_at=None, tags=None, title=None, type=None, updated_at=None, uses_instance_overflow=None, user_interest=None, local_vars_configuration=None):  # noqa: E501
        """CalendarEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._access_type = None
        self._category = None
        self._close_instance_after_end_minutes = None
        self._created_at = None
        self._deleted_at = None
        self._description = None
        self._ends_at = None
        self._featured = None
        self._guest_early_join_minutes = None
        self._host_early_join_minutes = None
        self._id = None
        self._image_id = None
        self._image_url = None
        self._interested_user_count = None
        self._is_draft = None
        self._languages = None
        self._owner_id = None
        self._platforms = None
        self._role_ids = None
        self._starts_at = None
        self._tags = None
        self._title = None
        self._type = None
        self._updated_at = None
        self._uses_instance_overflow = None
        self._user_interest = None
        self.discriminator = None

        self.access_type = access_type
        if category is not None:
            self.category = category
        if close_instance_after_end_minutes is not None:
            self.close_instance_after_end_minutes = close_instance_after_end_minutes
        if created_at is not None:
            self.created_at = created_at
        self.deleted_at = deleted_at
        if description is not None:
            self.description = description
        if ends_at is not None:
            self.ends_at = ends_at
        if featured is not None:
            self.featured = featured
        if guest_early_join_minutes is not None:
            self.guest_early_join_minutes = guest_early_join_minutes
        if host_early_join_minutes is not None:
            self.host_early_join_minutes = host_early_join_minutes
        self.id = id
        if image_id is not None:
            self.image_id = image_id
        self.image_url = image_url
        if interested_user_count is not None:
            self.interested_user_count = interested_user_count
        if is_draft is not None:
            self.is_draft = is_draft
        if languages is not None:
            self.languages = languages
        if owner_id is not None:
            self.owner_id = owner_id
        if platforms is not None:
            self.platforms = platforms
        self.role_ids = role_ids
        if starts_at is not None:
            self.starts_at = starts_at
        if tags is not None:
            self.tags = tags
        self.title = title
        if type is not None:
            self.type = type
        if updated_at is not None:
            self.updated_at = updated_at
        if uses_instance_overflow is not None:
            self.uses_instance_overflow = uses_instance_overflow
        if user_interest is not None:
            self.user_interest = user_interest

    @property
    def access_type(self):
        """Gets the access_type of this CalendarEvent.  # noqa: E501


        :return: The access_type of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this CalendarEvent.


        :param access_type: The access_type of this CalendarEvent.  # noqa: E501
        :type access_type: str
        """
        if self.local_vars_configuration.client_side_validation and access_type is None:  # noqa: E501
            raise ValueError("Invalid value for `access_type`, must not be `None`")  # noqa: E501

        self._access_type = access_type

    @property
    def category(self):
        """Gets the category of this CalendarEvent.  # noqa: E501


        :return: The category of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CalendarEvent.


        :param category: The category of this CalendarEvent.  # noqa: E501
        :type category: str
        """

        self._category = category

    @property
    def close_instance_after_end_minutes(self):
        """Gets the close_instance_after_end_minutes of this CalendarEvent.  # noqa: E501


        :return: The close_instance_after_end_minutes of this CalendarEvent.  # noqa: E501
        :rtype: int
        """
        return self._close_instance_after_end_minutes

    @close_instance_after_end_minutes.setter
    def close_instance_after_end_minutes(self, close_instance_after_end_minutes):
        """Sets the close_instance_after_end_minutes of this CalendarEvent.


        :param close_instance_after_end_minutes: The close_instance_after_end_minutes of this CalendarEvent.  # noqa: E501
        :type close_instance_after_end_minutes: int
        """

        self._close_instance_after_end_minutes = close_instance_after_end_minutes

    @property
    def created_at(self):
        """Gets the created_at of this CalendarEvent.  # noqa: E501


        :return: The created_at of this CalendarEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CalendarEvent.


        :param created_at: The created_at of this CalendarEvent.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this CalendarEvent.  # noqa: E501


        :return: The deleted_at of this CalendarEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this CalendarEvent.


        :param deleted_at: The deleted_at of this CalendarEvent.  # noqa: E501
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def description(self):
        """Gets the description of this CalendarEvent.  # noqa: E501


        :return: The description of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CalendarEvent.


        :param description: The description of this CalendarEvent.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def ends_at(self):
        """Gets the ends_at of this CalendarEvent.  # noqa: E501


        :return: The ends_at of this CalendarEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._ends_at

    @ends_at.setter
    def ends_at(self, ends_at):
        """Sets the ends_at of this CalendarEvent.


        :param ends_at: The ends_at of this CalendarEvent.  # noqa: E501
        :type ends_at: datetime
        """

        self._ends_at = ends_at

    @property
    def featured(self):
        """Gets the featured of this CalendarEvent.  # noqa: E501


        :return: The featured of this CalendarEvent.  # noqa: E501
        :rtype: bool
        """
        return self._featured

    @featured.setter
    def featured(self, featured):
        """Sets the featured of this CalendarEvent.


        :param featured: The featured of this CalendarEvent.  # noqa: E501
        :type featured: bool
        """

        self._featured = featured

    @property
    def guest_early_join_minutes(self):
        """Gets the guest_early_join_minutes of this CalendarEvent.  # noqa: E501


        :return: The guest_early_join_minutes of this CalendarEvent.  # noqa: E501
        :rtype: int
        """
        return self._guest_early_join_minutes

    @guest_early_join_minutes.setter
    def guest_early_join_minutes(self, guest_early_join_minutes):
        """Sets the guest_early_join_minutes of this CalendarEvent.


        :param guest_early_join_minutes: The guest_early_join_minutes of this CalendarEvent.  # noqa: E501
        :type guest_early_join_minutes: int
        """

        self._guest_early_join_minutes = guest_early_join_minutes

    @property
    def host_early_join_minutes(self):
        """Gets the host_early_join_minutes of this CalendarEvent.  # noqa: E501


        :return: The host_early_join_minutes of this CalendarEvent.  # noqa: E501
        :rtype: int
        """
        return self._host_early_join_minutes

    @host_early_join_minutes.setter
    def host_early_join_minutes(self, host_early_join_minutes):
        """Sets the host_early_join_minutes of this CalendarEvent.


        :param host_early_join_minutes: The host_early_join_minutes of this CalendarEvent.  # noqa: E501
        :type host_early_join_minutes: int
        """

        self._host_early_join_minutes = host_early_join_minutes

    @property
    def id(self):
        """Gets the id of this CalendarEvent.  # noqa: E501


        :return: The id of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CalendarEvent.


        :param id: The id of this CalendarEvent.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def image_id(self):
        """Gets the image_id of this CalendarEvent.  # noqa: E501


        :return: The image_id of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this CalendarEvent.


        :param image_id: The image_id of this CalendarEvent.  # noqa: E501
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def image_url(self):
        """Gets the image_url of this CalendarEvent.  # noqa: E501


        :return: The image_url of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this CalendarEvent.


        :param image_url: The image_url of this CalendarEvent.  # noqa: E501
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def interested_user_count(self):
        """Gets the interested_user_count of this CalendarEvent.  # noqa: E501


        :return: The interested_user_count of this CalendarEvent.  # noqa: E501
        :rtype: int
        """
        return self._interested_user_count

    @interested_user_count.setter
    def interested_user_count(self, interested_user_count):
        """Sets the interested_user_count of this CalendarEvent.


        :param interested_user_count: The interested_user_count of this CalendarEvent.  # noqa: E501
        :type interested_user_count: int
        """

        self._interested_user_count = interested_user_count

    @property
    def is_draft(self):
        """Gets the is_draft of this CalendarEvent.  # noqa: E501


        :return: The is_draft of this CalendarEvent.  # noqa: E501
        :rtype: bool
        """
        return self._is_draft

    @is_draft.setter
    def is_draft(self, is_draft):
        """Sets the is_draft of this CalendarEvent.


        :param is_draft: The is_draft of this CalendarEvent.  # noqa: E501
        :type is_draft: bool
        """

        self._is_draft = is_draft

    @property
    def languages(self):
        """Gets the languages of this CalendarEvent.  # noqa: E501

           # noqa: E501

        :return: The languages of this CalendarEvent.  # noqa: E501
        :rtype: list[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this CalendarEvent.

           # noqa: E501

        :param languages: The languages of this CalendarEvent.  # noqa: E501
        :type languages: list[str]
        """

        self._languages = languages

    @property
    def owner_id(self):
        """Gets the owner_id of this CalendarEvent.  # noqa: E501


        :return: The owner_id of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this CalendarEvent.


        :param owner_id: The owner_id of this CalendarEvent.  # noqa: E501
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def platforms(self):
        """Gets the platforms of this CalendarEvent.  # noqa: E501

           # noqa: E501

        :return: The platforms of this CalendarEvent.  # noqa: E501
        :rtype: list[str]
        """
        return self._platforms

    @platforms.setter
    def platforms(self, platforms):
        """Sets the platforms of this CalendarEvent.

           # noqa: E501

        :param platforms: The platforms of this CalendarEvent.  # noqa: E501
        :type platforms: list[str]
        """

        self._platforms = platforms

    @property
    def role_ids(self):
        """Gets the role_ids of this CalendarEvent.  # noqa: E501

           # noqa: E501

        :return: The role_ids of this CalendarEvent.  # noqa: E501
        :rtype: list[str]
        """
        return self._role_ids

    @role_ids.setter
    def role_ids(self, role_ids):
        """Sets the role_ids of this CalendarEvent.

           # noqa: E501

        :param role_ids: The role_ids of this CalendarEvent.  # noqa: E501
        :type role_ids: list[str]
        """

        self._role_ids = role_ids

    @property
    def starts_at(self):
        """Gets the starts_at of this CalendarEvent.  # noqa: E501


        :return: The starts_at of this CalendarEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._starts_at

    @starts_at.setter
    def starts_at(self, starts_at):
        """Sets the starts_at of this CalendarEvent.


        :param starts_at: The starts_at of this CalendarEvent.  # noqa: E501
        :type starts_at: datetime
        """

        self._starts_at = starts_at

    @property
    def tags(self):
        """Gets the tags of this CalendarEvent.  # noqa: E501

           # noqa: E501

        :return: The tags of this CalendarEvent.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CalendarEvent.

           # noqa: E501

        :param tags: The tags of this CalendarEvent.  # noqa: E501
        :type tags: list[str]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this CalendarEvent.  # noqa: E501


        :return: The title of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CalendarEvent.


        :param title: The title of this CalendarEvent.  # noqa: E501
        :type title: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                title is not None and len(title) < 1):
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def type(self):
        """Gets the type of this CalendarEvent.  # noqa: E501


        :return: The type of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CalendarEvent.


        :param type: The type of this CalendarEvent.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this CalendarEvent.  # noqa: E501


        :return: The updated_at of this CalendarEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CalendarEvent.


        :param updated_at: The updated_at of this CalendarEvent.  # noqa: E501
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def uses_instance_overflow(self):
        """Gets the uses_instance_overflow of this CalendarEvent.  # noqa: E501


        :return: The uses_instance_overflow of this CalendarEvent.  # noqa: E501
        :rtype: bool
        """
        return self._uses_instance_overflow

    @uses_instance_overflow.setter
    def uses_instance_overflow(self, uses_instance_overflow):
        """Sets the uses_instance_overflow of this CalendarEvent.


        :param uses_instance_overflow: The uses_instance_overflow of this CalendarEvent.  # noqa: E501
        :type uses_instance_overflow: bool
        """

        self._uses_instance_overflow = uses_instance_overflow

    @property
    def user_interest(self):
        """Gets the user_interest of this CalendarEvent.  # noqa: E501


        :return: The user_interest of this CalendarEvent.  # noqa: E501
        :rtype: CalendarEventUserInterest
        """
        return self._user_interest

    @user_interest.setter
    def user_interest(self, user_interest):
        """Sets the user_interest of this CalendarEvent.


        :param user_interest: The user_interest of this CalendarEvent.  # noqa: E501
        :type user_interest: CalendarEventUserInterest
        """

        self._user_interest = user_interest

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalendarEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CalendarEvent):
            return True

        return self.to_dict() != other.to_dict()
