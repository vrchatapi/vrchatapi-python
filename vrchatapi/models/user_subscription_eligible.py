# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class UserSubscriptionEligible(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active_cancelled_subscription': 'bool',
        'gift_eligible': 'bool',
        'non_extend_vendor_will_lose_gift_time': 'bool',
        'purchase_eligible': 'bool',
        'subscription_eligible': 'bool',
        'subscription_on_alt_account': 'bool'
    }

    attribute_map = {
        'active_cancelled_subscription': 'activeCancelledSubscription',
        'gift_eligible': 'giftEligible',
        'non_extend_vendor_will_lose_gift_time': 'nonExtendVendorWillLoseGiftTime',
        'purchase_eligible': 'purchaseEligible',
        'subscription_eligible': 'subscriptionEligible',
        'subscription_on_alt_account': 'subscriptionOnAltAccount'
    }

    def __init__(self, active_cancelled_subscription=None, gift_eligible=None, non_extend_vendor_will_lose_gift_time=None, purchase_eligible=None, subscription_eligible=None, subscription_on_alt_account=None, local_vars_configuration=None):  # noqa: E501
        """UserSubscriptionEligible - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._active_cancelled_subscription = None
        self._gift_eligible = None
        self._non_extend_vendor_will_lose_gift_time = None
        self._purchase_eligible = None
        self._subscription_eligible = None
        self._subscription_on_alt_account = None
        self.discriminator = None

        self.active_cancelled_subscription = active_cancelled_subscription
        self.gift_eligible = gift_eligible
        self.non_extend_vendor_will_lose_gift_time = non_extend_vendor_will_lose_gift_time
        self.purchase_eligible = purchase_eligible
        self.subscription_eligible = subscription_eligible
        self.subscription_on_alt_account = subscription_on_alt_account

    @property
    def active_cancelled_subscription(self):
        """Gets the active_cancelled_subscription of this UserSubscriptionEligible.  # noqa: E501


        :return: The active_cancelled_subscription of this UserSubscriptionEligible.  # noqa: E501
        :rtype: bool
        """
        return self._active_cancelled_subscription

    @active_cancelled_subscription.setter
    def active_cancelled_subscription(self, active_cancelled_subscription):
        """Sets the active_cancelled_subscription of this UserSubscriptionEligible.


        :param active_cancelled_subscription: The active_cancelled_subscription of this UserSubscriptionEligible.  # noqa: E501
        :type active_cancelled_subscription: bool
        """
        if self.local_vars_configuration.client_side_validation and active_cancelled_subscription is None:  # noqa: E501
            raise ValueError("Invalid value for `active_cancelled_subscription`, must not be `None`")  # noqa: E501

        self._active_cancelled_subscription = active_cancelled_subscription

    @property
    def gift_eligible(self):
        """Gets the gift_eligible of this UserSubscriptionEligible.  # noqa: E501


        :return: The gift_eligible of this UserSubscriptionEligible.  # noqa: E501
        :rtype: bool
        """
        return self._gift_eligible

    @gift_eligible.setter
    def gift_eligible(self, gift_eligible):
        """Sets the gift_eligible of this UserSubscriptionEligible.


        :param gift_eligible: The gift_eligible of this UserSubscriptionEligible.  # noqa: E501
        :type gift_eligible: bool
        """
        if self.local_vars_configuration.client_side_validation and gift_eligible is None:  # noqa: E501
            raise ValueError("Invalid value for `gift_eligible`, must not be `None`")  # noqa: E501

        self._gift_eligible = gift_eligible

    @property
    def non_extend_vendor_will_lose_gift_time(self):
        """Gets the non_extend_vendor_will_lose_gift_time of this UserSubscriptionEligible.  # noqa: E501


        :return: The non_extend_vendor_will_lose_gift_time of this UserSubscriptionEligible.  # noqa: E501
        :rtype: bool
        """
        return self._non_extend_vendor_will_lose_gift_time

    @non_extend_vendor_will_lose_gift_time.setter
    def non_extend_vendor_will_lose_gift_time(self, non_extend_vendor_will_lose_gift_time):
        """Sets the non_extend_vendor_will_lose_gift_time of this UserSubscriptionEligible.


        :param non_extend_vendor_will_lose_gift_time: The non_extend_vendor_will_lose_gift_time of this UserSubscriptionEligible.  # noqa: E501
        :type non_extend_vendor_will_lose_gift_time: bool
        """
        if self.local_vars_configuration.client_side_validation and non_extend_vendor_will_lose_gift_time is None:  # noqa: E501
            raise ValueError("Invalid value for `non_extend_vendor_will_lose_gift_time`, must not be `None`")  # noqa: E501

        self._non_extend_vendor_will_lose_gift_time = non_extend_vendor_will_lose_gift_time

    @property
    def purchase_eligible(self):
        """Gets the purchase_eligible of this UserSubscriptionEligible.  # noqa: E501


        :return: The purchase_eligible of this UserSubscriptionEligible.  # noqa: E501
        :rtype: bool
        """
        return self._purchase_eligible

    @purchase_eligible.setter
    def purchase_eligible(self, purchase_eligible):
        """Sets the purchase_eligible of this UserSubscriptionEligible.


        :param purchase_eligible: The purchase_eligible of this UserSubscriptionEligible.  # noqa: E501
        :type purchase_eligible: bool
        """
        if self.local_vars_configuration.client_side_validation and purchase_eligible is None:  # noqa: E501
            raise ValueError("Invalid value for `purchase_eligible`, must not be `None`")  # noqa: E501

        self._purchase_eligible = purchase_eligible

    @property
    def subscription_eligible(self):
        """Gets the subscription_eligible of this UserSubscriptionEligible.  # noqa: E501


        :return: The subscription_eligible of this UserSubscriptionEligible.  # noqa: E501
        :rtype: bool
        """
        return self._subscription_eligible

    @subscription_eligible.setter
    def subscription_eligible(self, subscription_eligible):
        """Sets the subscription_eligible of this UserSubscriptionEligible.


        :param subscription_eligible: The subscription_eligible of this UserSubscriptionEligible.  # noqa: E501
        :type subscription_eligible: bool
        """
        if self.local_vars_configuration.client_side_validation and subscription_eligible is None:  # noqa: E501
            raise ValueError("Invalid value for `subscription_eligible`, must not be `None`")  # noqa: E501

        self._subscription_eligible = subscription_eligible

    @property
    def subscription_on_alt_account(self):
        """Gets the subscription_on_alt_account of this UserSubscriptionEligible.  # noqa: E501


        :return: The subscription_on_alt_account of this UserSubscriptionEligible.  # noqa: E501
        :rtype: bool
        """
        return self._subscription_on_alt_account

    @subscription_on_alt_account.setter
    def subscription_on_alt_account(self, subscription_on_alt_account):
        """Sets the subscription_on_alt_account of this UserSubscriptionEligible.


        :param subscription_on_alt_account: The subscription_on_alt_account of this UserSubscriptionEligible.  # noqa: E501
        :type subscription_on_alt_account: bool
        """
        if self.local_vars_configuration.client_side_validation and subscription_on_alt_account is None:  # noqa: E501
            raise ValueError("Invalid value for `subscription_on_alt_account`, must not be `None`")  # noqa: E501

        self._subscription_on_alt_account = subscription_on_alt_account

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSubscriptionEligible):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserSubscriptionEligible):
            return True

        return self.to_dict() != other.to_dict()
