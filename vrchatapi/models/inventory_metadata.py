# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class InventoryMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'inventory_items_to_instantiate': 'list[str]',
        'animated': 'bool',
        'animation_style': 'str',
        'asset_bundle_id': 'str',
        'file_id': 'str',
        'image_url': 'str',
        'mask_tag': 'str',
        'prop_id': 'str'
    }

    attribute_map = {
        'inventory_items_to_instantiate': 'inventoryItemsToInstantiate',
        'animated': 'animated',
        'animation_style': 'animationStyle',
        'asset_bundle_id': 'assetBundleId',
        'file_id': 'fileId',
        'image_url': 'imageUrl',
        'mask_tag': 'maskTag',
        'prop_id': 'propId'
    }

    def __init__(self, inventory_items_to_instantiate=None, animated=None, animation_style=None, asset_bundle_id=None, file_id=None, image_url=None, mask_tag=None, prop_id=None, local_vars_configuration=None):  # noqa: E501
        """InventoryMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._inventory_items_to_instantiate = None
        self._animated = None
        self._animation_style = None
        self._asset_bundle_id = None
        self._file_id = None
        self._image_url = None
        self._mask_tag = None
        self._prop_id = None
        self.discriminator = None

        if inventory_items_to_instantiate is not None:
            self.inventory_items_to_instantiate = inventory_items_to_instantiate
        if animated is not None:
            self.animated = animated
        if animation_style is not None:
            self.animation_style = animation_style
        if asset_bundle_id is not None:
            self.asset_bundle_id = asset_bundle_id
        if file_id is not None:
            self.file_id = file_id
        if image_url is not None:
            self.image_url = image_url
        if mask_tag is not None:
            self.mask_tag = mask_tag
        if prop_id is not None:
            self.prop_id = prop_id

    @property
    def inventory_items_to_instantiate(self):
        """Gets the inventory_items_to_instantiate of this InventoryMetadata.  # noqa: E501

        Only in bundles  # noqa: E501

        :return: The inventory_items_to_instantiate of this InventoryMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._inventory_items_to_instantiate

    @inventory_items_to_instantiate.setter
    def inventory_items_to_instantiate(self, inventory_items_to_instantiate):
        """Sets the inventory_items_to_instantiate of this InventoryMetadata.

        Only in bundles  # noqa: E501

        :param inventory_items_to_instantiate: The inventory_items_to_instantiate of this InventoryMetadata.  # noqa: E501
        :type inventory_items_to_instantiate: list[str]
        """

        self._inventory_items_to_instantiate = inventory_items_to_instantiate

    @property
    def animated(self):
        """Gets the animated of this InventoryMetadata.  # noqa: E501


        :return: The animated of this InventoryMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._animated

    @animated.setter
    def animated(self, animated):
        """Sets the animated of this InventoryMetadata.


        :param animated: The animated of this InventoryMetadata.  # noqa: E501
        :type animated: bool
        """

        self._animated = animated

    @property
    def animation_style(self):
        """Gets the animation_style of this InventoryMetadata.  # noqa: E501


        :return: The animation_style of this InventoryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._animation_style

    @animation_style.setter
    def animation_style(self, animation_style):
        """Sets the animation_style of this InventoryMetadata.


        :param animation_style: The animation_style of this InventoryMetadata.  # noqa: E501
        :type animation_style: str
        """

        self._animation_style = animation_style

    @property
    def asset_bundle_id(self):
        """Gets the asset_bundle_id of this InventoryMetadata.  # noqa: E501


        :return: The asset_bundle_id of this InventoryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._asset_bundle_id

    @asset_bundle_id.setter
    def asset_bundle_id(self, asset_bundle_id):
        """Sets the asset_bundle_id of this InventoryMetadata.


        :param asset_bundle_id: The asset_bundle_id of this InventoryMetadata.  # noqa: E501
        :type asset_bundle_id: str
        """

        self._asset_bundle_id = asset_bundle_id

    @property
    def file_id(self):
        """Gets the file_id of this InventoryMetadata.  # noqa: E501


        :return: The file_id of this InventoryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this InventoryMetadata.


        :param file_id: The file_id of this InventoryMetadata.  # noqa: E501
        :type file_id: str
        """

        self._file_id = file_id

    @property
    def image_url(self):
        """Gets the image_url of this InventoryMetadata.  # noqa: E501


        :return: The image_url of this InventoryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this InventoryMetadata.


        :param image_url: The image_url of this InventoryMetadata.  # noqa: E501
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def mask_tag(self):
        """Gets the mask_tag of this InventoryMetadata.  # noqa: E501


        :return: The mask_tag of this InventoryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._mask_tag

    @mask_tag.setter
    def mask_tag(self, mask_tag):
        """Sets the mask_tag of this InventoryMetadata.


        :param mask_tag: The mask_tag of this InventoryMetadata.  # noqa: E501
        :type mask_tag: str
        """

        self._mask_tag = mask_tag

    @property
    def prop_id(self):
        """Gets the prop_id of this InventoryMetadata.  # noqa: E501


        :return: The prop_id of this InventoryMetadata.  # noqa: E501
        :rtype: str
        """
        return self._prop_id

    @prop_id.setter
    def prop_id(self, prop_id):
        """Sets the prop_id of this InventoryMetadata.


        :param prop_id: The prop_id of this InventoryMetadata.  # noqa: E501
        :type prop_id: str
        """

        self._prop_id = prop_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InventoryMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InventoryMetadata):
            return True

        return self.to_dict() != other.to_dict()
