# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class TiliaStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'economy_online': 'bool',
        'economy_state': 'int',
        'planned_offline_window_start': 'datetime',
        'planned_offline_window_end': 'datetime'
    }

    attribute_map = {
        'economy_online': 'economyOnline',
        'economy_state': 'economyState',
        'planned_offline_window_start': 'plannedOfflineWindowStart',
        'planned_offline_window_end': 'plannedOfflineWindowEnd'
    }

    def __init__(self, economy_online=None, economy_state=None, planned_offline_window_start=None, planned_offline_window_end=None, local_vars_configuration=None):  # noqa: E501
        """TiliaStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._economy_online = None
        self._economy_state = None
        self._planned_offline_window_start = None
        self._planned_offline_window_end = None
        self.discriminator = None

        self.economy_online = economy_online
        if economy_state is not None:
            self.economy_state = economy_state
        if planned_offline_window_start is not None:
            self.planned_offline_window_start = planned_offline_window_start
        if planned_offline_window_end is not None:
            self.planned_offline_window_end = planned_offline_window_end

    @property
    def economy_online(self):
        """Gets the economy_online of this TiliaStatus.  # noqa: E501


        :return: The economy_online of this TiliaStatus.  # noqa: E501
        :rtype: bool
        """
        return self._economy_online

    @economy_online.setter
    def economy_online(self, economy_online):
        """Sets the economy_online of this TiliaStatus.


        :param economy_online: The economy_online of this TiliaStatus.  # noqa: E501
        :type economy_online: bool
        """
        if self.local_vars_configuration.client_side_validation and economy_online is None:  # noqa: E501
            raise ValueError("Invalid value for `economy_online`, must not be `None`")  # noqa: E501

        self._economy_online = economy_online

    @property
    def economy_state(self):
        """Gets the economy_state of this TiliaStatus.  # noqa: E501


        :return: The economy_state of this TiliaStatus.  # noqa: E501
        :rtype: int
        """
        return self._economy_state

    @economy_state.setter
    def economy_state(self, economy_state):
        """Sets the economy_state of this TiliaStatus.


        :param economy_state: The economy_state of this TiliaStatus.  # noqa: E501
        :type economy_state: int
        """

        self._economy_state = economy_state

    @property
    def planned_offline_window_start(self):
        """Gets the planned_offline_window_start of this TiliaStatus.  # noqa: E501


        :return: The planned_offline_window_start of this TiliaStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._planned_offline_window_start

    @planned_offline_window_start.setter
    def planned_offline_window_start(self, planned_offline_window_start):
        """Sets the planned_offline_window_start of this TiliaStatus.


        :param planned_offline_window_start: The planned_offline_window_start of this TiliaStatus.  # noqa: E501
        :type planned_offline_window_start: datetime
        """

        self._planned_offline_window_start = planned_offline_window_start

    @property
    def planned_offline_window_end(self):
        """Gets the planned_offline_window_end of this TiliaStatus.  # noqa: E501


        :return: The planned_offline_window_end of this TiliaStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._planned_offline_window_end

    @planned_offline_window_end.setter
    def planned_offline_window_end(self, planned_offline_window_end):
        """Sets the planned_offline_window_end of this TiliaStatus.


        :param planned_offline_window_end: The planned_offline_window_end of this TiliaStatus.  # noqa: E501
        :type planned_offline_window_end: datetime
        """

        self._planned_offline_window_end = planned_offline_window_end

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TiliaStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TiliaStatus):
            return True

        return self.to_dict() != other.to_dict()
