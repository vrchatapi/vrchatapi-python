# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class RegisterUserAccountRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'username': 'str',
        'password': 'str',
        'email': 'str',
        'year': 'str',
        'month': 'str',
        'day': 'str',
        'captcha_code': 'str',
        'subscribe': 'bool',
        'accepted_tos_version': 'int'
    }

    attribute_map = {
        'username': 'username',
        'password': 'password',
        'email': 'email',
        'year': 'year',
        'month': 'month',
        'day': 'day',
        'captcha_code': 'captchaCode',
        'subscribe': 'subscribe',
        'accepted_tos_version': 'acceptedTOSVersion'
    }

    def __init__(self, username=None, password=None, email=None, year=None, month=None, day=None, captcha_code=None, subscribe=None, accepted_tos_version=None, local_vars_configuration=None):  # noqa: E501
        """RegisterUserAccountRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._username = None
        self._password = None
        self._email = None
        self._year = None
        self._month = None
        self._day = None
        self._captcha_code = None
        self._subscribe = None
        self._accepted_tos_version = None
        self.discriminator = None

        self.username = username
        self.password = password
        self.email = email
        self.year = year
        self.month = month
        self.day = day
        self.captcha_code = captcha_code
        self.subscribe = subscribe
        self.accepted_tos_version = accepted_tos_version

    @property
    def username(self):
        """Gets the username of this RegisterUserAccountRequest.  # noqa: E501

        Display Name / Username (Username is a sanitized version)  # noqa: E501

        :return: The username of this RegisterUserAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this RegisterUserAccountRequest.

        Display Name / Username (Username is a sanitized version)  # noqa: E501

        :param username: The username of this RegisterUserAccountRequest.  # noqa: E501
        :type username: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                username is not None and len(username) > 15):
            raise ValueError("Invalid value for `username`, length must be less than or equal to `15`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                username is not None and len(username) < 4):
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `4`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this RegisterUserAccountRequest.  # noqa: E501

        Password  # noqa: E501

        :return: The password of this RegisterUserAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this RegisterUserAccountRequest.

        Password  # noqa: E501

        :param password: The password of this RegisterUserAccountRequest.  # noqa: E501
        :type password: str
        """
        if self.local_vars_configuration.client_side_validation and password is None:  # noqa: E501
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                password is not None and len(password) < 8):
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `8`")  # noqa: E501

        self._password = password

    @property
    def email(self):
        """Gets the email of this RegisterUserAccountRequest.  # noqa: E501

        Email address  # noqa: E501

        :return: The email of this RegisterUserAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this RegisterUserAccountRequest.

        Email address  # noqa: E501

        :param email: The email of this RegisterUserAccountRequest.  # noqa: E501
        :type email: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def year(self):
        """Gets the year of this RegisterUserAccountRequest.  # noqa: E501

        Birth year  # noqa: E501

        :return: The year of this RegisterUserAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this RegisterUserAccountRequest.

        Birth year  # noqa: E501

        :param year: The year of this RegisterUserAccountRequest.  # noqa: E501
        :type year: str
        """
        if self.local_vars_configuration.client_side_validation and year is None:  # noqa: E501
            raise ValueError("Invalid value for `year`, must not be `None`")  # noqa: E501

        self._year = year

    @property
    def month(self):
        """Gets the month of this RegisterUserAccountRequest.  # noqa: E501

        Birth month of year  # noqa: E501

        :return: The month of this RegisterUserAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this RegisterUserAccountRequest.

        Birth month of year  # noqa: E501

        :param month: The month of this RegisterUserAccountRequest.  # noqa: E501
        :type month: str
        """
        if self.local_vars_configuration.client_side_validation and month is None:  # noqa: E501
            raise ValueError("Invalid value for `month`, must not be `None`")  # noqa: E501

        self._month = month

    @property
    def day(self):
        """Gets the day of this RegisterUserAccountRequest.  # noqa: E501

        Birth day of month  # noqa: E501

        :return: The day of this RegisterUserAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this RegisterUserAccountRequest.

        Birth day of month  # noqa: E501

        :param day: The day of this RegisterUserAccountRequest.  # noqa: E501
        :type day: str
        """
        if self.local_vars_configuration.client_side_validation and day is None:  # noqa: E501
            raise ValueError("Invalid value for `day`, must not be `None`")  # noqa: E501

        self._day = day

    @property
    def captcha_code(self):
        """Gets the captcha_code of this RegisterUserAccountRequest.  # noqa: E501

        Captcha code  # noqa: E501

        :return: The captcha_code of this RegisterUserAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._captcha_code

    @captcha_code.setter
    def captcha_code(self, captcha_code):
        """Sets the captcha_code of this RegisterUserAccountRequest.

        Captcha code  # noqa: E501

        :param captcha_code: The captcha_code of this RegisterUserAccountRequest.  # noqa: E501
        :type captcha_code: str
        """
        if self.local_vars_configuration.client_side_validation and captcha_code is None:  # noqa: E501
            raise ValueError("Invalid value for `captcha_code`, must not be `None`")  # noqa: E501

        self._captcha_code = captcha_code

    @property
    def subscribe(self):
        """Gets the subscribe of this RegisterUserAccountRequest.  # noqa: E501

        Whether to recieve promotional emails  # noqa: E501

        :return: The subscribe of this RegisterUserAccountRequest.  # noqa: E501
        :rtype: bool
        """
        return self._subscribe

    @subscribe.setter
    def subscribe(self, subscribe):
        """Sets the subscribe of this RegisterUserAccountRequest.

        Whether to recieve promotional emails  # noqa: E501

        :param subscribe: The subscribe of this RegisterUserAccountRequest.  # noqa: E501
        :type subscribe: bool
        """
        if self.local_vars_configuration.client_side_validation and subscribe is None:  # noqa: E501
            raise ValueError("Invalid value for `subscribe`, must not be `None`")  # noqa: E501

        self._subscribe = subscribe

    @property
    def accepted_tos_version(self):
        """Gets the accepted_tos_version of this RegisterUserAccountRequest.  # noqa: E501

        The most recent version of the TOS  # noqa: E501

        :return: The accepted_tos_version of this RegisterUserAccountRequest.  # noqa: E501
        :rtype: int
        """
        return self._accepted_tos_version

    @accepted_tos_version.setter
    def accepted_tos_version(self, accepted_tos_version):
        """Sets the accepted_tos_version of this RegisterUserAccountRequest.

        The most recent version of the TOS  # noqa: E501

        :param accepted_tos_version: The accepted_tos_version of this RegisterUserAccountRequest.  # noqa: E501
        :type accepted_tos_version: int
        """
        if self.local_vars_configuration.client_side_validation and accepted_tos_version is None:  # noqa: E501
            raise ValueError("Invalid value for `accepted_tos_version`, must not be `None`")  # noqa: E501

        self._accepted_tos_version = accepted_tos_version

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegisterUserAccountRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RegisterUserAccountRequest):
            return True

        return self.to_dict() != other.to_dict()
