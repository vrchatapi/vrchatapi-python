# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class Balance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'balance': 'int',
        'no_transactions': 'bool',
        'tilia_response': 'bool'
    }

    attribute_map = {
        'balance': 'balance',
        'no_transactions': 'noTransactions',
        'tilia_response': 'tiliaResponse'
    }

    def __init__(self, balance=0, no_transactions=None, tilia_response=None, local_vars_configuration=None):  # noqa: E501
        """Balance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._balance = None
        self._no_transactions = None
        self._tilia_response = None
        self.discriminator = None

        self.balance = balance
        if no_transactions is not None:
            self.no_transactions = no_transactions
        if tilia_response is not None:
            self.tilia_response = tilia_response

    @property
    def balance(self):
        """Gets the balance of this Balance.  # noqa: E501


        :return: The balance of this Balance.  # noqa: E501
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Balance.


        :param balance: The balance of this Balance.  # noqa: E501
        :type balance: int
        """
        if self.local_vars_configuration.client_side_validation and balance is None:  # noqa: E501
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    @property
    def no_transactions(self):
        """Gets the no_transactions of this Balance.  # noqa: E501


        :return: The no_transactions of this Balance.  # noqa: E501
        :rtype: bool
        """
        return self._no_transactions

    @no_transactions.setter
    def no_transactions(self, no_transactions):
        """Sets the no_transactions of this Balance.


        :param no_transactions: The no_transactions of this Balance.  # noqa: E501
        :type no_transactions: bool
        """

        self._no_transactions = no_transactions

    @property
    def tilia_response(self):
        """Gets the tilia_response of this Balance.  # noqa: E501


        :return: The tilia_response of this Balance.  # noqa: E501
        :rtype: bool
        """
        return self._tilia_response

    @tilia_response.setter
    def tilia_response(self, tilia_response):
        """Sets the tilia_response of this Balance.


        :param tilia_response: The tilia_response of this Balance.  # noqa: E501
        :type tilia_response: bool
        """

        self._tilia_response = tilia_response

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Balance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Balance):
            return True

        return self.to_dict() != other.to_dict()
