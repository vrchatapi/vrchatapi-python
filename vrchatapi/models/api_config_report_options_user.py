# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class APIConfigReportOptionsUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'behavior': 'list[str]',
        'chat': 'list[str]',
        'emoji': 'list[str]',
        'image': 'list[str]',
        'sticker': 'list[str]',
        'text': 'list[str]'
    }

    attribute_map = {
        'behavior': 'behavior',
        'chat': 'chat',
        'emoji': 'emoji',
        'image': 'image',
        'sticker': 'sticker',
        'text': 'text'
    }

    def __init__(self, behavior=None, chat=None, emoji=None, image=None, sticker=None, text=None, local_vars_configuration=None):  # noqa: E501
        """APIConfigReportOptionsUser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._behavior = None
        self._chat = None
        self._emoji = None
        self._image = None
        self._sticker = None
        self._text = None
        self.discriminator = None

        if behavior is not None:
            self.behavior = behavior
        if chat is not None:
            self.chat = chat
        if emoji is not None:
            self.emoji = emoji
        if image is not None:
            self.image = image
        if sticker is not None:
            self.sticker = sticker
        if text is not None:
            self.text = text

    @property
    def behavior(self):
        """Gets the behavior of this APIConfigReportOptionsUser.  # noqa: E501


        :return: The behavior of this APIConfigReportOptionsUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._behavior

    @behavior.setter
    def behavior(self, behavior):
        """Sets the behavior of this APIConfigReportOptionsUser.


        :param behavior: The behavior of this APIConfigReportOptionsUser.  # noqa: E501
        :type behavior: list[str]
        """

        self._behavior = behavior

    @property
    def chat(self):
        """Gets the chat of this APIConfigReportOptionsUser.  # noqa: E501


        :return: The chat of this APIConfigReportOptionsUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._chat

    @chat.setter
    def chat(self, chat):
        """Sets the chat of this APIConfigReportOptionsUser.


        :param chat: The chat of this APIConfigReportOptionsUser.  # noqa: E501
        :type chat: list[str]
        """

        self._chat = chat

    @property
    def emoji(self):
        """Gets the emoji of this APIConfigReportOptionsUser.  # noqa: E501


        :return: The emoji of this APIConfigReportOptionsUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._emoji

    @emoji.setter
    def emoji(self, emoji):
        """Sets the emoji of this APIConfigReportOptionsUser.


        :param emoji: The emoji of this APIConfigReportOptionsUser.  # noqa: E501
        :type emoji: list[str]
        """

        self._emoji = emoji

    @property
    def image(self):
        """Gets the image of this APIConfigReportOptionsUser.  # noqa: E501


        :return: The image of this APIConfigReportOptionsUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this APIConfigReportOptionsUser.


        :param image: The image of this APIConfigReportOptionsUser.  # noqa: E501
        :type image: list[str]
        """

        self._image = image

    @property
    def sticker(self):
        """Gets the sticker of this APIConfigReportOptionsUser.  # noqa: E501


        :return: The sticker of this APIConfigReportOptionsUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._sticker

    @sticker.setter
    def sticker(self, sticker):
        """Sets the sticker of this APIConfigReportOptionsUser.


        :param sticker: The sticker of this APIConfigReportOptionsUser.  # noqa: E501
        :type sticker: list[str]
        """

        self._sticker = sticker

    @property
    def text(self):
        """Gets the text of this APIConfigReportOptionsUser.  # noqa: E501


        :return: The text of this APIConfigReportOptionsUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this APIConfigReportOptionsUser.


        :param text: The text of this APIConfigReportOptionsUser.  # noqa: E501
        :type text: list[str]
        """

        self._text = text

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIConfigReportOptionsUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, APIConfigReportOptionsUser):
            return True

        return self.to_dict() != other.to_dict()
