# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class CreateAvatarRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'asset_url': 'str',
        'asset_version': 'str',
        'platform': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'tags': 'list[str]',
        'image_url': 'str',
        'thumbnail_image_url': 'str',
        'release_status': 'ReleaseStatus',
        'version': 'int',
        'unity_package_url': 'str',
        'unity_version': 'str'
    }

    attribute_map = {
        'asset_url': 'assetUrl',
        'asset_version': 'assetVersion',
        'platform': 'platform',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'tags': 'tags',
        'image_url': 'imageUrl',
        'thumbnail_image_url': 'thumbnailImageUrl',
        'release_status': 'releaseStatus',
        'version': 'version',
        'unity_package_url': 'unityPackageUrl',
        'unity_version': 'unityVersion'
    }

    def __init__(self, asset_url=None, asset_version=None, platform=None, created_at=None, updated_at=None, id=None, name=None, description=None, tags=None, image_url=None, thumbnail_image_url=None, release_status=None, version=1, unity_package_url=None, unity_version='5.3.4p1', local_vars_configuration=None):  # noqa: E501
        """CreateAvatarRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._asset_url = None
        self._asset_version = None
        self._platform = None
        self._created_at = None
        self._updated_at = None
        self._id = None
        self._name = None
        self._description = None
        self._tags = None
        self._image_url = None
        self._thumbnail_image_url = None
        self._release_status = None
        self._version = None
        self._unity_package_url = None
        self._unity_version = None
        self.discriminator = None

        if asset_url is not None:
            self.asset_url = asset_url
        if asset_version is not None:
            self.asset_version = asset_version
        if platform is not None:
            self.platform = platform
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if id is not None:
            self.id = id
        self.name = name
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        self.image_url = image_url
        if thumbnail_image_url is not None:
            self.thumbnail_image_url = thumbnail_image_url
        if release_status is not None:
            self.release_status = release_status
        if version is not None:
            self.version = version
        if unity_package_url is not None:
            self.unity_package_url = unity_package_url
        if unity_version is not None:
            self.unity_version = unity_version

    @property
    def asset_url(self):
        """Gets the asset_url of this CreateAvatarRequest.  # noqa: E501


        :return: The asset_url of this CreateAvatarRequest.  # noqa: E501
        :rtype: str
        """
        return self._asset_url

    @asset_url.setter
    def asset_url(self, asset_url):
        """Sets the asset_url of this CreateAvatarRequest.


        :param asset_url: The asset_url of this CreateAvatarRequest.  # noqa: E501
        :type asset_url: str
        """

        self._asset_url = asset_url

    @property
    def asset_version(self):
        """Gets the asset_version of this CreateAvatarRequest.  # noqa: E501


        :return: The asset_version of this CreateAvatarRequest.  # noqa: E501
        :rtype: str
        """
        return self._asset_version

    @asset_version.setter
    def asset_version(self, asset_version):
        """Sets the asset_version of this CreateAvatarRequest.


        :param asset_version: The asset_version of this CreateAvatarRequest.  # noqa: E501
        :type asset_version: str
        """

        self._asset_version = asset_version

    @property
    def platform(self):
        """Gets the platform of this CreateAvatarRequest.  # noqa: E501

        This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`.  # noqa: E501

        :return: The platform of this CreateAvatarRequest.  # noqa: E501
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this CreateAvatarRequest.

        This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`.  # noqa: E501

        :param platform: The platform of this CreateAvatarRequest.  # noqa: E501
        :type platform: str
        """

        self._platform = platform

    @property
    def created_at(self):
        """Gets the created_at of this CreateAvatarRequest.  # noqa: E501

        A date and time of the pattern `M/d/yyyy h:mm:ss tt` (see C Sharp `System.DateTime`)  # noqa: E501

        :return: The created_at of this CreateAvatarRequest.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CreateAvatarRequest.

        A date and time of the pattern `M/d/yyyy h:mm:ss tt` (see C Sharp `System.DateTime`)  # noqa: E501

        :param created_at: The created_at of this CreateAvatarRequest.  # noqa: E501
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this CreateAvatarRequest.  # noqa: E501

        A date and time of the pattern `M/d/yyyy h:mm:ss tt` (see C Sharp `System.DateTime`)  # noqa: E501

        :return: The updated_at of this CreateAvatarRequest.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CreateAvatarRequest.

        A date and time of the pattern `M/d/yyyy h:mm:ss tt` (see C Sharp `System.DateTime`)  # noqa: E501

        :param updated_at: The updated_at of this CreateAvatarRequest.  # noqa: E501
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this CreateAvatarRequest.  # noqa: E501


        :return: The id of this CreateAvatarRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateAvatarRequest.


        :param id: The id of this CreateAvatarRequest.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CreateAvatarRequest.  # noqa: E501


        :return: The name of this CreateAvatarRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAvatarRequest.


        :param name: The name of this CreateAvatarRequest.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateAvatarRequest.  # noqa: E501


        :return: The description of this CreateAvatarRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateAvatarRequest.


        :param description: The description of this CreateAvatarRequest.  # noqa: E501
        :type description: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) < 1):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this CreateAvatarRequest.  # noqa: E501

           # noqa: E501

        :return: The tags of this CreateAvatarRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAvatarRequest.

           # noqa: E501

        :param tags: The tags of this CreateAvatarRequest.  # noqa: E501
        :type tags: list[str]
        """

        self._tags = tags

    @property
    def image_url(self):
        """Gets the image_url of this CreateAvatarRequest.  # noqa: E501


        :return: The image_url of this CreateAvatarRequest.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this CreateAvatarRequest.


        :param image_url: The image_url of this CreateAvatarRequest.  # noqa: E501
        :type image_url: str
        """
        if self.local_vars_configuration.client_side_validation and image_url is None:  # noqa: E501
            raise ValueError("Invalid value for `image_url`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                image_url is not None and len(image_url) < 1):
            raise ValueError("Invalid value for `image_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._image_url = image_url

    @property
    def thumbnail_image_url(self):
        """Gets the thumbnail_image_url of this CreateAvatarRequest.  # noqa: E501


        :return: The thumbnail_image_url of this CreateAvatarRequest.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_image_url

    @thumbnail_image_url.setter
    def thumbnail_image_url(self, thumbnail_image_url):
        """Sets the thumbnail_image_url of this CreateAvatarRequest.


        :param thumbnail_image_url: The thumbnail_image_url of this CreateAvatarRequest.  # noqa: E501
        :type thumbnail_image_url: str
        """
        if (self.local_vars_configuration.client_side_validation and
                thumbnail_image_url is not None and len(thumbnail_image_url) < 1):
            raise ValueError("Invalid value for `thumbnail_image_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._thumbnail_image_url = thumbnail_image_url

    @property
    def release_status(self):
        """Gets the release_status of this CreateAvatarRequest.  # noqa: E501


        :return: The release_status of this CreateAvatarRequest.  # noqa: E501
        :rtype: ReleaseStatus
        """
        return self._release_status

    @release_status.setter
    def release_status(self, release_status):
        """Sets the release_status of this CreateAvatarRequest.


        :param release_status: The release_status of this CreateAvatarRequest.  # noqa: E501
        :type release_status: ReleaseStatus
        """

        self._release_status = release_status

    @property
    def version(self):
        """Gets the version of this CreateAvatarRequest.  # noqa: E501


        :return: The version of this CreateAvatarRequest.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CreateAvatarRequest.


        :param version: The version of this CreateAvatarRequest.  # noqa: E501
        :type version: int
        """
        if (self.local_vars_configuration.client_side_validation and
                version is not None and version < 0):  # noqa: E501
            raise ValueError("Invalid value for `version`, must be a value greater than or equal to `0`")  # noqa: E501

        self._version = version

    @property
    def unity_package_url(self):
        """Gets the unity_package_url of this CreateAvatarRequest.  # noqa: E501


        :return: The unity_package_url of this CreateAvatarRequest.  # noqa: E501
        :rtype: str
        """
        return self._unity_package_url

    @unity_package_url.setter
    def unity_package_url(self, unity_package_url):
        """Sets the unity_package_url of this CreateAvatarRequest.


        :param unity_package_url: The unity_package_url of this CreateAvatarRequest.  # noqa: E501
        :type unity_package_url: str
        """

        self._unity_package_url = unity_package_url

    @property
    def unity_version(self):
        """Gets the unity_version of this CreateAvatarRequest.  # noqa: E501


        :return: The unity_version of this CreateAvatarRequest.  # noqa: E501
        :rtype: str
        """
        return self._unity_version

    @unity_version.setter
    def unity_version(self, unity_version):
        """Sets the unity_version of this CreateAvatarRequest.


        :param unity_version: The unity_version of this CreateAvatarRequest.  # noqa: E501
        :type unity_version: str
        """
        if (self.local_vars_configuration.client_side_validation and
                unity_version is not None and len(unity_version) < 1):
            raise ValueError("Invalid value for `unity_version`, length must be greater than or equal to `1`")  # noqa: E501

        self._unity_version = unity_version

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAvatarRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateAvatarRequest):
            return True

        return self.to_dict() != other.to_dict()
