# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class ServiceStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_at': 'datetime',
        'id': 'str',
        'progress': 'list[object]',
        'requester_user_id': 'str',
        'state': 'str',
        'subject_id': 'str',
        'subject_type': 'str',
        'type': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'created_at': 'created_at',
        'id': 'id',
        'progress': 'progress',
        'requester_user_id': 'requesterUserId',
        'state': 'state',
        'subject_id': 'subjectId',
        'subject_type': 'subjectType',
        'type': 'type',
        'updated_at': 'updated_at'
    }

    def __init__(self, created_at=None, id=None, progress=None, requester_user_id=None, state=None, subject_id=None, subject_type=None, type=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """ServiceStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_at = None
        self._id = None
        self._progress = None
        self._requester_user_id = None
        self._state = None
        self._subject_id = None
        self._subject_type = None
        self._type = None
        self._updated_at = None
        self.discriminator = None

        self.created_at = created_at
        self.id = id
        self.progress = progress
        self.requester_user_id = requester_user_id
        self.state = state
        self.subject_id = subject_id
        self.subject_type = subject_type
        self.type = type
        self.updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this ServiceStatus.  # noqa: E501


        :return: The created_at of this ServiceStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ServiceStatus.


        :param created_at: The created_at of this ServiceStatus.  # noqa: E501
        :type created_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this ServiceStatus.  # noqa: E501

        The id of this service, NOT the id of the thing this service was requested for.  # noqa: E501

        :return: The id of this ServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceStatus.

        The id of this service, NOT the id of the thing this service was requested for.  # noqa: E501

        :param id: The id of this ServiceStatus.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def progress(self):
        """Gets the progress of this ServiceStatus.  # noqa: E501


        :return: The progress of this ServiceStatus.  # noqa: E501
        :rtype: list[object]
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this ServiceStatus.


        :param progress: The progress of this ServiceStatus.  # noqa: E501
        :type progress: list[object]
        """
        if self.local_vars_configuration.client_side_validation and progress is None:  # noqa: E501
            raise ValueError("Invalid value for `progress`, must not be `None`")  # noqa: E501

        self._progress = progress

    @property
    def requester_user_id(self):
        """Gets the requester_user_id of this ServiceStatus.  # noqa: E501

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :return: The requester_user_id of this ServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._requester_user_id

    @requester_user_id.setter
    def requester_user_id(self, requester_user_id):
        """Sets the requester_user_id of this ServiceStatus.

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :param requester_user_id: The requester_user_id of this ServiceStatus.  # noqa: E501
        :type requester_user_id: str
        """
        if self.local_vars_configuration.client_side_validation and requester_user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `requester_user_id`, must not be `None`")  # noqa: E501

        self._requester_user_id = requester_user_id

    @property
    def state(self):
        """Gets the state of this ServiceStatus.  # noqa: E501


        :return: The state of this ServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ServiceStatus.


        :param state: The state of this ServiceStatus.  # noqa: E501
        :type state: str
        """
        if self.local_vars_configuration.client_side_validation and state is None:  # noqa: E501
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def subject_id(self):
        """Gets the subject_id of this ServiceStatus.  # noqa: E501

        The id of the thing this service was requested for.  # noqa: E501

        :return: The subject_id of this ServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """Sets the subject_id of this ServiceStatus.

        The id of the thing this service was requested for.  # noqa: E501

        :param subject_id: The subject_id of this ServiceStatus.  # noqa: E501
        :type subject_id: str
        """
        if self.local_vars_configuration.client_side_validation and subject_id is None:  # noqa: E501
            raise ValueError("Invalid value for `subject_id`, must not be `None`")  # noqa: E501

        self._subject_id = subject_id

    @property
    def subject_type(self):
        """Gets the subject_type of this ServiceStatus.  # noqa: E501

        The kind of the thing this service was requested for.  # noqa: E501

        :return: The subject_type of this ServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._subject_type

    @subject_type.setter
    def subject_type(self, subject_type):
        """Sets the subject_type of this ServiceStatus.

        The kind of the thing this service was requested for.  # noqa: E501

        :param subject_type: The subject_type of this ServiceStatus.  # noqa: E501
        :type subject_type: str
        """
        if self.local_vars_configuration.client_side_validation and subject_type is None:  # noqa: E501
            raise ValueError("Invalid value for `subject_type`, must not be `None`")  # noqa: E501

        self._subject_type = subject_type

    @property
    def type(self):
        """Gets the type of this ServiceStatus.  # noqa: E501

        The kind of service that was requested.  # noqa: E501

        :return: The type of this ServiceStatus.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServiceStatus.

        The kind of service that was requested.  # noqa: E501

        :param type: The type of this ServiceStatus.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this ServiceStatus.  # noqa: E501


        :return: The updated_at of this ServiceStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ServiceStatus.


        :param updated_at: The updated_at of this ServiceStatus.  # noqa: E501
        :type updated_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServiceStatus):
            return True

        return self.to_dict() != other.to_dict()
