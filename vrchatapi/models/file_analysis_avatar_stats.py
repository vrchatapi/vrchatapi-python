# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class FileAnalysisAvatarStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'animator_count': 'int',
        'audio_source_count': 'int',
        'blend_shape_count': 'int',
        'bone_count': 'int',
        'bounds': 'list[float]',
        'camera_count': 'int',
        'cloth_count': 'int',
        'constraint_count': 'int',
        'constraint_depth': 'int',
        'contact_count': 'int',
        'custom_expressions': 'bool',
        'customize_animation_layers': 'bool',
        'enable_eye_look': 'bool',
        'light_count': 'int',
        'line_renderer_count': 'int',
        'lip_sync': 'int',
        'material_count': 'int',
        'material_slots_used': 'int',
        'mesh_count': 'int',
        'mesh_indices': 'int',
        'mesh_particle_max_polygons': 'int',
        'mesh_polygons': 'int',
        'mesh_vertices': 'int',
        'particle_collision_enabled': 'bool',
        'particle_system_count': 'int',
        'particle_trails_enabled': 'bool',
        'phys_bone_collider_count': 'int',
        'phys_bone_collision_check_count': 'int',
        'phys_bone_component_count': 'int',
        'phys_bone_transform_count': 'int',
        'physics_colliders': 'int',
        'physics_rigidbodies': 'int',
        'skinned_mesh_count': 'int',
        'skinned_mesh_indices': 'int',
        'skinned_mesh_polygons': 'int',
        'skinned_mesh_vertices': 'int',
        'total_cloth_vertices': 'int',
        'total_indices': 'int',
        'total_max_particles': 'int',
        'total_polygons': 'int',
        'total_texture_usage': 'int',
        'total_vertices': 'int',
        'trail_renderer_count': 'int',
        'write_defaults_used': 'bool'
    }

    attribute_map = {
        'animator_count': 'animatorCount',
        'audio_source_count': 'audioSourceCount',
        'blend_shape_count': 'blendShapeCount',
        'bone_count': 'boneCount',
        'bounds': 'bounds',
        'camera_count': 'cameraCount',
        'cloth_count': 'clothCount',
        'constraint_count': 'constraintCount',
        'constraint_depth': 'constraintDepth',
        'contact_count': 'contactCount',
        'custom_expressions': 'customExpressions',
        'customize_animation_layers': 'customizeAnimationLayers',
        'enable_eye_look': 'enableEyeLook',
        'light_count': 'lightCount',
        'line_renderer_count': 'lineRendererCount',
        'lip_sync': 'lipSync',
        'material_count': 'materialCount',
        'material_slots_used': 'materialSlotsUsed',
        'mesh_count': 'meshCount',
        'mesh_indices': 'meshIndices',
        'mesh_particle_max_polygons': 'meshParticleMaxPolygons',
        'mesh_polygons': 'meshPolygons',
        'mesh_vertices': 'meshVertices',
        'particle_collision_enabled': 'particleCollisionEnabled',
        'particle_system_count': 'particleSystemCount',
        'particle_trails_enabled': 'particleTrailsEnabled',
        'phys_bone_collider_count': 'physBoneColliderCount',
        'phys_bone_collision_check_count': 'physBoneCollisionCheckCount',
        'phys_bone_component_count': 'physBoneComponentCount',
        'phys_bone_transform_count': 'physBoneTransformCount',
        'physics_colliders': 'physicsColliders',
        'physics_rigidbodies': 'physicsRigidbodies',
        'skinned_mesh_count': 'skinnedMeshCount',
        'skinned_mesh_indices': 'skinnedMeshIndices',
        'skinned_mesh_polygons': 'skinnedMeshPolygons',
        'skinned_mesh_vertices': 'skinnedMeshVertices',
        'total_cloth_vertices': 'totalClothVertices',
        'total_indices': 'totalIndices',
        'total_max_particles': 'totalMaxParticles',
        'total_polygons': 'totalPolygons',
        'total_texture_usage': 'totalTextureUsage',
        'total_vertices': 'totalVertices',
        'trail_renderer_count': 'trailRendererCount',
        'write_defaults_used': 'writeDefaultsUsed'
    }

    def __init__(self, animator_count=None, audio_source_count=None, blend_shape_count=None, bone_count=None, bounds=None, camera_count=None, cloth_count=None, constraint_count=None, constraint_depth=None, contact_count=None, custom_expressions=None, customize_animation_layers=None, enable_eye_look=None, light_count=None, line_renderer_count=None, lip_sync=None, material_count=None, material_slots_used=None, mesh_count=None, mesh_indices=None, mesh_particle_max_polygons=None, mesh_polygons=None, mesh_vertices=None, particle_collision_enabled=None, particle_system_count=None, particle_trails_enabled=None, phys_bone_collider_count=None, phys_bone_collision_check_count=None, phys_bone_component_count=None, phys_bone_transform_count=None, physics_colliders=None, physics_rigidbodies=None, skinned_mesh_count=None, skinned_mesh_indices=None, skinned_mesh_polygons=None, skinned_mesh_vertices=None, total_cloth_vertices=None, total_indices=None, total_max_particles=None, total_polygons=None, total_texture_usage=None, total_vertices=None, trail_renderer_count=None, write_defaults_used=None, local_vars_configuration=None):  # noqa: E501
        """FileAnalysisAvatarStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._animator_count = None
        self._audio_source_count = None
        self._blend_shape_count = None
        self._bone_count = None
        self._bounds = None
        self._camera_count = None
        self._cloth_count = None
        self._constraint_count = None
        self._constraint_depth = None
        self._contact_count = None
        self._custom_expressions = None
        self._customize_animation_layers = None
        self._enable_eye_look = None
        self._light_count = None
        self._line_renderer_count = None
        self._lip_sync = None
        self._material_count = None
        self._material_slots_used = None
        self._mesh_count = None
        self._mesh_indices = None
        self._mesh_particle_max_polygons = None
        self._mesh_polygons = None
        self._mesh_vertices = None
        self._particle_collision_enabled = None
        self._particle_system_count = None
        self._particle_trails_enabled = None
        self._phys_bone_collider_count = None
        self._phys_bone_collision_check_count = None
        self._phys_bone_component_count = None
        self._phys_bone_transform_count = None
        self._physics_colliders = None
        self._physics_rigidbodies = None
        self._skinned_mesh_count = None
        self._skinned_mesh_indices = None
        self._skinned_mesh_polygons = None
        self._skinned_mesh_vertices = None
        self._total_cloth_vertices = None
        self._total_indices = None
        self._total_max_particles = None
        self._total_polygons = None
        self._total_texture_usage = None
        self._total_vertices = None
        self._trail_renderer_count = None
        self._write_defaults_used = None
        self.discriminator = None

        self.animator_count = animator_count
        self.audio_source_count = audio_source_count
        self.blend_shape_count = blend_shape_count
        self.bone_count = bone_count
        self.bounds = bounds
        if camera_count is not None:
            self.camera_count = camera_count
        self.cloth_count = cloth_count
        self.constraint_count = constraint_count
        self.constraint_depth = constraint_depth
        self.contact_count = contact_count
        self.custom_expressions = custom_expressions
        self.customize_animation_layers = customize_animation_layers
        self.enable_eye_look = enable_eye_look
        self.light_count = light_count
        self.line_renderer_count = line_renderer_count
        self.lip_sync = lip_sync
        self.material_count = material_count
        self.material_slots_used = material_slots_used
        self.mesh_count = mesh_count
        self.mesh_indices = mesh_indices
        self.mesh_particle_max_polygons = mesh_particle_max_polygons
        self.mesh_polygons = mesh_polygons
        self.mesh_vertices = mesh_vertices
        self.particle_collision_enabled = particle_collision_enabled
        self.particle_system_count = particle_system_count
        self.particle_trails_enabled = particle_trails_enabled
        self.phys_bone_collider_count = phys_bone_collider_count
        self.phys_bone_collision_check_count = phys_bone_collision_check_count
        self.phys_bone_component_count = phys_bone_component_count
        self.phys_bone_transform_count = phys_bone_transform_count
        self.physics_colliders = physics_colliders
        self.physics_rigidbodies = physics_rigidbodies
        self.skinned_mesh_count = skinned_mesh_count
        self.skinned_mesh_indices = skinned_mesh_indices
        self.skinned_mesh_polygons = skinned_mesh_polygons
        self.skinned_mesh_vertices = skinned_mesh_vertices
        self.total_cloth_vertices = total_cloth_vertices
        self.total_indices = total_indices
        self.total_max_particles = total_max_particles
        self.total_polygons = total_polygons
        self.total_texture_usage = total_texture_usage
        self.total_vertices = total_vertices
        self.trail_renderer_count = trail_renderer_count
        self.write_defaults_used = write_defaults_used

    @property
    def animator_count(self):
        """Gets the animator_count of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The animator_count of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._animator_count

    @animator_count.setter
    def animator_count(self, animator_count):
        """Sets the animator_count of this FileAnalysisAvatarStats.


        :param animator_count: The animator_count of this FileAnalysisAvatarStats.  # noqa: E501
        :type animator_count: int
        """
        if self.local_vars_configuration.client_side_validation and animator_count is None:  # noqa: E501
            raise ValueError("Invalid value for `animator_count`, must not be `None`")  # noqa: E501

        self._animator_count = animator_count

    @property
    def audio_source_count(self):
        """Gets the audio_source_count of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The audio_source_count of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._audio_source_count

    @audio_source_count.setter
    def audio_source_count(self, audio_source_count):
        """Sets the audio_source_count of this FileAnalysisAvatarStats.


        :param audio_source_count: The audio_source_count of this FileAnalysisAvatarStats.  # noqa: E501
        :type audio_source_count: int
        """
        if self.local_vars_configuration.client_side_validation and audio_source_count is None:  # noqa: E501
            raise ValueError("Invalid value for `audio_source_count`, must not be `None`")  # noqa: E501

        self._audio_source_count = audio_source_count

    @property
    def blend_shape_count(self):
        """Gets the blend_shape_count of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The blend_shape_count of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._blend_shape_count

    @blend_shape_count.setter
    def blend_shape_count(self, blend_shape_count):
        """Sets the blend_shape_count of this FileAnalysisAvatarStats.


        :param blend_shape_count: The blend_shape_count of this FileAnalysisAvatarStats.  # noqa: E501
        :type blend_shape_count: int
        """
        if self.local_vars_configuration.client_side_validation and blend_shape_count is None:  # noqa: E501
            raise ValueError("Invalid value for `blend_shape_count`, must not be `None`")  # noqa: E501

        self._blend_shape_count = blend_shape_count

    @property
    def bone_count(self):
        """Gets the bone_count of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The bone_count of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._bone_count

    @bone_count.setter
    def bone_count(self, bone_count):
        """Sets the bone_count of this FileAnalysisAvatarStats.


        :param bone_count: The bone_count of this FileAnalysisAvatarStats.  # noqa: E501
        :type bone_count: int
        """
        if self.local_vars_configuration.client_side_validation and bone_count is None:  # noqa: E501
            raise ValueError("Invalid value for `bone_count`, must not be `None`")  # noqa: E501

        self._bone_count = bone_count

    @property
    def bounds(self):
        """Gets the bounds of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The bounds of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: list[float]
        """
        return self._bounds

    @bounds.setter
    def bounds(self, bounds):
        """Sets the bounds of this FileAnalysisAvatarStats.


        :param bounds: The bounds of this FileAnalysisAvatarStats.  # noqa: E501
        :type bounds: list[float]
        """
        if self.local_vars_configuration.client_side_validation and bounds is None:  # noqa: E501
            raise ValueError("Invalid value for `bounds`, must not be `None`")  # noqa: E501

        self._bounds = bounds

    @property
    def camera_count(self):
        """Gets the camera_count of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The camera_count of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._camera_count

    @camera_count.setter
    def camera_count(self, camera_count):
        """Sets the camera_count of this FileAnalysisAvatarStats.


        :param camera_count: The camera_count of this FileAnalysisAvatarStats.  # noqa: E501
        :type camera_count: int
        """

        self._camera_count = camera_count

    @property
    def cloth_count(self):
        """Gets the cloth_count of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The cloth_count of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._cloth_count

    @cloth_count.setter
    def cloth_count(self, cloth_count):
        """Sets the cloth_count of this FileAnalysisAvatarStats.


        :param cloth_count: The cloth_count of this FileAnalysisAvatarStats.  # noqa: E501
        :type cloth_count: int
        """
        if self.local_vars_configuration.client_side_validation and cloth_count is None:  # noqa: E501
            raise ValueError("Invalid value for `cloth_count`, must not be `None`")  # noqa: E501

        self._cloth_count = cloth_count

    @property
    def constraint_count(self):
        """Gets the constraint_count of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The constraint_count of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._constraint_count

    @constraint_count.setter
    def constraint_count(self, constraint_count):
        """Sets the constraint_count of this FileAnalysisAvatarStats.


        :param constraint_count: The constraint_count of this FileAnalysisAvatarStats.  # noqa: E501
        :type constraint_count: int
        """
        if self.local_vars_configuration.client_side_validation and constraint_count is None:  # noqa: E501
            raise ValueError("Invalid value for `constraint_count`, must not be `None`")  # noqa: E501

        self._constraint_count = constraint_count

    @property
    def constraint_depth(self):
        """Gets the constraint_depth of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The constraint_depth of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._constraint_depth

    @constraint_depth.setter
    def constraint_depth(self, constraint_depth):
        """Sets the constraint_depth of this FileAnalysisAvatarStats.


        :param constraint_depth: The constraint_depth of this FileAnalysisAvatarStats.  # noqa: E501
        :type constraint_depth: int
        """
        if self.local_vars_configuration.client_side_validation and constraint_depth is None:  # noqa: E501
            raise ValueError("Invalid value for `constraint_depth`, must not be `None`")  # noqa: E501

        self._constraint_depth = constraint_depth

    @property
    def contact_count(self):
        """Gets the contact_count of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The contact_count of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._contact_count

    @contact_count.setter
    def contact_count(self, contact_count):
        """Sets the contact_count of this FileAnalysisAvatarStats.


        :param contact_count: The contact_count of this FileAnalysisAvatarStats.  # noqa: E501
        :type contact_count: int
        """
        if self.local_vars_configuration.client_side_validation and contact_count is None:  # noqa: E501
            raise ValueError("Invalid value for `contact_count`, must not be `None`")  # noqa: E501

        self._contact_count = contact_count

    @property
    def custom_expressions(self):
        """Gets the custom_expressions of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The custom_expressions of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: bool
        """
        return self._custom_expressions

    @custom_expressions.setter
    def custom_expressions(self, custom_expressions):
        """Sets the custom_expressions of this FileAnalysisAvatarStats.


        :param custom_expressions: The custom_expressions of this FileAnalysisAvatarStats.  # noqa: E501
        :type custom_expressions: bool
        """
        if self.local_vars_configuration.client_side_validation and custom_expressions is None:  # noqa: E501
            raise ValueError("Invalid value for `custom_expressions`, must not be `None`")  # noqa: E501

        self._custom_expressions = custom_expressions

    @property
    def customize_animation_layers(self):
        """Gets the customize_animation_layers of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The customize_animation_layers of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: bool
        """
        return self._customize_animation_layers

    @customize_animation_layers.setter
    def customize_animation_layers(self, customize_animation_layers):
        """Sets the customize_animation_layers of this FileAnalysisAvatarStats.


        :param customize_animation_layers: The customize_animation_layers of this FileAnalysisAvatarStats.  # noqa: E501
        :type customize_animation_layers: bool
        """
        if self.local_vars_configuration.client_side_validation and customize_animation_layers is None:  # noqa: E501
            raise ValueError("Invalid value for `customize_animation_layers`, must not be `None`")  # noqa: E501

        self._customize_animation_layers = customize_animation_layers

    @property
    def enable_eye_look(self):
        """Gets the enable_eye_look of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The enable_eye_look of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: bool
        """
        return self._enable_eye_look

    @enable_eye_look.setter
    def enable_eye_look(self, enable_eye_look):
        """Sets the enable_eye_look of this FileAnalysisAvatarStats.


        :param enable_eye_look: The enable_eye_look of this FileAnalysisAvatarStats.  # noqa: E501
        :type enable_eye_look: bool
        """
        if self.local_vars_configuration.client_side_validation and enable_eye_look is None:  # noqa: E501
            raise ValueError("Invalid value for `enable_eye_look`, must not be `None`")  # noqa: E501

        self._enable_eye_look = enable_eye_look

    @property
    def light_count(self):
        """Gets the light_count of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The light_count of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._light_count

    @light_count.setter
    def light_count(self, light_count):
        """Sets the light_count of this FileAnalysisAvatarStats.


        :param light_count: The light_count of this FileAnalysisAvatarStats.  # noqa: E501
        :type light_count: int
        """
        if self.local_vars_configuration.client_side_validation and light_count is None:  # noqa: E501
            raise ValueError("Invalid value for `light_count`, must not be `None`")  # noqa: E501

        self._light_count = light_count

    @property
    def line_renderer_count(self):
        """Gets the line_renderer_count of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The line_renderer_count of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._line_renderer_count

    @line_renderer_count.setter
    def line_renderer_count(self, line_renderer_count):
        """Sets the line_renderer_count of this FileAnalysisAvatarStats.


        :param line_renderer_count: The line_renderer_count of this FileAnalysisAvatarStats.  # noqa: E501
        :type line_renderer_count: int
        """
        if self.local_vars_configuration.client_side_validation and line_renderer_count is None:  # noqa: E501
            raise ValueError("Invalid value for `line_renderer_count`, must not be `None`")  # noqa: E501

        self._line_renderer_count = line_renderer_count

    @property
    def lip_sync(self):
        """Gets the lip_sync of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The lip_sync of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._lip_sync

    @lip_sync.setter
    def lip_sync(self, lip_sync):
        """Sets the lip_sync of this FileAnalysisAvatarStats.


        :param lip_sync: The lip_sync of this FileAnalysisAvatarStats.  # noqa: E501
        :type lip_sync: int
        """
        if self.local_vars_configuration.client_side_validation and lip_sync is None:  # noqa: E501
            raise ValueError("Invalid value for `lip_sync`, must not be `None`")  # noqa: E501

        self._lip_sync = lip_sync

    @property
    def material_count(self):
        """Gets the material_count of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The material_count of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._material_count

    @material_count.setter
    def material_count(self, material_count):
        """Sets the material_count of this FileAnalysisAvatarStats.


        :param material_count: The material_count of this FileAnalysisAvatarStats.  # noqa: E501
        :type material_count: int
        """
        if self.local_vars_configuration.client_side_validation and material_count is None:  # noqa: E501
            raise ValueError("Invalid value for `material_count`, must not be `None`")  # noqa: E501

        self._material_count = material_count

    @property
    def material_slots_used(self):
        """Gets the material_slots_used of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The material_slots_used of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._material_slots_used

    @material_slots_used.setter
    def material_slots_used(self, material_slots_used):
        """Sets the material_slots_used of this FileAnalysisAvatarStats.


        :param material_slots_used: The material_slots_used of this FileAnalysisAvatarStats.  # noqa: E501
        :type material_slots_used: int
        """
        if self.local_vars_configuration.client_side_validation and material_slots_used is None:  # noqa: E501
            raise ValueError("Invalid value for `material_slots_used`, must not be `None`")  # noqa: E501

        self._material_slots_used = material_slots_used

    @property
    def mesh_count(self):
        """Gets the mesh_count of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The mesh_count of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._mesh_count

    @mesh_count.setter
    def mesh_count(self, mesh_count):
        """Sets the mesh_count of this FileAnalysisAvatarStats.


        :param mesh_count: The mesh_count of this FileAnalysisAvatarStats.  # noqa: E501
        :type mesh_count: int
        """
        if self.local_vars_configuration.client_side_validation and mesh_count is None:  # noqa: E501
            raise ValueError("Invalid value for `mesh_count`, must not be `None`")  # noqa: E501

        self._mesh_count = mesh_count

    @property
    def mesh_indices(self):
        """Gets the mesh_indices of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The mesh_indices of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._mesh_indices

    @mesh_indices.setter
    def mesh_indices(self, mesh_indices):
        """Sets the mesh_indices of this FileAnalysisAvatarStats.


        :param mesh_indices: The mesh_indices of this FileAnalysisAvatarStats.  # noqa: E501
        :type mesh_indices: int
        """
        if self.local_vars_configuration.client_side_validation and mesh_indices is None:  # noqa: E501
            raise ValueError("Invalid value for `mesh_indices`, must not be `None`")  # noqa: E501

        self._mesh_indices = mesh_indices

    @property
    def mesh_particle_max_polygons(self):
        """Gets the mesh_particle_max_polygons of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The mesh_particle_max_polygons of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._mesh_particle_max_polygons

    @mesh_particle_max_polygons.setter
    def mesh_particle_max_polygons(self, mesh_particle_max_polygons):
        """Sets the mesh_particle_max_polygons of this FileAnalysisAvatarStats.


        :param mesh_particle_max_polygons: The mesh_particle_max_polygons of this FileAnalysisAvatarStats.  # noqa: E501
        :type mesh_particle_max_polygons: int
        """
        if self.local_vars_configuration.client_side_validation and mesh_particle_max_polygons is None:  # noqa: E501
            raise ValueError("Invalid value for `mesh_particle_max_polygons`, must not be `None`")  # noqa: E501

        self._mesh_particle_max_polygons = mesh_particle_max_polygons

    @property
    def mesh_polygons(self):
        """Gets the mesh_polygons of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The mesh_polygons of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._mesh_polygons

    @mesh_polygons.setter
    def mesh_polygons(self, mesh_polygons):
        """Sets the mesh_polygons of this FileAnalysisAvatarStats.


        :param mesh_polygons: The mesh_polygons of this FileAnalysisAvatarStats.  # noqa: E501
        :type mesh_polygons: int
        """
        if self.local_vars_configuration.client_side_validation and mesh_polygons is None:  # noqa: E501
            raise ValueError("Invalid value for `mesh_polygons`, must not be `None`")  # noqa: E501

        self._mesh_polygons = mesh_polygons

    @property
    def mesh_vertices(self):
        """Gets the mesh_vertices of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The mesh_vertices of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._mesh_vertices

    @mesh_vertices.setter
    def mesh_vertices(self, mesh_vertices):
        """Sets the mesh_vertices of this FileAnalysisAvatarStats.


        :param mesh_vertices: The mesh_vertices of this FileAnalysisAvatarStats.  # noqa: E501
        :type mesh_vertices: int
        """
        if self.local_vars_configuration.client_side_validation and mesh_vertices is None:  # noqa: E501
            raise ValueError("Invalid value for `mesh_vertices`, must not be `None`")  # noqa: E501

        self._mesh_vertices = mesh_vertices

    @property
    def particle_collision_enabled(self):
        """Gets the particle_collision_enabled of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The particle_collision_enabled of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: bool
        """
        return self._particle_collision_enabled

    @particle_collision_enabled.setter
    def particle_collision_enabled(self, particle_collision_enabled):
        """Sets the particle_collision_enabled of this FileAnalysisAvatarStats.


        :param particle_collision_enabled: The particle_collision_enabled of this FileAnalysisAvatarStats.  # noqa: E501
        :type particle_collision_enabled: bool
        """
        if self.local_vars_configuration.client_side_validation and particle_collision_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `particle_collision_enabled`, must not be `None`")  # noqa: E501

        self._particle_collision_enabled = particle_collision_enabled

    @property
    def particle_system_count(self):
        """Gets the particle_system_count of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The particle_system_count of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._particle_system_count

    @particle_system_count.setter
    def particle_system_count(self, particle_system_count):
        """Sets the particle_system_count of this FileAnalysisAvatarStats.


        :param particle_system_count: The particle_system_count of this FileAnalysisAvatarStats.  # noqa: E501
        :type particle_system_count: int
        """
        if self.local_vars_configuration.client_side_validation and particle_system_count is None:  # noqa: E501
            raise ValueError("Invalid value for `particle_system_count`, must not be `None`")  # noqa: E501

        self._particle_system_count = particle_system_count

    @property
    def particle_trails_enabled(self):
        """Gets the particle_trails_enabled of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The particle_trails_enabled of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: bool
        """
        return self._particle_trails_enabled

    @particle_trails_enabled.setter
    def particle_trails_enabled(self, particle_trails_enabled):
        """Sets the particle_trails_enabled of this FileAnalysisAvatarStats.


        :param particle_trails_enabled: The particle_trails_enabled of this FileAnalysisAvatarStats.  # noqa: E501
        :type particle_trails_enabled: bool
        """
        if self.local_vars_configuration.client_side_validation and particle_trails_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `particle_trails_enabled`, must not be `None`")  # noqa: E501

        self._particle_trails_enabled = particle_trails_enabled

    @property
    def phys_bone_collider_count(self):
        """Gets the phys_bone_collider_count of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The phys_bone_collider_count of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._phys_bone_collider_count

    @phys_bone_collider_count.setter
    def phys_bone_collider_count(self, phys_bone_collider_count):
        """Sets the phys_bone_collider_count of this FileAnalysisAvatarStats.


        :param phys_bone_collider_count: The phys_bone_collider_count of this FileAnalysisAvatarStats.  # noqa: E501
        :type phys_bone_collider_count: int
        """
        if self.local_vars_configuration.client_side_validation and phys_bone_collider_count is None:  # noqa: E501
            raise ValueError("Invalid value for `phys_bone_collider_count`, must not be `None`")  # noqa: E501

        self._phys_bone_collider_count = phys_bone_collider_count

    @property
    def phys_bone_collision_check_count(self):
        """Gets the phys_bone_collision_check_count of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The phys_bone_collision_check_count of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._phys_bone_collision_check_count

    @phys_bone_collision_check_count.setter
    def phys_bone_collision_check_count(self, phys_bone_collision_check_count):
        """Sets the phys_bone_collision_check_count of this FileAnalysisAvatarStats.


        :param phys_bone_collision_check_count: The phys_bone_collision_check_count of this FileAnalysisAvatarStats.  # noqa: E501
        :type phys_bone_collision_check_count: int
        """
        if self.local_vars_configuration.client_side_validation and phys_bone_collision_check_count is None:  # noqa: E501
            raise ValueError("Invalid value for `phys_bone_collision_check_count`, must not be `None`")  # noqa: E501

        self._phys_bone_collision_check_count = phys_bone_collision_check_count

    @property
    def phys_bone_component_count(self):
        """Gets the phys_bone_component_count of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The phys_bone_component_count of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._phys_bone_component_count

    @phys_bone_component_count.setter
    def phys_bone_component_count(self, phys_bone_component_count):
        """Sets the phys_bone_component_count of this FileAnalysisAvatarStats.


        :param phys_bone_component_count: The phys_bone_component_count of this FileAnalysisAvatarStats.  # noqa: E501
        :type phys_bone_component_count: int
        """
        if self.local_vars_configuration.client_side_validation and phys_bone_component_count is None:  # noqa: E501
            raise ValueError("Invalid value for `phys_bone_component_count`, must not be `None`")  # noqa: E501

        self._phys_bone_component_count = phys_bone_component_count

    @property
    def phys_bone_transform_count(self):
        """Gets the phys_bone_transform_count of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The phys_bone_transform_count of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._phys_bone_transform_count

    @phys_bone_transform_count.setter
    def phys_bone_transform_count(self, phys_bone_transform_count):
        """Sets the phys_bone_transform_count of this FileAnalysisAvatarStats.


        :param phys_bone_transform_count: The phys_bone_transform_count of this FileAnalysisAvatarStats.  # noqa: E501
        :type phys_bone_transform_count: int
        """
        if self.local_vars_configuration.client_side_validation and phys_bone_transform_count is None:  # noqa: E501
            raise ValueError("Invalid value for `phys_bone_transform_count`, must not be `None`")  # noqa: E501

        self._phys_bone_transform_count = phys_bone_transform_count

    @property
    def physics_colliders(self):
        """Gets the physics_colliders of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The physics_colliders of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._physics_colliders

    @physics_colliders.setter
    def physics_colliders(self, physics_colliders):
        """Sets the physics_colliders of this FileAnalysisAvatarStats.


        :param physics_colliders: The physics_colliders of this FileAnalysisAvatarStats.  # noqa: E501
        :type physics_colliders: int
        """
        if self.local_vars_configuration.client_side_validation and physics_colliders is None:  # noqa: E501
            raise ValueError("Invalid value for `physics_colliders`, must not be `None`")  # noqa: E501

        self._physics_colliders = physics_colliders

    @property
    def physics_rigidbodies(self):
        """Gets the physics_rigidbodies of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The physics_rigidbodies of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._physics_rigidbodies

    @physics_rigidbodies.setter
    def physics_rigidbodies(self, physics_rigidbodies):
        """Sets the physics_rigidbodies of this FileAnalysisAvatarStats.


        :param physics_rigidbodies: The physics_rigidbodies of this FileAnalysisAvatarStats.  # noqa: E501
        :type physics_rigidbodies: int
        """
        if self.local_vars_configuration.client_side_validation and physics_rigidbodies is None:  # noqa: E501
            raise ValueError("Invalid value for `physics_rigidbodies`, must not be `None`")  # noqa: E501

        self._physics_rigidbodies = physics_rigidbodies

    @property
    def skinned_mesh_count(self):
        """Gets the skinned_mesh_count of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The skinned_mesh_count of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._skinned_mesh_count

    @skinned_mesh_count.setter
    def skinned_mesh_count(self, skinned_mesh_count):
        """Sets the skinned_mesh_count of this FileAnalysisAvatarStats.


        :param skinned_mesh_count: The skinned_mesh_count of this FileAnalysisAvatarStats.  # noqa: E501
        :type skinned_mesh_count: int
        """
        if self.local_vars_configuration.client_side_validation and skinned_mesh_count is None:  # noqa: E501
            raise ValueError("Invalid value for `skinned_mesh_count`, must not be `None`")  # noqa: E501

        self._skinned_mesh_count = skinned_mesh_count

    @property
    def skinned_mesh_indices(self):
        """Gets the skinned_mesh_indices of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The skinned_mesh_indices of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._skinned_mesh_indices

    @skinned_mesh_indices.setter
    def skinned_mesh_indices(self, skinned_mesh_indices):
        """Sets the skinned_mesh_indices of this FileAnalysisAvatarStats.


        :param skinned_mesh_indices: The skinned_mesh_indices of this FileAnalysisAvatarStats.  # noqa: E501
        :type skinned_mesh_indices: int
        """
        if self.local_vars_configuration.client_side_validation and skinned_mesh_indices is None:  # noqa: E501
            raise ValueError("Invalid value for `skinned_mesh_indices`, must not be `None`")  # noqa: E501

        self._skinned_mesh_indices = skinned_mesh_indices

    @property
    def skinned_mesh_polygons(self):
        """Gets the skinned_mesh_polygons of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The skinned_mesh_polygons of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._skinned_mesh_polygons

    @skinned_mesh_polygons.setter
    def skinned_mesh_polygons(self, skinned_mesh_polygons):
        """Sets the skinned_mesh_polygons of this FileAnalysisAvatarStats.


        :param skinned_mesh_polygons: The skinned_mesh_polygons of this FileAnalysisAvatarStats.  # noqa: E501
        :type skinned_mesh_polygons: int
        """
        if self.local_vars_configuration.client_side_validation and skinned_mesh_polygons is None:  # noqa: E501
            raise ValueError("Invalid value for `skinned_mesh_polygons`, must not be `None`")  # noqa: E501

        self._skinned_mesh_polygons = skinned_mesh_polygons

    @property
    def skinned_mesh_vertices(self):
        """Gets the skinned_mesh_vertices of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The skinned_mesh_vertices of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._skinned_mesh_vertices

    @skinned_mesh_vertices.setter
    def skinned_mesh_vertices(self, skinned_mesh_vertices):
        """Sets the skinned_mesh_vertices of this FileAnalysisAvatarStats.


        :param skinned_mesh_vertices: The skinned_mesh_vertices of this FileAnalysisAvatarStats.  # noqa: E501
        :type skinned_mesh_vertices: int
        """
        if self.local_vars_configuration.client_side_validation and skinned_mesh_vertices is None:  # noqa: E501
            raise ValueError("Invalid value for `skinned_mesh_vertices`, must not be `None`")  # noqa: E501

        self._skinned_mesh_vertices = skinned_mesh_vertices

    @property
    def total_cloth_vertices(self):
        """Gets the total_cloth_vertices of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The total_cloth_vertices of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._total_cloth_vertices

    @total_cloth_vertices.setter
    def total_cloth_vertices(self, total_cloth_vertices):
        """Sets the total_cloth_vertices of this FileAnalysisAvatarStats.


        :param total_cloth_vertices: The total_cloth_vertices of this FileAnalysisAvatarStats.  # noqa: E501
        :type total_cloth_vertices: int
        """
        if self.local_vars_configuration.client_side_validation and total_cloth_vertices is None:  # noqa: E501
            raise ValueError("Invalid value for `total_cloth_vertices`, must not be `None`")  # noqa: E501

        self._total_cloth_vertices = total_cloth_vertices

    @property
    def total_indices(self):
        """Gets the total_indices of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The total_indices of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._total_indices

    @total_indices.setter
    def total_indices(self, total_indices):
        """Sets the total_indices of this FileAnalysisAvatarStats.


        :param total_indices: The total_indices of this FileAnalysisAvatarStats.  # noqa: E501
        :type total_indices: int
        """
        if self.local_vars_configuration.client_side_validation and total_indices is None:  # noqa: E501
            raise ValueError("Invalid value for `total_indices`, must not be `None`")  # noqa: E501

        self._total_indices = total_indices

    @property
    def total_max_particles(self):
        """Gets the total_max_particles of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The total_max_particles of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._total_max_particles

    @total_max_particles.setter
    def total_max_particles(self, total_max_particles):
        """Sets the total_max_particles of this FileAnalysisAvatarStats.


        :param total_max_particles: The total_max_particles of this FileAnalysisAvatarStats.  # noqa: E501
        :type total_max_particles: int
        """
        if self.local_vars_configuration.client_side_validation and total_max_particles is None:  # noqa: E501
            raise ValueError("Invalid value for `total_max_particles`, must not be `None`")  # noqa: E501

        self._total_max_particles = total_max_particles

    @property
    def total_polygons(self):
        """Gets the total_polygons of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The total_polygons of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._total_polygons

    @total_polygons.setter
    def total_polygons(self, total_polygons):
        """Sets the total_polygons of this FileAnalysisAvatarStats.


        :param total_polygons: The total_polygons of this FileAnalysisAvatarStats.  # noqa: E501
        :type total_polygons: int
        """
        if self.local_vars_configuration.client_side_validation and total_polygons is None:  # noqa: E501
            raise ValueError("Invalid value for `total_polygons`, must not be `None`")  # noqa: E501

        self._total_polygons = total_polygons

    @property
    def total_texture_usage(self):
        """Gets the total_texture_usage of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The total_texture_usage of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._total_texture_usage

    @total_texture_usage.setter
    def total_texture_usage(self, total_texture_usage):
        """Sets the total_texture_usage of this FileAnalysisAvatarStats.


        :param total_texture_usage: The total_texture_usage of this FileAnalysisAvatarStats.  # noqa: E501
        :type total_texture_usage: int
        """
        if self.local_vars_configuration.client_side_validation and total_texture_usage is None:  # noqa: E501
            raise ValueError("Invalid value for `total_texture_usage`, must not be `None`")  # noqa: E501

        self._total_texture_usage = total_texture_usage

    @property
    def total_vertices(self):
        """Gets the total_vertices of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The total_vertices of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._total_vertices

    @total_vertices.setter
    def total_vertices(self, total_vertices):
        """Sets the total_vertices of this FileAnalysisAvatarStats.


        :param total_vertices: The total_vertices of this FileAnalysisAvatarStats.  # noqa: E501
        :type total_vertices: int
        """
        if self.local_vars_configuration.client_side_validation and total_vertices is None:  # noqa: E501
            raise ValueError("Invalid value for `total_vertices`, must not be `None`")  # noqa: E501

        self._total_vertices = total_vertices

    @property
    def trail_renderer_count(self):
        """Gets the trail_renderer_count of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The trail_renderer_count of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: int
        """
        return self._trail_renderer_count

    @trail_renderer_count.setter
    def trail_renderer_count(self, trail_renderer_count):
        """Sets the trail_renderer_count of this FileAnalysisAvatarStats.


        :param trail_renderer_count: The trail_renderer_count of this FileAnalysisAvatarStats.  # noqa: E501
        :type trail_renderer_count: int
        """
        if self.local_vars_configuration.client_side_validation and trail_renderer_count is None:  # noqa: E501
            raise ValueError("Invalid value for `trail_renderer_count`, must not be `None`")  # noqa: E501

        self._trail_renderer_count = trail_renderer_count

    @property
    def write_defaults_used(self):
        """Gets the write_defaults_used of this FileAnalysisAvatarStats.  # noqa: E501


        :return: The write_defaults_used of this FileAnalysisAvatarStats.  # noqa: E501
        :rtype: bool
        """
        return self._write_defaults_used

    @write_defaults_used.setter
    def write_defaults_used(self, write_defaults_used):
        """Sets the write_defaults_used of this FileAnalysisAvatarStats.


        :param write_defaults_used: The write_defaults_used of this FileAnalysisAvatarStats.  # noqa: E501
        :type write_defaults_used: bool
        """
        if self.local_vars_configuration.client_side_validation and write_defaults_used is None:  # noqa: E501
            raise ValueError("Invalid value for `write_defaults_used`, must not be `None`")  # noqa: E501

        self._write_defaults_used = write_defaults_used

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileAnalysisAvatarStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileAnalysisAvatarStats):
            return True

        return self.to_dict() != other.to_dict()
