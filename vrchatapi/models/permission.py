# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class Permission(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'display_name': 'str',
        'description': 'str',
        'id': 'str',
        'owner_display_name': 'str',
        'name': 'str',
        'owner_id': 'str',
        'type': 'str',
        'data': 'object'
    }

    attribute_map = {
        'display_name': 'displayName',
        'description': 'description',
        'id': 'id',
        'owner_display_name': 'ownerDisplayName',
        'name': 'name',
        'owner_id': 'ownerId',
        'type': 'type',
        'data': 'data'
    }

    def __init__(self, display_name=None, description=None, id=None, owner_display_name=None, name=None, owner_id=None, type=None, data=None, local_vars_configuration=None):  # noqa: E501
        """Permission - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._display_name = None
        self._description = None
        self._id = None
        self._owner_display_name = None
        self._name = None
        self._owner_id = None
        self._type = None
        self._data = None
        self.discriminator = None

        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        self.id = id
        self.owner_display_name = owner_display_name
        self.name = name
        self.owner_id = owner_id
        if type is not None:
            self.type = type
        if data is not None:
            self.data = data

    @property
    def display_name(self):
        """Gets the display_name of this Permission.  # noqa: E501


        :return: The display_name of this Permission.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Permission.


        :param display_name: The display_name of this Permission.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this Permission.  # noqa: E501


        :return: The description of this Permission.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Permission.


        :param description: The description of this Permission.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Permission.  # noqa: E501


        :return: The id of this Permission.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Permission.


        :param id: The id of this Permission.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def owner_display_name(self):
        """Gets the owner_display_name of this Permission.  # noqa: E501


        :return: The owner_display_name of this Permission.  # noqa: E501
        :rtype: str
        """
        return self._owner_display_name

    @owner_display_name.setter
    def owner_display_name(self, owner_display_name):
        """Sets the owner_display_name of this Permission.


        :param owner_display_name: The owner_display_name of this Permission.  # noqa: E501
        :type owner_display_name: str
        """
        if self.local_vars_configuration.client_side_validation and owner_display_name is None:  # noqa: E501
            raise ValueError("Invalid value for `owner_display_name`, must not be `None`")  # noqa: E501

        self._owner_display_name = owner_display_name

    @property
    def name(self):
        """Gets the name of this Permission.  # noqa: E501


        :return: The name of this Permission.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Permission.


        :param name: The name of this Permission.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def owner_id(self):
        """Gets the owner_id of this Permission.  # noqa: E501

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :return: The owner_id of this Permission.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Permission.

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :param owner_id: The owner_id of this Permission.  # noqa: E501
        :type owner_id: str
        """
        if self.local_vars_configuration.client_side_validation and owner_id is None:  # noqa: E501
            raise ValueError("Invalid value for `owner_id`, must not be `None`")  # noqa: E501

        self._owner_id = owner_id

    @property
    def type(self):
        """Gets the type of this Permission.  # noqa: E501


        :return: The type of this Permission.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Permission.


        :param type: The type of this Permission.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def data(self):
        """Gets the data of this Permission.  # noqa: E501


        :return: The data of this Permission.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Permission.


        :param data: The data of this Permission.  # noqa: E501
        :type data: object
        """

        self._data = data

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Permission):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Permission):
            return True

        return self.to_dict() != other.to_dict()
