# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class AdminAssetBundle(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'asset_type': 'str',
        'author_id': 'str',
        'author_name': 'str',
        'description': 'str',
        'image_url': 'str',
        'name': 'str',
        'release_status': 'ReleaseStatus',
        'tags': 'list[str]',
        'thumbnail_image_url': 'str',
        'unity_package_url': 'str',
        'unity_packages': 'list[AdminUnityPackage]'
    }

    attribute_map = {
        'created_at': '_created_at',
        'updated_at': '_updated_at',
        'asset_type': 'assetType',
        'author_id': 'authorId',
        'author_name': 'authorName',
        'description': 'description',
        'image_url': 'imageUrl',
        'name': 'name',
        'release_status': 'releaseStatus',
        'tags': 'tags',
        'thumbnail_image_url': 'thumbnailImageUrl',
        'unity_package_url': 'unityPackageUrl',
        'unity_packages': 'unityPackages'
    }

    def __init__(self, created_at=None, updated_at=None, asset_type=None, author_id=None, author_name=None, description=None, image_url=None, name=None, release_status=None, tags=None, thumbnail_image_url=None, unity_package_url=None, unity_packages=None, local_vars_configuration=None):  # noqa: E501
        """AdminAssetBundle - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_at = None
        self._updated_at = None
        self._asset_type = None
        self._author_id = None
        self._author_name = None
        self._description = None
        self._image_url = None
        self._name = None
        self._release_status = None
        self._tags = None
        self._thumbnail_image_url = None
        self._unity_package_url = None
        self._unity_packages = None
        self.discriminator = None

        self.created_at = created_at
        self.updated_at = updated_at
        self.asset_type = asset_type
        self.author_id = author_id
        self.author_name = author_name
        self.description = description
        self.image_url = image_url
        self.name = name
        self.release_status = release_status
        self.tags = tags
        self.thumbnail_image_url = thumbnail_image_url
        self.unity_package_url = unity_package_url
        self.unity_packages = unity_packages

    @property
    def created_at(self):
        """Gets the created_at of this AdminAssetBundle.  # noqa: E501


        :return: The created_at of this AdminAssetBundle.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AdminAssetBundle.


        :param created_at: The created_at of this AdminAssetBundle.  # noqa: E501
        :type created_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this AdminAssetBundle.  # noqa: E501


        :return: The updated_at of this AdminAssetBundle.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AdminAssetBundle.


        :param updated_at: The updated_at of this AdminAssetBundle.  # noqa: E501
        :type updated_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def asset_type(self):
        """Gets the asset_type of this AdminAssetBundle.  # noqa: E501


        :return: The asset_type of this AdminAssetBundle.  # noqa: E501
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this AdminAssetBundle.


        :param asset_type: The asset_type of this AdminAssetBundle.  # noqa: E501
        :type asset_type: str
        """
        if self.local_vars_configuration.client_side_validation and asset_type is None:  # noqa: E501
            raise ValueError("Invalid value for `asset_type`, must not be `None`")  # noqa: E501

        self._asset_type = asset_type

    @property
    def author_id(self):
        """Gets the author_id of this AdminAssetBundle.  # noqa: E501

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :return: The author_id of this AdminAssetBundle.  # noqa: E501
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this AdminAssetBundle.

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :param author_id: The author_id of this AdminAssetBundle.  # noqa: E501
        :type author_id: str
        """
        if self.local_vars_configuration.client_side_validation and author_id is None:  # noqa: E501
            raise ValueError("Invalid value for `author_id`, must not be `None`")  # noqa: E501

        self._author_id = author_id

    @property
    def author_name(self):
        """Gets the author_name of this AdminAssetBundle.  # noqa: E501


        :return: The author_name of this AdminAssetBundle.  # noqa: E501
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this AdminAssetBundle.


        :param author_name: The author_name of this AdminAssetBundle.  # noqa: E501
        :type author_name: str
        """
        if self.local_vars_configuration.client_side_validation and author_name is None:  # noqa: E501
            raise ValueError("Invalid value for `author_name`, must not be `None`")  # noqa: E501

        self._author_name = author_name

    @property
    def description(self):
        """Gets the description of this AdminAssetBundle.  # noqa: E501


        :return: The description of this AdminAssetBundle.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AdminAssetBundle.


        :param description: The description of this AdminAssetBundle.  # noqa: E501
        :type description: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def image_url(self):
        """Gets the image_url of this AdminAssetBundle.  # noqa: E501


        :return: The image_url of this AdminAssetBundle.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this AdminAssetBundle.


        :param image_url: The image_url of this AdminAssetBundle.  # noqa: E501
        :type image_url: str
        """
        if self.local_vars_configuration.client_side_validation and image_url is None:  # noqa: E501
            raise ValueError("Invalid value for `image_url`, must not be `None`")  # noqa: E501

        self._image_url = image_url

    @property
    def name(self):
        """Gets the name of this AdminAssetBundle.  # noqa: E501


        :return: The name of this AdminAssetBundle.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AdminAssetBundle.


        :param name: The name of this AdminAssetBundle.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def release_status(self):
        """Gets the release_status of this AdminAssetBundle.  # noqa: E501


        :return: The release_status of this AdminAssetBundle.  # noqa: E501
        :rtype: ReleaseStatus
        """
        return self._release_status

    @release_status.setter
    def release_status(self, release_status):
        """Sets the release_status of this AdminAssetBundle.


        :param release_status: The release_status of this AdminAssetBundle.  # noqa: E501
        :type release_status: ReleaseStatus
        """
        if self.local_vars_configuration.client_side_validation and release_status is None:  # noqa: E501
            raise ValueError("Invalid value for `release_status`, must not be `None`")  # noqa: E501

        self._release_status = release_status

    @property
    def tags(self):
        """Gets the tags of this AdminAssetBundle.  # noqa: E501


        :return: The tags of this AdminAssetBundle.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AdminAssetBundle.


        :param tags: The tags of this AdminAssetBundle.  # noqa: E501
        :type tags: list[str]
        """
        if self.local_vars_configuration.client_side_validation and tags is None:  # noqa: E501
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def thumbnail_image_url(self):
        """Gets the thumbnail_image_url of this AdminAssetBundle.  # noqa: E501


        :return: The thumbnail_image_url of this AdminAssetBundle.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_image_url

    @thumbnail_image_url.setter
    def thumbnail_image_url(self, thumbnail_image_url):
        """Sets the thumbnail_image_url of this AdminAssetBundle.


        :param thumbnail_image_url: The thumbnail_image_url of this AdminAssetBundle.  # noqa: E501
        :type thumbnail_image_url: str
        """
        if self.local_vars_configuration.client_side_validation and thumbnail_image_url is None:  # noqa: E501
            raise ValueError("Invalid value for `thumbnail_image_url`, must not be `None`")  # noqa: E501

        self._thumbnail_image_url = thumbnail_image_url

    @property
    def unity_package_url(self):
        """Gets the unity_package_url of this AdminAssetBundle.  # noqa: E501


        :return: The unity_package_url of this AdminAssetBundle.  # noqa: E501
        :rtype: str
        """
        return self._unity_package_url

    @unity_package_url.setter
    def unity_package_url(self, unity_package_url):
        """Sets the unity_package_url of this AdminAssetBundle.


        :param unity_package_url: The unity_package_url of this AdminAssetBundle.  # noqa: E501
        :type unity_package_url: str
        """

        self._unity_package_url = unity_package_url

    @property
    def unity_packages(self):
        """Gets the unity_packages of this AdminAssetBundle.  # noqa: E501


        :return: The unity_packages of this AdminAssetBundle.  # noqa: E501
        :rtype: list[AdminUnityPackage]
        """
        return self._unity_packages

    @unity_packages.setter
    def unity_packages(self, unity_packages):
        """Sets the unity_packages of this AdminAssetBundle.


        :param unity_packages: The unity_packages of this AdminAssetBundle.  # noqa: E501
        :type unity_packages: list[AdminUnityPackage]
        """
        if self.local_vars_configuration.client_side_validation and unity_packages is None:  # noqa: E501
            raise ValueError("Invalid value for `unity_packages`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                unity_packages is not None and len(unity_packages) < 1):
            raise ValueError("Invalid value for `unity_packages`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._unity_packages = unity_packages

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminAssetBundle):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdminAssetBundle):
            return True

        return self.to_dict() != other.to_dict()
