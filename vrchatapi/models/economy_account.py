# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class EconomyAccount(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_activated_on': 'datetime',
        'account_id': 'str',
        'blocked': 'bool',
        'can_spend': 'bool',
        'source': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'account_activated_on': 'accountActivatedOn',
        'account_id': 'accountId',
        'blocked': 'blocked',
        'can_spend': 'canSpend',
        'source': 'source',
        'user_id': 'userId'
    }

    def __init__(self, account_activated_on=None, account_id=None, blocked=None, can_spend=None, source=None, user_id=None, local_vars_configuration=None):  # noqa: E501
        """EconomyAccount - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._account_activated_on = None
        self._account_id = None
        self._blocked = None
        self._can_spend = None
        self._source = None
        self._user_id = None
        self.discriminator = None

        self.account_activated_on = account_activated_on
        self.account_id = account_id
        self.blocked = blocked
        self.can_spend = can_spend
        self.source = source
        self.user_id = user_id

    @property
    def account_activated_on(self):
        """Gets the account_activated_on of this EconomyAccount.  # noqa: E501


        :return: The account_activated_on of this EconomyAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._account_activated_on

    @account_activated_on.setter
    def account_activated_on(self, account_activated_on):
        """Sets the account_activated_on of this EconomyAccount.


        :param account_activated_on: The account_activated_on of this EconomyAccount.  # noqa: E501
        :type account_activated_on: datetime
        """

        self._account_activated_on = account_activated_on

    @property
    def account_id(self):
        """Gets the account_id of this EconomyAccount.  # noqa: E501


        :return: The account_id of this EconomyAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this EconomyAccount.


        :param account_id: The account_id of this EconomyAccount.  # noqa: E501
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def blocked(self):
        """Gets the blocked of this EconomyAccount.  # noqa: E501


        :return: The blocked of this EconomyAccount.  # noqa: E501
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this EconomyAccount.


        :param blocked: The blocked of this EconomyAccount.  # noqa: E501
        :type blocked: bool
        """
        if self.local_vars_configuration.client_side_validation and blocked is None:  # noqa: E501
            raise ValueError("Invalid value for `blocked`, must not be `None`")  # noqa: E501

        self._blocked = blocked

    @property
    def can_spend(self):
        """Gets the can_spend of this EconomyAccount.  # noqa: E501


        :return: The can_spend of this EconomyAccount.  # noqa: E501
        :rtype: bool
        """
        return self._can_spend

    @can_spend.setter
    def can_spend(self, can_spend):
        """Sets the can_spend of this EconomyAccount.


        :param can_spend: The can_spend of this EconomyAccount.  # noqa: E501
        :type can_spend: bool
        """
        if self.local_vars_configuration.client_side_validation and can_spend is None:  # noqa: E501
            raise ValueError("Invalid value for `can_spend`, must not be `None`")  # noqa: E501

        self._can_spend = can_spend

    @property
    def source(self):
        """Gets the source of this EconomyAccount.  # noqa: E501


        :return: The source of this EconomyAccount.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this EconomyAccount.


        :param source: The source of this EconomyAccount.  # noqa: E501
        :type source: str
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def user_id(self):
        """Gets the user_id of this EconomyAccount.  # noqa: E501

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :return: The user_id of this EconomyAccount.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this EconomyAccount.

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :param user_id: The user_id of this EconomyAccount.  # noqa: E501
        :type user_id: str
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EconomyAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EconomyAccount):
            return True

        return self.to_dict() != other.to_dict()
