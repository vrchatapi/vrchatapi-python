# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class APIConfigReportCategories(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'avatar': 'ReportCategory',
        'avatarpage': 'ReportCategory',
        'behavior': 'ReportCategory',
        'chat': 'ReportCategory',
        'emoji': 'ReportCategory',
        'environment': 'ReportCategory',
        'groupstore': 'ReportCategory',
        'image': 'ReportCategory',
        'text': 'ReportCategory',
        'sticker': 'ReportCategory',
        'warnings': 'ReportCategory',
        'worldimage': 'ReportCategory',
        'worldstore': 'ReportCategory'
    }

    attribute_map = {
        'avatar': 'avatar',
        'avatarpage': 'avatarpage',
        'behavior': 'behavior',
        'chat': 'chat',
        'emoji': 'emoji',
        'environment': 'environment',
        'groupstore': 'groupstore',
        'image': 'image',
        'text': 'text',
        'sticker': 'sticker',
        'warnings': 'warnings',
        'worldimage': 'worldimage',
        'worldstore': 'worldstore'
    }

    def __init__(self, avatar=None, avatarpage=None, behavior=None, chat=None, emoji=None, environment=None, groupstore=None, image=None, text=None, sticker=None, warnings=None, worldimage=None, worldstore=None, local_vars_configuration=None):  # noqa: E501
        """APIConfigReportCategories - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._avatar = None
        self._avatarpage = None
        self._behavior = None
        self._chat = None
        self._emoji = None
        self._environment = None
        self._groupstore = None
        self._image = None
        self._text = None
        self._sticker = None
        self._warnings = None
        self._worldimage = None
        self._worldstore = None
        self.discriminator = None

        self.avatar = avatar
        if avatarpage is not None:
            self.avatarpage = avatarpage
        self.behavior = behavior
        self.chat = chat
        if emoji is not None:
            self.emoji = emoji
        self.environment = environment
        self.groupstore = groupstore
        self.image = image
        self.text = text
        if sticker is not None:
            self.sticker = sticker
        self.warnings = warnings
        self.worldimage = worldimage
        self.worldstore = worldstore

    @property
    def avatar(self):
        """Gets the avatar of this APIConfigReportCategories.  # noqa: E501


        :return: The avatar of this APIConfigReportCategories.  # noqa: E501
        :rtype: ReportCategory
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this APIConfigReportCategories.


        :param avatar: The avatar of this APIConfigReportCategories.  # noqa: E501
        :type avatar: ReportCategory
        """
        if self.local_vars_configuration.client_side_validation and avatar is None:  # noqa: E501
            raise ValueError("Invalid value for `avatar`, must not be `None`")  # noqa: E501

        self._avatar = avatar

    @property
    def avatarpage(self):
        """Gets the avatarpage of this APIConfigReportCategories.  # noqa: E501


        :return: The avatarpage of this APIConfigReportCategories.  # noqa: E501
        :rtype: ReportCategory
        """
        return self._avatarpage

    @avatarpage.setter
    def avatarpage(self, avatarpage):
        """Sets the avatarpage of this APIConfigReportCategories.


        :param avatarpage: The avatarpage of this APIConfigReportCategories.  # noqa: E501
        :type avatarpage: ReportCategory
        """

        self._avatarpage = avatarpage

    @property
    def behavior(self):
        """Gets the behavior of this APIConfigReportCategories.  # noqa: E501


        :return: The behavior of this APIConfigReportCategories.  # noqa: E501
        :rtype: ReportCategory
        """
        return self._behavior

    @behavior.setter
    def behavior(self, behavior):
        """Sets the behavior of this APIConfigReportCategories.


        :param behavior: The behavior of this APIConfigReportCategories.  # noqa: E501
        :type behavior: ReportCategory
        """
        if self.local_vars_configuration.client_side_validation and behavior is None:  # noqa: E501
            raise ValueError("Invalid value for `behavior`, must not be `None`")  # noqa: E501

        self._behavior = behavior

    @property
    def chat(self):
        """Gets the chat of this APIConfigReportCategories.  # noqa: E501


        :return: The chat of this APIConfigReportCategories.  # noqa: E501
        :rtype: ReportCategory
        """
        return self._chat

    @chat.setter
    def chat(self, chat):
        """Sets the chat of this APIConfigReportCategories.


        :param chat: The chat of this APIConfigReportCategories.  # noqa: E501
        :type chat: ReportCategory
        """
        if self.local_vars_configuration.client_side_validation and chat is None:  # noqa: E501
            raise ValueError("Invalid value for `chat`, must not be `None`")  # noqa: E501

        self._chat = chat

    @property
    def emoji(self):
        """Gets the emoji of this APIConfigReportCategories.  # noqa: E501


        :return: The emoji of this APIConfigReportCategories.  # noqa: E501
        :rtype: ReportCategory
        """
        return self._emoji

    @emoji.setter
    def emoji(self, emoji):
        """Sets the emoji of this APIConfigReportCategories.


        :param emoji: The emoji of this APIConfigReportCategories.  # noqa: E501
        :type emoji: ReportCategory
        """

        self._emoji = emoji

    @property
    def environment(self):
        """Gets the environment of this APIConfigReportCategories.  # noqa: E501


        :return: The environment of this APIConfigReportCategories.  # noqa: E501
        :rtype: ReportCategory
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this APIConfigReportCategories.


        :param environment: The environment of this APIConfigReportCategories.  # noqa: E501
        :type environment: ReportCategory
        """
        if self.local_vars_configuration.client_side_validation and environment is None:  # noqa: E501
            raise ValueError("Invalid value for `environment`, must not be `None`")  # noqa: E501

        self._environment = environment

    @property
    def groupstore(self):
        """Gets the groupstore of this APIConfigReportCategories.  # noqa: E501


        :return: The groupstore of this APIConfigReportCategories.  # noqa: E501
        :rtype: ReportCategory
        """
        return self._groupstore

    @groupstore.setter
    def groupstore(self, groupstore):
        """Sets the groupstore of this APIConfigReportCategories.


        :param groupstore: The groupstore of this APIConfigReportCategories.  # noqa: E501
        :type groupstore: ReportCategory
        """
        if self.local_vars_configuration.client_side_validation and groupstore is None:  # noqa: E501
            raise ValueError("Invalid value for `groupstore`, must not be `None`")  # noqa: E501

        self._groupstore = groupstore

    @property
    def image(self):
        """Gets the image of this APIConfigReportCategories.  # noqa: E501


        :return: The image of this APIConfigReportCategories.  # noqa: E501
        :rtype: ReportCategory
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this APIConfigReportCategories.


        :param image: The image of this APIConfigReportCategories.  # noqa: E501
        :type image: ReportCategory
        """
        if self.local_vars_configuration.client_side_validation and image is None:  # noqa: E501
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def text(self):
        """Gets the text of this APIConfigReportCategories.  # noqa: E501


        :return: The text of this APIConfigReportCategories.  # noqa: E501
        :rtype: ReportCategory
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this APIConfigReportCategories.


        :param text: The text of this APIConfigReportCategories.  # noqa: E501
        :type text: ReportCategory
        """
        if self.local_vars_configuration.client_side_validation and text is None:  # noqa: E501
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def sticker(self):
        """Gets the sticker of this APIConfigReportCategories.  # noqa: E501


        :return: The sticker of this APIConfigReportCategories.  # noqa: E501
        :rtype: ReportCategory
        """
        return self._sticker

    @sticker.setter
    def sticker(self, sticker):
        """Sets the sticker of this APIConfigReportCategories.


        :param sticker: The sticker of this APIConfigReportCategories.  # noqa: E501
        :type sticker: ReportCategory
        """

        self._sticker = sticker

    @property
    def warnings(self):
        """Gets the warnings of this APIConfigReportCategories.  # noqa: E501


        :return: The warnings of this APIConfigReportCategories.  # noqa: E501
        :rtype: ReportCategory
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this APIConfigReportCategories.


        :param warnings: The warnings of this APIConfigReportCategories.  # noqa: E501
        :type warnings: ReportCategory
        """
        if self.local_vars_configuration.client_side_validation and warnings is None:  # noqa: E501
            raise ValueError("Invalid value for `warnings`, must not be `None`")  # noqa: E501

        self._warnings = warnings

    @property
    def worldimage(self):
        """Gets the worldimage of this APIConfigReportCategories.  # noqa: E501


        :return: The worldimage of this APIConfigReportCategories.  # noqa: E501
        :rtype: ReportCategory
        """
        return self._worldimage

    @worldimage.setter
    def worldimage(self, worldimage):
        """Sets the worldimage of this APIConfigReportCategories.


        :param worldimage: The worldimage of this APIConfigReportCategories.  # noqa: E501
        :type worldimage: ReportCategory
        """
        if self.local_vars_configuration.client_side_validation and worldimage is None:  # noqa: E501
            raise ValueError("Invalid value for `worldimage`, must not be `None`")  # noqa: E501

        self._worldimage = worldimage

    @property
    def worldstore(self):
        """Gets the worldstore of this APIConfigReportCategories.  # noqa: E501


        :return: The worldstore of this APIConfigReportCategories.  # noqa: E501
        :rtype: ReportCategory
        """
        return self._worldstore

    @worldstore.setter
    def worldstore(self, worldstore):
        """Sets the worldstore of this APIConfigReportCategories.


        :param worldstore: The worldstore of this APIConfigReportCategories.  # noqa: E501
        :type worldstore: ReportCategory
        """
        if self.local_vars_configuration.client_side_validation and worldstore is None:  # noqa: E501
            raise ValueError("Invalid value for `worldstore`, must not be `None`")  # noqa: E501

        self._worldstore = worldstore

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIConfigReportCategories):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, APIConfigReportCategories):
            return True

        return self.to_dict() != other.to_dict()
