# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class CurrentUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'accepted_tos_version': 'int',
        'accepted_privacy_version': 'int',
        'account_deletion_date': 'date',
        'account_deletion_log': 'list[AccountDeletionLog]',
        'active_friends': 'list[str]',
        'age_verification_status': 'AgeVerificationStatus',
        'age_verified': 'bool',
        'allow_avatar_copying': 'bool',
        'auth_token': 'str',
        'badges': 'list[Badge]',
        'bio': 'str',
        'bio_links': 'list[str]',
        'content_filters': 'list[str]',
        'current_avatar': 'str',
        'current_avatar_image_url': 'str',
        'current_avatar_thumbnail_image_url': 'str',
        'current_avatar_tags': 'list[str]',
        'date_joined': 'date',
        'developer_type': 'DeveloperType',
        'display_name': 'str',
        'email_verified': 'bool',
        'fallback_avatar': 'str',
        'friend_group_names': 'list[str]',
        'friend_key': 'str',
        'friends': 'list[str]',
        'has_birthday': 'bool',
        'hide_content_filter_settings': 'bool',
        'user_language': 'str',
        'user_language_code': 'str',
        'has_email': 'bool',
        'has_logged_in_from_client': 'bool',
        'has_pending_email': 'bool',
        'home_location': 'str',
        'id': 'str',
        'is_adult': 'bool',
        'is_booping_enabled': 'bool',
        'is_friend': 'bool',
        'last_activity': 'datetime',
        'last_login': 'datetime',
        'last_mobile': 'datetime',
        'last_platform': 'str',
        'obfuscated_email': 'str',
        'obfuscated_pending_email': 'str',
        'oculus_id': 'str',
        'google_id': 'str',
        'google_details': 'object',
        'pico_id': 'str',
        'vive_id': 'str',
        'offline_friends': 'list[str]',
        'online_friends': 'list[str]',
        'past_display_names': 'list[PastDisplayName]',
        'presence': 'CurrentUserPresence',
        'platform_history': 'list[CurrentUserPlatformHistoryInner]',
        'profile_pic_override': 'str',
        'profile_pic_override_thumbnail': 'str',
        'pronouns': 'str',
        'pronouns_history': 'list[str]',
        'queued_instance': 'str',
        'receive_mobile_invitations': 'bool',
        'state': 'UserState',
        'status': 'UserStatus',
        'status_description': 'str',
        'status_first_time': 'bool',
        'status_history': 'list[str]',
        'steam_details': 'object',
        'steam_id': 'str',
        'tags': 'list[str]',
        'two_factor_auth_enabled': 'bool',
        'two_factor_auth_enabled_date': 'datetime',
        'unsubscribe': 'bool',
        'updated_at': 'datetime',
        'user_icon': 'str',
        'username': 'str'
    }

    attribute_map = {
        'accepted_tos_version': 'acceptedTOSVersion',
        'accepted_privacy_version': 'acceptedPrivacyVersion',
        'account_deletion_date': 'accountDeletionDate',
        'account_deletion_log': 'accountDeletionLog',
        'active_friends': 'activeFriends',
        'age_verification_status': 'ageVerificationStatus',
        'age_verified': 'ageVerified',
        'allow_avatar_copying': 'allowAvatarCopying',
        'auth_token': 'authToken',
        'badges': 'badges',
        'bio': 'bio',
        'bio_links': 'bioLinks',
        'content_filters': 'contentFilters',
        'current_avatar': 'currentAvatar',
        'current_avatar_image_url': 'currentAvatarImageUrl',
        'current_avatar_thumbnail_image_url': 'currentAvatarThumbnailImageUrl',
        'current_avatar_tags': 'currentAvatarTags',
        'date_joined': 'date_joined',
        'developer_type': 'developerType',
        'display_name': 'displayName',
        'email_verified': 'emailVerified',
        'fallback_avatar': 'fallbackAvatar',
        'friend_group_names': 'friendGroupNames',
        'friend_key': 'friendKey',
        'friends': 'friends',
        'has_birthday': 'hasBirthday',
        'hide_content_filter_settings': 'hideContentFilterSettings',
        'user_language': 'userLanguage',
        'user_language_code': 'userLanguageCode',
        'has_email': 'hasEmail',
        'has_logged_in_from_client': 'hasLoggedInFromClient',
        'has_pending_email': 'hasPendingEmail',
        'home_location': 'homeLocation',
        'id': 'id',
        'is_adult': 'isAdult',
        'is_booping_enabled': 'isBoopingEnabled',
        'is_friend': 'isFriend',
        'last_activity': 'last_activity',
        'last_login': 'last_login',
        'last_mobile': 'last_mobile',
        'last_platform': 'last_platform',
        'obfuscated_email': 'obfuscatedEmail',
        'obfuscated_pending_email': 'obfuscatedPendingEmail',
        'oculus_id': 'oculusId',
        'google_id': 'googleId',
        'google_details': 'googleDetails',
        'pico_id': 'picoId',
        'vive_id': 'viveId',
        'offline_friends': 'offlineFriends',
        'online_friends': 'onlineFriends',
        'past_display_names': 'pastDisplayNames',
        'presence': 'presence',
        'platform_history': 'platform_history',
        'profile_pic_override': 'profilePicOverride',
        'profile_pic_override_thumbnail': 'profilePicOverrideThumbnail',
        'pronouns': 'pronouns',
        'pronouns_history': 'pronounsHistory',
        'queued_instance': 'queuedInstance',
        'receive_mobile_invitations': 'receiveMobileInvitations',
        'state': 'state',
        'status': 'status',
        'status_description': 'statusDescription',
        'status_first_time': 'statusFirstTime',
        'status_history': 'statusHistory',
        'steam_details': 'steamDetails',
        'steam_id': 'steamId',
        'tags': 'tags',
        'two_factor_auth_enabled': 'twoFactorAuthEnabled',
        'two_factor_auth_enabled_date': 'twoFactorAuthEnabledDate',
        'unsubscribe': 'unsubscribe',
        'updated_at': 'updated_at',
        'user_icon': 'userIcon',
        'username': 'username'
    }

    def __init__(self, accepted_tos_version=None, accepted_privacy_version=None, account_deletion_date=None, account_deletion_log=None, active_friends=None, age_verification_status=None, age_verified=None, allow_avatar_copying=None, auth_token=None, badges=None, bio=None, bio_links=None, content_filters=None, current_avatar=None, current_avatar_image_url=None, current_avatar_thumbnail_image_url=None, current_avatar_tags=None, date_joined=None, developer_type=None, display_name=None, email_verified=None, fallback_avatar=None, friend_group_names=None, friend_key=None, friends=None, has_birthday=None, hide_content_filter_settings=None, user_language=None, user_language_code=None, has_email=None, has_logged_in_from_client=None, has_pending_email=None, home_location=None, id=None, is_adult=None, is_booping_enabled=True, is_friend=False, last_activity=None, last_login=None, last_mobile=None, last_platform=None, obfuscated_email=None, obfuscated_pending_email=None, oculus_id=None, google_id=None, google_details=None, pico_id=None, vive_id=None, offline_friends=None, online_friends=None, past_display_names=None, presence=None, platform_history=None, profile_pic_override=None, profile_pic_override_thumbnail=None, pronouns=None, pronouns_history=None, queued_instance=None, receive_mobile_invitations=None, state=None, status=None, status_description=None, status_first_time=None, status_history=None, steam_details=None, steam_id=None, tags=None, two_factor_auth_enabled=None, two_factor_auth_enabled_date=None, unsubscribe=None, updated_at=None, user_icon=None, username=None, local_vars_configuration=None):  # noqa: E501
        """CurrentUser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._accepted_tos_version = None
        self._accepted_privacy_version = None
        self._account_deletion_date = None
        self._account_deletion_log = None
        self._active_friends = None
        self._age_verification_status = None
        self._age_verified = None
        self._allow_avatar_copying = None
        self._auth_token = None
        self._badges = None
        self._bio = None
        self._bio_links = None
        self._content_filters = None
        self._current_avatar = None
        self._current_avatar_image_url = None
        self._current_avatar_thumbnail_image_url = None
        self._current_avatar_tags = None
        self._date_joined = None
        self._developer_type = None
        self._display_name = None
        self._email_verified = None
        self._fallback_avatar = None
        self._friend_group_names = None
        self._friend_key = None
        self._friends = None
        self._has_birthday = None
        self._hide_content_filter_settings = None
        self._user_language = None
        self._user_language_code = None
        self._has_email = None
        self._has_logged_in_from_client = None
        self._has_pending_email = None
        self._home_location = None
        self._id = None
        self._is_adult = None
        self._is_booping_enabled = None
        self._is_friend = None
        self._last_activity = None
        self._last_login = None
        self._last_mobile = None
        self._last_platform = None
        self._obfuscated_email = None
        self._obfuscated_pending_email = None
        self._oculus_id = None
        self._google_id = None
        self._google_details = None
        self._pico_id = None
        self._vive_id = None
        self._offline_friends = None
        self._online_friends = None
        self._past_display_names = None
        self._presence = None
        self._platform_history = None
        self._profile_pic_override = None
        self._profile_pic_override_thumbnail = None
        self._pronouns = None
        self._pronouns_history = None
        self._queued_instance = None
        self._receive_mobile_invitations = None
        self._state = None
        self._status = None
        self._status_description = None
        self._status_first_time = None
        self._status_history = None
        self._steam_details = None
        self._steam_id = None
        self._tags = None
        self._two_factor_auth_enabled = None
        self._two_factor_auth_enabled_date = None
        self._unsubscribe = None
        self._updated_at = None
        self._user_icon = None
        self._username = None
        self.discriminator = None

        self.accepted_tos_version = accepted_tos_version
        if accepted_privacy_version is not None:
            self.accepted_privacy_version = accepted_privacy_version
        self.account_deletion_date = account_deletion_date
        self.account_deletion_log = account_deletion_log
        if active_friends is not None:
            self.active_friends = active_friends
        self.age_verification_status = age_verification_status
        self.age_verified = age_verified
        self.allow_avatar_copying = allow_avatar_copying
        if auth_token is not None:
            self.auth_token = auth_token
        if badges is not None:
            self.badges = badges
        self.bio = bio
        self.bio_links = bio_links
        if content_filters is not None:
            self.content_filters = content_filters
        self.current_avatar = current_avatar
        self.current_avatar_image_url = current_avatar_image_url
        self.current_avatar_thumbnail_image_url = current_avatar_thumbnail_image_url
        self.current_avatar_tags = current_avatar_tags
        self.date_joined = date_joined
        self.developer_type = developer_type
        self.display_name = display_name
        self.email_verified = email_verified
        if fallback_avatar is not None:
            self.fallback_avatar = fallback_avatar
        self.friend_group_names = friend_group_names
        self.friend_key = friend_key
        self.friends = friends
        self.has_birthday = has_birthday
        if hide_content_filter_settings is not None:
            self.hide_content_filter_settings = hide_content_filter_settings
        self.user_language = user_language
        self.user_language_code = user_language_code
        self.has_email = has_email
        self.has_logged_in_from_client = has_logged_in_from_client
        self.has_pending_email = has_pending_email
        self.home_location = home_location
        self.id = id
        self.is_adult = is_adult
        if is_booping_enabled is not None:
            self.is_booping_enabled = is_booping_enabled
        self.is_friend = is_friend
        if last_activity is not None:
            self.last_activity = last_activity
        self.last_login = last_login
        self.last_mobile = last_mobile
        self.last_platform = last_platform
        self.obfuscated_email = obfuscated_email
        self.obfuscated_pending_email = obfuscated_pending_email
        self.oculus_id = oculus_id
        if google_id is not None:
            self.google_id = google_id
        if google_details is not None:
            self.google_details = google_details
        if pico_id is not None:
            self.pico_id = pico_id
        if vive_id is not None:
            self.vive_id = vive_id
        if offline_friends is not None:
            self.offline_friends = offline_friends
        if online_friends is not None:
            self.online_friends = online_friends
        self.past_display_names = past_display_names
        if presence is not None:
            self.presence = presence
        if platform_history is not None:
            self.platform_history = platform_history
        self.profile_pic_override = profile_pic_override
        self.profile_pic_override_thumbnail = profile_pic_override_thumbnail
        self.pronouns = pronouns
        self.pronouns_history = pronouns_history
        self.queued_instance = queued_instance
        if receive_mobile_invitations is not None:
            self.receive_mobile_invitations = receive_mobile_invitations
        self.state = state
        self.status = status
        self.status_description = status_description
        self.status_first_time = status_first_time
        self.status_history = status_history
        self.steam_details = steam_details
        self.steam_id = steam_id
        self.tags = tags
        self.two_factor_auth_enabled = two_factor_auth_enabled
        self.two_factor_auth_enabled_date = two_factor_auth_enabled_date
        self.unsubscribe = unsubscribe
        if updated_at is not None:
            self.updated_at = updated_at
        self.user_icon = user_icon
        if username is not None:
            self.username = username

    @property
    def accepted_tos_version(self):
        """Gets the accepted_tos_version of this CurrentUser.  # noqa: E501


        :return: The accepted_tos_version of this CurrentUser.  # noqa: E501
        :rtype: int
        """
        return self._accepted_tos_version

    @accepted_tos_version.setter
    def accepted_tos_version(self, accepted_tos_version):
        """Sets the accepted_tos_version of this CurrentUser.


        :param accepted_tos_version: The accepted_tos_version of this CurrentUser.  # noqa: E501
        :type accepted_tos_version: int
        """
        if self.local_vars_configuration.client_side_validation and accepted_tos_version is None:  # noqa: E501
            raise ValueError("Invalid value for `accepted_tos_version`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                accepted_tos_version is not None and accepted_tos_version < 0):  # noqa: E501
            raise ValueError("Invalid value for `accepted_tos_version`, must be a value greater than or equal to `0`")  # noqa: E501

        self._accepted_tos_version = accepted_tos_version

    @property
    def accepted_privacy_version(self):
        """Gets the accepted_privacy_version of this CurrentUser.  # noqa: E501


        :return: The accepted_privacy_version of this CurrentUser.  # noqa: E501
        :rtype: int
        """
        return self._accepted_privacy_version

    @accepted_privacy_version.setter
    def accepted_privacy_version(self, accepted_privacy_version):
        """Sets the accepted_privacy_version of this CurrentUser.


        :param accepted_privacy_version: The accepted_privacy_version of this CurrentUser.  # noqa: E501
        :type accepted_privacy_version: int
        """
        if (self.local_vars_configuration.client_side_validation and
                accepted_privacy_version is not None and accepted_privacy_version < 0):  # noqa: E501
            raise ValueError("Invalid value for `accepted_privacy_version`, must be a value greater than or equal to `0`")  # noqa: E501

        self._accepted_privacy_version = accepted_privacy_version

    @property
    def account_deletion_date(self):
        """Gets the account_deletion_date of this CurrentUser.  # noqa: E501


        :return: The account_deletion_date of this CurrentUser.  # noqa: E501
        :rtype: date
        """
        return self._account_deletion_date

    @account_deletion_date.setter
    def account_deletion_date(self, account_deletion_date):
        """Sets the account_deletion_date of this CurrentUser.


        :param account_deletion_date: The account_deletion_date of this CurrentUser.  # noqa: E501
        :type account_deletion_date: date
        """

        self._account_deletion_date = account_deletion_date

    @property
    def account_deletion_log(self):
        """Gets the account_deletion_log of this CurrentUser.  # noqa: E501

           # noqa: E501

        :return: The account_deletion_log of this CurrentUser.  # noqa: E501
        :rtype: list[AccountDeletionLog]
        """
        return self._account_deletion_log

    @account_deletion_log.setter
    def account_deletion_log(self, account_deletion_log):
        """Sets the account_deletion_log of this CurrentUser.

           # noqa: E501

        :param account_deletion_log: The account_deletion_log of this CurrentUser.  # noqa: E501
        :type account_deletion_log: list[AccountDeletionLog]
        """

        self._account_deletion_log = account_deletion_log

    @property
    def active_friends(self):
        """Gets the active_friends of this CurrentUser.  # noqa: E501

           # noqa: E501

        :return: The active_friends of this CurrentUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._active_friends

    @active_friends.setter
    def active_friends(self, active_friends):
        """Sets the active_friends of this CurrentUser.

           # noqa: E501

        :param active_friends: The active_friends of this CurrentUser.  # noqa: E501
        :type active_friends: list[str]
        """

        self._active_friends = active_friends

    @property
    def age_verification_status(self):
        """Gets the age_verification_status of this CurrentUser.  # noqa: E501


        :return: The age_verification_status of this CurrentUser.  # noqa: E501
        :rtype: AgeVerificationStatus
        """
        return self._age_verification_status

    @age_verification_status.setter
    def age_verification_status(self, age_verification_status):
        """Sets the age_verification_status of this CurrentUser.


        :param age_verification_status: The age_verification_status of this CurrentUser.  # noqa: E501
        :type age_verification_status: AgeVerificationStatus
        """
        if self.local_vars_configuration.client_side_validation and age_verification_status is None:  # noqa: E501
            raise ValueError("Invalid value for `age_verification_status`, must not be `None`")  # noqa: E501

        self._age_verification_status = age_verification_status

    @property
    def age_verified(self):
        """Gets the age_verified of this CurrentUser.  # noqa: E501

        `true` if, user is age verified (not 18+).  # noqa: E501

        :return: The age_verified of this CurrentUser.  # noqa: E501
        :rtype: bool
        """
        return self._age_verified

    @age_verified.setter
    def age_verified(self, age_verified):
        """Sets the age_verified of this CurrentUser.

        `true` if, user is age verified (not 18+).  # noqa: E501

        :param age_verified: The age_verified of this CurrentUser.  # noqa: E501
        :type age_verified: bool
        """
        if self.local_vars_configuration.client_side_validation and age_verified is None:  # noqa: E501
            raise ValueError("Invalid value for `age_verified`, must not be `None`")  # noqa: E501

        self._age_verified = age_verified

    @property
    def allow_avatar_copying(self):
        """Gets the allow_avatar_copying of this CurrentUser.  # noqa: E501


        :return: The allow_avatar_copying of this CurrentUser.  # noqa: E501
        :rtype: bool
        """
        return self._allow_avatar_copying

    @allow_avatar_copying.setter
    def allow_avatar_copying(self, allow_avatar_copying):
        """Sets the allow_avatar_copying of this CurrentUser.


        :param allow_avatar_copying: The allow_avatar_copying of this CurrentUser.  # noqa: E501
        :type allow_avatar_copying: bool
        """
        if self.local_vars_configuration.client_side_validation and allow_avatar_copying is None:  # noqa: E501
            raise ValueError("Invalid value for `allow_avatar_copying`, must not be `None`")  # noqa: E501

        self._allow_avatar_copying = allow_avatar_copying

    @property
    def auth_token(self):
        """Gets the auth_token of this CurrentUser.  # noqa: E501

        The auth token for NEWLY REGISTERED ACCOUNTS ONLY (/auth/register)  # noqa: E501

        :return: The auth_token of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token):
        """Sets the auth_token of this CurrentUser.

        The auth token for NEWLY REGISTERED ACCOUNTS ONLY (/auth/register)  # noqa: E501

        :param auth_token: The auth_token of this CurrentUser.  # noqa: E501
        :type auth_token: str
        """

        self._auth_token = auth_token

    @property
    def badges(self):
        """Gets the badges of this CurrentUser.  # noqa: E501

           # noqa: E501

        :return: The badges of this CurrentUser.  # noqa: E501
        :rtype: list[Badge]
        """
        return self._badges

    @badges.setter
    def badges(self, badges):
        """Sets the badges of this CurrentUser.

           # noqa: E501

        :param badges: The badges of this CurrentUser.  # noqa: E501
        :type badges: list[Badge]
        """

        self._badges = badges

    @property
    def bio(self):
        """Gets the bio of this CurrentUser.  # noqa: E501


        :return: The bio of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this CurrentUser.


        :param bio: The bio of this CurrentUser.  # noqa: E501
        :type bio: str
        """
        if self.local_vars_configuration.client_side_validation and bio is None:  # noqa: E501
            raise ValueError("Invalid value for `bio`, must not be `None`")  # noqa: E501

        self._bio = bio

    @property
    def bio_links(self):
        """Gets the bio_links of this CurrentUser.  # noqa: E501

           # noqa: E501

        :return: The bio_links of this CurrentUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._bio_links

    @bio_links.setter
    def bio_links(self, bio_links):
        """Sets the bio_links of this CurrentUser.

           # noqa: E501

        :param bio_links: The bio_links of this CurrentUser.  # noqa: E501
        :type bio_links: list[str]
        """
        if self.local_vars_configuration.client_side_validation and bio_links is None:  # noqa: E501
            raise ValueError("Invalid value for `bio_links`, must not be `None`")  # noqa: E501

        self._bio_links = bio_links

    @property
    def content_filters(self):
        """Gets the content_filters of this CurrentUser.  # noqa: E501

        These tags begin with `content_` and control content gating  # noqa: E501

        :return: The content_filters of this CurrentUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._content_filters

    @content_filters.setter
    def content_filters(self, content_filters):
        """Sets the content_filters of this CurrentUser.

        These tags begin with `content_` and control content gating  # noqa: E501

        :param content_filters: The content_filters of this CurrentUser.  # noqa: E501
        :type content_filters: list[str]
        """

        self._content_filters = content_filters

    @property
    def current_avatar(self):
        """Gets the current_avatar of this CurrentUser.  # noqa: E501


        :return: The current_avatar of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._current_avatar

    @current_avatar.setter
    def current_avatar(self, current_avatar):
        """Sets the current_avatar of this CurrentUser.


        :param current_avatar: The current_avatar of this CurrentUser.  # noqa: E501
        :type current_avatar: str
        """
        if self.local_vars_configuration.client_side_validation and current_avatar is None:  # noqa: E501
            raise ValueError("Invalid value for `current_avatar`, must not be `None`")  # noqa: E501

        self._current_avatar = current_avatar

    @property
    def current_avatar_image_url(self):
        """Gets the current_avatar_image_url of this CurrentUser.  # noqa: E501

        When profilePicOverride is not empty, use it instead.  # noqa: E501

        :return: The current_avatar_image_url of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._current_avatar_image_url

    @current_avatar_image_url.setter
    def current_avatar_image_url(self, current_avatar_image_url):
        """Sets the current_avatar_image_url of this CurrentUser.

        When profilePicOverride is not empty, use it instead.  # noqa: E501

        :param current_avatar_image_url: The current_avatar_image_url of this CurrentUser.  # noqa: E501
        :type current_avatar_image_url: str
        """
        if self.local_vars_configuration.client_side_validation and current_avatar_image_url is None:  # noqa: E501
            raise ValueError("Invalid value for `current_avatar_image_url`, must not be `None`")  # noqa: E501

        self._current_avatar_image_url = current_avatar_image_url

    @property
    def current_avatar_thumbnail_image_url(self):
        """Gets the current_avatar_thumbnail_image_url of this CurrentUser.  # noqa: E501

        When profilePicOverride is not empty, use it instead.  # noqa: E501

        :return: The current_avatar_thumbnail_image_url of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._current_avatar_thumbnail_image_url

    @current_avatar_thumbnail_image_url.setter
    def current_avatar_thumbnail_image_url(self, current_avatar_thumbnail_image_url):
        """Sets the current_avatar_thumbnail_image_url of this CurrentUser.

        When profilePicOverride is not empty, use it instead.  # noqa: E501

        :param current_avatar_thumbnail_image_url: The current_avatar_thumbnail_image_url of this CurrentUser.  # noqa: E501
        :type current_avatar_thumbnail_image_url: str
        """
        if self.local_vars_configuration.client_side_validation and current_avatar_thumbnail_image_url is None:  # noqa: E501
            raise ValueError("Invalid value for `current_avatar_thumbnail_image_url`, must not be `None`")  # noqa: E501

        self._current_avatar_thumbnail_image_url = current_avatar_thumbnail_image_url

    @property
    def current_avatar_tags(self):
        """Gets the current_avatar_tags of this CurrentUser.  # noqa: E501


        :return: The current_avatar_tags of this CurrentUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._current_avatar_tags

    @current_avatar_tags.setter
    def current_avatar_tags(self, current_avatar_tags):
        """Sets the current_avatar_tags of this CurrentUser.


        :param current_avatar_tags: The current_avatar_tags of this CurrentUser.  # noqa: E501
        :type current_avatar_tags: list[str]
        """
        if self.local_vars_configuration.client_side_validation and current_avatar_tags is None:  # noqa: E501
            raise ValueError("Invalid value for `current_avatar_tags`, must not be `None`")  # noqa: E501

        self._current_avatar_tags = current_avatar_tags

    @property
    def date_joined(self):
        """Gets the date_joined of this CurrentUser.  # noqa: E501


        :return: The date_joined of this CurrentUser.  # noqa: E501
        :rtype: date
        """
        return self._date_joined

    @date_joined.setter
    def date_joined(self, date_joined):
        """Sets the date_joined of this CurrentUser.


        :param date_joined: The date_joined of this CurrentUser.  # noqa: E501
        :type date_joined: date
        """
        if self.local_vars_configuration.client_side_validation and date_joined is None:  # noqa: E501
            raise ValueError("Invalid value for `date_joined`, must not be `None`")  # noqa: E501

        self._date_joined = date_joined

    @property
    def developer_type(self):
        """Gets the developer_type of this CurrentUser.  # noqa: E501


        :return: The developer_type of this CurrentUser.  # noqa: E501
        :rtype: DeveloperType
        """
        return self._developer_type

    @developer_type.setter
    def developer_type(self, developer_type):
        """Sets the developer_type of this CurrentUser.


        :param developer_type: The developer_type of this CurrentUser.  # noqa: E501
        :type developer_type: DeveloperType
        """
        if self.local_vars_configuration.client_side_validation and developer_type is None:  # noqa: E501
            raise ValueError("Invalid value for `developer_type`, must not be `None`")  # noqa: E501

        self._developer_type = developer_type

    @property
    def display_name(self):
        """Gets the display_name of this CurrentUser.  # noqa: E501


        :return: The display_name of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CurrentUser.


        :param display_name: The display_name of this CurrentUser.  # noqa: E501
        :type display_name: str
        """
        if self.local_vars_configuration.client_side_validation and display_name is None:  # noqa: E501
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def email_verified(self):
        """Gets the email_verified of this CurrentUser.  # noqa: E501


        :return: The email_verified of this CurrentUser.  # noqa: E501
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """Sets the email_verified of this CurrentUser.


        :param email_verified: The email_verified of this CurrentUser.  # noqa: E501
        :type email_verified: bool
        """
        if self.local_vars_configuration.client_side_validation and email_verified is None:  # noqa: E501
            raise ValueError("Invalid value for `email_verified`, must not be `None`")  # noqa: E501

        self._email_verified = email_verified

    @property
    def fallback_avatar(self):
        """Gets the fallback_avatar of this CurrentUser.  # noqa: E501


        :return: The fallback_avatar of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._fallback_avatar

    @fallback_avatar.setter
    def fallback_avatar(self, fallback_avatar):
        """Sets the fallback_avatar of this CurrentUser.


        :param fallback_avatar: The fallback_avatar of this CurrentUser.  # noqa: E501
        :type fallback_avatar: str
        """

        self._fallback_avatar = fallback_avatar

    @property
    def friend_group_names(self):
        """Gets the friend_group_names of this CurrentUser.  # noqa: E501

        Always empty array.  # noqa: E501

        :return: The friend_group_names of this CurrentUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._friend_group_names

    @friend_group_names.setter
    def friend_group_names(self, friend_group_names):
        """Sets the friend_group_names of this CurrentUser.

        Always empty array.  # noqa: E501

        :param friend_group_names: The friend_group_names of this CurrentUser.  # noqa: E501
        :type friend_group_names: list[str]
        """
        if self.local_vars_configuration.client_side_validation and friend_group_names is None:  # noqa: E501
            raise ValueError("Invalid value for `friend_group_names`, must not be `None`")  # noqa: E501

        self._friend_group_names = friend_group_names

    @property
    def friend_key(self):
        """Gets the friend_key of this CurrentUser.  # noqa: E501


        :return: The friend_key of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._friend_key

    @friend_key.setter
    def friend_key(self, friend_key):
        """Sets the friend_key of this CurrentUser.


        :param friend_key: The friend_key of this CurrentUser.  # noqa: E501
        :type friend_key: str
        """
        if self.local_vars_configuration.client_side_validation and friend_key is None:  # noqa: E501
            raise ValueError("Invalid value for `friend_key`, must not be `None`")  # noqa: E501

        self._friend_key = friend_key

    @property
    def friends(self):
        """Gets the friends of this CurrentUser.  # noqa: E501


        :return: The friends of this CurrentUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._friends

    @friends.setter
    def friends(self, friends):
        """Sets the friends of this CurrentUser.


        :param friends: The friends of this CurrentUser.  # noqa: E501
        :type friends: list[str]
        """
        if self.local_vars_configuration.client_side_validation and friends is None:  # noqa: E501
            raise ValueError("Invalid value for `friends`, must not be `None`")  # noqa: E501

        self._friends = friends

    @property
    def has_birthday(self):
        """Gets the has_birthday of this CurrentUser.  # noqa: E501


        :return: The has_birthday of this CurrentUser.  # noqa: E501
        :rtype: bool
        """
        return self._has_birthday

    @has_birthday.setter
    def has_birthday(self, has_birthday):
        """Sets the has_birthday of this CurrentUser.


        :param has_birthday: The has_birthday of this CurrentUser.  # noqa: E501
        :type has_birthday: bool
        """
        if self.local_vars_configuration.client_side_validation and has_birthday is None:  # noqa: E501
            raise ValueError("Invalid value for `has_birthday`, must not be `None`")  # noqa: E501

        self._has_birthday = has_birthday

    @property
    def hide_content_filter_settings(self):
        """Gets the hide_content_filter_settings of this CurrentUser.  # noqa: E501


        :return: The hide_content_filter_settings of this CurrentUser.  # noqa: E501
        :rtype: bool
        """
        return self._hide_content_filter_settings

    @hide_content_filter_settings.setter
    def hide_content_filter_settings(self, hide_content_filter_settings):
        """Sets the hide_content_filter_settings of this CurrentUser.


        :param hide_content_filter_settings: The hide_content_filter_settings of this CurrentUser.  # noqa: E501
        :type hide_content_filter_settings: bool
        """

        self._hide_content_filter_settings = hide_content_filter_settings

    @property
    def user_language(self):
        """Gets the user_language of this CurrentUser.  # noqa: E501


        :return: The user_language of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._user_language

    @user_language.setter
    def user_language(self, user_language):
        """Sets the user_language of this CurrentUser.


        :param user_language: The user_language of this CurrentUser.  # noqa: E501
        :type user_language: str
        """

        self._user_language = user_language

    @property
    def user_language_code(self):
        """Gets the user_language_code of this CurrentUser.  # noqa: E501


        :return: The user_language_code of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._user_language_code

    @user_language_code.setter
    def user_language_code(self, user_language_code):
        """Sets the user_language_code of this CurrentUser.


        :param user_language_code: The user_language_code of this CurrentUser.  # noqa: E501
        :type user_language_code: str
        """

        self._user_language_code = user_language_code

    @property
    def has_email(self):
        """Gets the has_email of this CurrentUser.  # noqa: E501


        :return: The has_email of this CurrentUser.  # noqa: E501
        :rtype: bool
        """
        return self._has_email

    @has_email.setter
    def has_email(self, has_email):
        """Sets the has_email of this CurrentUser.


        :param has_email: The has_email of this CurrentUser.  # noqa: E501
        :type has_email: bool
        """
        if self.local_vars_configuration.client_side_validation and has_email is None:  # noqa: E501
            raise ValueError("Invalid value for `has_email`, must not be `None`")  # noqa: E501

        self._has_email = has_email

    @property
    def has_logged_in_from_client(self):
        """Gets the has_logged_in_from_client of this CurrentUser.  # noqa: E501


        :return: The has_logged_in_from_client of this CurrentUser.  # noqa: E501
        :rtype: bool
        """
        return self._has_logged_in_from_client

    @has_logged_in_from_client.setter
    def has_logged_in_from_client(self, has_logged_in_from_client):
        """Sets the has_logged_in_from_client of this CurrentUser.


        :param has_logged_in_from_client: The has_logged_in_from_client of this CurrentUser.  # noqa: E501
        :type has_logged_in_from_client: bool
        """
        if self.local_vars_configuration.client_side_validation and has_logged_in_from_client is None:  # noqa: E501
            raise ValueError("Invalid value for `has_logged_in_from_client`, must not be `None`")  # noqa: E501

        self._has_logged_in_from_client = has_logged_in_from_client

    @property
    def has_pending_email(self):
        """Gets the has_pending_email of this CurrentUser.  # noqa: E501


        :return: The has_pending_email of this CurrentUser.  # noqa: E501
        :rtype: bool
        """
        return self._has_pending_email

    @has_pending_email.setter
    def has_pending_email(self, has_pending_email):
        """Sets the has_pending_email of this CurrentUser.


        :param has_pending_email: The has_pending_email of this CurrentUser.  # noqa: E501
        :type has_pending_email: bool
        """
        if self.local_vars_configuration.client_side_validation and has_pending_email is None:  # noqa: E501
            raise ValueError("Invalid value for `has_pending_email`, must not be `None`")  # noqa: E501

        self._has_pending_email = has_pending_email

    @property
    def home_location(self):
        """Gets the home_location of this CurrentUser.  # noqa: E501

        WorldID be \"offline\" on User profiles if you are not friends with that user.  # noqa: E501

        :return: The home_location of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._home_location

    @home_location.setter
    def home_location(self, home_location):
        """Sets the home_location of this CurrentUser.

        WorldID be \"offline\" on User profiles if you are not friends with that user.  # noqa: E501

        :param home_location: The home_location of this CurrentUser.  # noqa: E501
        :type home_location: str
        """
        if self.local_vars_configuration.client_side_validation and home_location is None:  # noqa: E501
            raise ValueError("Invalid value for `home_location`, must not be `None`")  # noqa: E501

        self._home_location = home_location

    @property
    def id(self):
        """Gets the id of this CurrentUser.  # noqa: E501

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :return: The id of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CurrentUser.

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :param id: The id of this CurrentUser.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_adult(self):
        """Gets the is_adult of this CurrentUser.  # noqa: E501


        :return: The is_adult of this CurrentUser.  # noqa: E501
        :rtype: bool
        """
        return self._is_adult

    @is_adult.setter
    def is_adult(self, is_adult):
        """Sets the is_adult of this CurrentUser.


        :param is_adult: The is_adult of this CurrentUser.  # noqa: E501
        :type is_adult: bool
        """
        if self.local_vars_configuration.client_side_validation and is_adult is None:  # noqa: E501
            raise ValueError("Invalid value for `is_adult`, must not be `None`")  # noqa: E501

        self._is_adult = is_adult

    @property
    def is_booping_enabled(self):
        """Gets the is_booping_enabled of this CurrentUser.  # noqa: E501


        :return: The is_booping_enabled of this CurrentUser.  # noqa: E501
        :rtype: bool
        """
        return self._is_booping_enabled

    @is_booping_enabled.setter
    def is_booping_enabled(self, is_booping_enabled):
        """Sets the is_booping_enabled of this CurrentUser.


        :param is_booping_enabled: The is_booping_enabled of this CurrentUser.  # noqa: E501
        :type is_booping_enabled: bool
        """

        self._is_booping_enabled = is_booping_enabled

    @property
    def is_friend(self):
        """Gets the is_friend of this CurrentUser.  # noqa: E501


        :return: The is_friend of this CurrentUser.  # noqa: E501
        :rtype: bool
        """
        return self._is_friend

    @is_friend.setter
    def is_friend(self, is_friend):
        """Sets the is_friend of this CurrentUser.


        :param is_friend: The is_friend of this CurrentUser.  # noqa: E501
        :type is_friend: bool
        """
        if self.local_vars_configuration.client_side_validation and is_friend is None:  # noqa: E501
            raise ValueError("Invalid value for `is_friend`, must not be `None`")  # noqa: E501

        self._is_friend = is_friend

    @property
    def last_activity(self):
        """Gets the last_activity of this CurrentUser.  # noqa: E501


        :return: The last_activity of this CurrentUser.  # noqa: E501
        :rtype: datetime
        """
        return self._last_activity

    @last_activity.setter
    def last_activity(self, last_activity):
        """Sets the last_activity of this CurrentUser.


        :param last_activity: The last_activity of this CurrentUser.  # noqa: E501
        :type last_activity: datetime
        """

        self._last_activity = last_activity

    @property
    def last_login(self):
        """Gets the last_login of this CurrentUser.  # noqa: E501


        :return: The last_login of this CurrentUser.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this CurrentUser.


        :param last_login: The last_login of this CurrentUser.  # noqa: E501
        :type last_login: datetime
        """
        if self.local_vars_configuration.client_side_validation and last_login is None:  # noqa: E501
            raise ValueError("Invalid value for `last_login`, must not be `None`")  # noqa: E501

        self._last_login = last_login

    @property
    def last_mobile(self):
        """Gets the last_mobile of this CurrentUser.  # noqa: E501


        :return: The last_mobile of this CurrentUser.  # noqa: E501
        :rtype: datetime
        """
        return self._last_mobile

    @last_mobile.setter
    def last_mobile(self, last_mobile):
        """Sets the last_mobile of this CurrentUser.


        :param last_mobile: The last_mobile of this CurrentUser.  # noqa: E501
        :type last_mobile: datetime
        """

        self._last_mobile = last_mobile

    @property
    def last_platform(self):
        """Gets the last_platform of this CurrentUser.  # noqa: E501

        This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`.  # noqa: E501

        :return: The last_platform of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._last_platform

    @last_platform.setter
    def last_platform(self, last_platform):
        """Sets the last_platform of this CurrentUser.

        This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`.  # noqa: E501

        :param last_platform: The last_platform of this CurrentUser.  # noqa: E501
        :type last_platform: str
        """
        if self.local_vars_configuration.client_side_validation and last_platform is None:  # noqa: E501
            raise ValueError("Invalid value for `last_platform`, must not be `None`")  # noqa: E501

        self._last_platform = last_platform

    @property
    def obfuscated_email(self):
        """Gets the obfuscated_email of this CurrentUser.  # noqa: E501


        :return: The obfuscated_email of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._obfuscated_email

    @obfuscated_email.setter
    def obfuscated_email(self, obfuscated_email):
        """Sets the obfuscated_email of this CurrentUser.


        :param obfuscated_email: The obfuscated_email of this CurrentUser.  # noqa: E501
        :type obfuscated_email: str
        """
        if self.local_vars_configuration.client_side_validation and obfuscated_email is None:  # noqa: E501
            raise ValueError("Invalid value for `obfuscated_email`, must not be `None`")  # noqa: E501

        self._obfuscated_email = obfuscated_email

    @property
    def obfuscated_pending_email(self):
        """Gets the obfuscated_pending_email of this CurrentUser.  # noqa: E501


        :return: The obfuscated_pending_email of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._obfuscated_pending_email

    @obfuscated_pending_email.setter
    def obfuscated_pending_email(self, obfuscated_pending_email):
        """Sets the obfuscated_pending_email of this CurrentUser.


        :param obfuscated_pending_email: The obfuscated_pending_email of this CurrentUser.  # noqa: E501
        :type obfuscated_pending_email: str
        """
        if self.local_vars_configuration.client_side_validation and obfuscated_pending_email is None:  # noqa: E501
            raise ValueError("Invalid value for `obfuscated_pending_email`, must not be `None`")  # noqa: E501

        self._obfuscated_pending_email = obfuscated_pending_email

    @property
    def oculus_id(self):
        """Gets the oculus_id of this CurrentUser.  # noqa: E501


        :return: The oculus_id of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._oculus_id

    @oculus_id.setter
    def oculus_id(self, oculus_id):
        """Sets the oculus_id of this CurrentUser.


        :param oculus_id: The oculus_id of this CurrentUser.  # noqa: E501
        :type oculus_id: str
        """
        if self.local_vars_configuration.client_side_validation and oculus_id is None:  # noqa: E501
            raise ValueError("Invalid value for `oculus_id`, must not be `None`")  # noqa: E501

        self._oculus_id = oculus_id

    @property
    def google_id(self):
        """Gets the google_id of this CurrentUser.  # noqa: E501


        :return: The google_id of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._google_id

    @google_id.setter
    def google_id(self, google_id):
        """Sets the google_id of this CurrentUser.


        :param google_id: The google_id of this CurrentUser.  # noqa: E501
        :type google_id: str
        """

        self._google_id = google_id

    @property
    def google_details(self):
        """Gets the google_details of this CurrentUser.  # noqa: E501


        :return: The google_details of this CurrentUser.  # noqa: E501
        :rtype: object
        """
        return self._google_details

    @google_details.setter
    def google_details(self, google_details):
        """Sets the google_details of this CurrentUser.


        :param google_details: The google_details of this CurrentUser.  # noqa: E501
        :type google_details: object
        """

        self._google_details = google_details

    @property
    def pico_id(self):
        """Gets the pico_id of this CurrentUser.  # noqa: E501


        :return: The pico_id of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._pico_id

    @pico_id.setter
    def pico_id(self, pico_id):
        """Sets the pico_id of this CurrentUser.


        :param pico_id: The pico_id of this CurrentUser.  # noqa: E501
        :type pico_id: str
        """

        self._pico_id = pico_id

    @property
    def vive_id(self):
        """Gets the vive_id of this CurrentUser.  # noqa: E501


        :return: The vive_id of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._vive_id

    @vive_id.setter
    def vive_id(self, vive_id):
        """Sets the vive_id of this CurrentUser.


        :param vive_id: The vive_id of this CurrentUser.  # noqa: E501
        :type vive_id: str
        """

        self._vive_id = vive_id

    @property
    def offline_friends(self):
        """Gets the offline_friends of this CurrentUser.  # noqa: E501


        :return: The offline_friends of this CurrentUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._offline_friends

    @offline_friends.setter
    def offline_friends(self, offline_friends):
        """Sets the offline_friends of this CurrentUser.


        :param offline_friends: The offline_friends of this CurrentUser.  # noqa: E501
        :type offline_friends: list[str]
        """

        self._offline_friends = offline_friends

    @property
    def online_friends(self):
        """Gets the online_friends of this CurrentUser.  # noqa: E501


        :return: The online_friends of this CurrentUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._online_friends

    @online_friends.setter
    def online_friends(self, online_friends):
        """Sets the online_friends of this CurrentUser.


        :param online_friends: The online_friends of this CurrentUser.  # noqa: E501
        :type online_friends: list[str]
        """

        self._online_friends = online_friends

    @property
    def past_display_names(self):
        """Gets the past_display_names of this CurrentUser.  # noqa: E501

           # noqa: E501

        :return: The past_display_names of this CurrentUser.  # noqa: E501
        :rtype: list[PastDisplayName]
        """
        return self._past_display_names

    @past_display_names.setter
    def past_display_names(self, past_display_names):
        """Sets the past_display_names of this CurrentUser.

           # noqa: E501

        :param past_display_names: The past_display_names of this CurrentUser.  # noqa: E501
        :type past_display_names: list[PastDisplayName]
        """
        if self.local_vars_configuration.client_side_validation and past_display_names is None:  # noqa: E501
            raise ValueError("Invalid value for `past_display_names`, must not be `None`")  # noqa: E501

        self._past_display_names = past_display_names

    @property
    def presence(self):
        """Gets the presence of this CurrentUser.  # noqa: E501


        :return: The presence of this CurrentUser.  # noqa: E501
        :rtype: CurrentUserPresence
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """Sets the presence of this CurrentUser.


        :param presence: The presence of this CurrentUser.  # noqa: E501
        :type presence: CurrentUserPresence
        """

        self._presence = presence

    @property
    def platform_history(self):
        """Gets the platform_history of this CurrentUser.  # noqa: E501


        :return: The platform_history of this CurrentUser.  # noqa: E501
        :rtype: list[CurrentUserPlatformHistoryInner]
        """
        return self._platform_history

    @platform_history.setter
    def platform_history(self, platform_history):
        """Sets the platform_history of this CurrentUser.


        :param platform_history: The platform_history of this CurrentUser.  # noqa: E501
        :type platform_history: list[CurrentUserPlatformHistoryInner]
        """

        self._platform_history = platform_history

    @property
    def profile_pic_override(self):
        """Gets the profile_pic_override of this CurrentUser.  # noqa: E501


        :return: The profile_pic_override of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._profile_pic_override

    @profile_pic_override.setter
    def profile_pic_override(self, profile_pic_override):
        """Sets the profile_pic_override of this CurrentUser.


        :param profile_pic_override: The profile_pic_override of this CurrentUser.  # noqa: E501
        :type profile_pic_override: str
        """
        if self.local_vars_configuration.client_side_validation and profile_pic_override is None:  # noqa: E501
            raise ValueError("Invalid value for `profile_pic_override`, must not be `None`")  # noqa: E501

        self._profile_pic_override = profile_pic_override

    @property
    def profile_pic_override_thumbnail(self):
        """Gets the profile_pic_override_thumbnail of this CurrentUser.  # noqa: E501


        :return: The profile_pic_override_thumbnail of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._profile_pic_override_thumbnail

    @profile_pic_override_thumbnail.setter
    def profile_pic_override_thumbnail(self, profile_pic_override_thumbnail):
        """Sets the profile_pic_override_thumbnail of this CurrentUser.


        :param profile_pic_override_thumbnail: The profile_pic_override_thumbnail of this CurrentUser.  # noqa: E501
        :type profile_pic_override_thumbnail: str
        """
        if self.local_vars_configuration.client_side_validation and profile_pic_override_thumbnail is None:  # noqa: E501
            raise ValueError("Invalid value for `profile_pic_override_thumbnail`, must not be `None`")  # noqa: E501

        self._profile_pic_override_thumbnail = profile_pic_override_thumbnail

    @property
    def pronouns(self):
        """Gets the pronouns of this CurrentUser.  # noqa: E501


        :return: The pronouns of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._pronouns

    @pronouns.setter
    def pronouns(self, pronouns):
        """Sets the pronouns of this CurrentUser.


        :param pronouns: The pronouns of this CurrentUser.  # noqa: E501
        :type pronouns: str
        """
        if self.local_vars_configuration.client_side_validation and pronouns is None:  # noqa: E501
            raise ValueError("Invalid value for `pronouns`, must not be `None`")  # noqa: E501

        self._pronouns = pronouns

    @property
    def pronouns_history(self):
        """Gets the pronouns_history of this CurrentUser.  # noqa: E501


        :return: The pronouns_history of this CurrentUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._pronouns_history

    @pronouns_history.setter
    def pronouns_history(self, pronouns_history):
        """Sets the pronouns_history of this CurrentUser.


        :param pronouns_history: The pronouns_history of this CurrentUser.  # noqa: E501
        :type pronouns_history: list[str]
        """
        if self.local_vars_configuration.client_side_validation and pronouns_history is None:  # noqa: E501
            raise ValueError("Invalid value for `pronouns_history`, must not be `None`")  # noqa: E501

        self._pronouns_history = pronouns_history

    @property
    def queued_instance(self):
        """Gets the queued_instance of this CurrentUser.  # noqa: E501


        :return: The queued_instance of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._queued_instance

    @queued_instance.setter
    def queued_instance(self, queued_instance):
        """Sets the queued_instance of this CurrentUser.


        :param queued_instance: The queued_instance of this CurrentUser.  # noqa: E501
        :type queued_instance: str
        """

        self._queued_instance = queued_instance

    @property
    def receive_mobile_invitations(self):
        """Gets the receive_mobile_invitations of this CurrentUser.  # noqa: E501


        :return: The receive_mobile_invitations of this CurrentUser.  # noqa: E501
        :rtype: bool
        """
        return self._receive_mobile_invitations

    @receive_mobile_invitations.setter
    def receive_mobile_invitations(self, receive_mobile_invitations):
        """Sets the receive_mobile_invitations of this CurrentUser.


        :param receive_mobile_invitations: The receive_mobile_invitations of this CurrentUser.  # noqa: E501
        :type receive_mobile_invitations: bool
        """

        self._receive_mobile_invitations = receive_mobile_invitations

    @property
    def state(self):
        """Gets the state of this CurrentUser.  # noqa: E501


        :return: The state of this CurrentUser.  # noqa: E501
        :rtype: UserState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CurrentUser.


        :param state: The state of this CurrentUser.  # noqa: E501
        :type state: UserState
        """
        if self.local_vars_configuration.client_side_validation and state is None:  # noqa: E501
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def status(self):
        """Gets the status of this CurrentUser.  # noqa: E501


        :return: The status of this CurrentUser.  # noqa: E501
        :rtype: UserStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CurrentUser.


        :param status: The status of this CurrentUser.  # noqa: E501
        :type status: UserStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_description(self):
        """Gets the status_description of this CurrentUser.  # noqa: E501


        :return: The status_description of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._status_description

    @status_description.setter
    def status_description(self, status_description):
        """Sets the status_description of this CurrentUser.


        :param status_description: The status_description of this CurrentUser.  # noqa: E501
        :type status_description: str
        """
        if self.local_vars_configuration.client_side_validation and status_description is None:  # noqa: E501
            raise ValueError("Invalid value for `status_description`, must not be `None`")  # noqa: E501

        self._status_description = status_description

    @property
    def status_first_time(self):
        """Gets the status_first_time of this CurrentUser.  # noqa: E501


        :return: The status_first_time of this CurrentUser.  # noqa: E501
        :rtype: bool
        """
        return self._status_first_time

    @status_first_time.setter
    def status_first_time(self, status_first_time):
        """Sets the status_first_time of this CurrentUser.


        :param status_first_time: The status_first_time of this CurrentUser.  # noqa: E501
        :type status_first_time: bool
        """
        if self.local_vars_configuration.client_side_validation and status_first_time is None:  # noqa: E501
            raise ValueError("Invalid value for `status_first_time`, must not be `None`")  # noqa: E501

        self._status_first_time = status_first_time

    @property
    def status_history(self):
        """Gets the status_history of this CurrentUser.  # noqa: E501


        :return: The status_history of this CurrentUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._status_history

    @status_history.setter
    def status_history(self, status_history):
        """Sets the status_history of this CurrentUser.


        :param status_history: The status_history of this CurrentUser.  # noqa: E501
        :type status_history: list[str]
        """
        if self.local_vars_configuration.client_side_validation and status_history is None:  # noqa: E501
            raise ValueError("Invalid value for `status_history`, must not be `None`")  # noqa: E501

        self._status_history = status_history

    @property
    def steam_details(self):
        """Gets the steam_details of this CurrentUser.  # noqa: E501


        :return: The steam_details of this CurrentUser.  # noqa: E501
        :rtype: object
        """
        return self._steam_details

    @steam_details.setter
    def steam_details(self, steam_details):
        """Sets the steam_details of this CurrentUser.


        :param steam_details: The steam_details of this CurrentUser.  # noqa: E501
        :type steam_details: object
        """
        if self.local_vars_configuration.client_side_validation and steam_details is None:  # noqa: E501
            raise ValueError("Invalid value for `steam_details`, must not be `None`")  # noqa: E501

        self._steam_details = steam_details

    @property
    def steam_id(self):
        """Gets the steam_id of this CurrentUser.  # noqa: E501


        :return: The steam_id of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._steam_id

    @steam_id.setter
    def steam_id(self, steam_id):
        """Sets the steam_id of this CurrentUser.


        :param steam_id: The steam_id of this CurrentUser.  # noqa: E501
        :type steam_id: str
        """
        if self.local_vars_configuration.client_side_validation and steam_id is None:  # noqa: E501
            raise ValueError("Invalid value for `steam_id`, must not be `None`")  # noqa: E501

        self._steam_id = steam_id

    @property
    def tags(self):
        """Gets the tags of this CurrentUser.  # noqa: E501


        :return: The tags of this CurrentUser.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CurrentUser.


        :param tags: The tags of this CurrentUser.  # noqa: E501
        :type tags: list[str]
        """
        if self.local_vars_configuration.client_side_validation and tags is None:  # noqa: E501
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def two_factor_auth_enabled(self):
        """Gets the two_factor_auth_enabled of this CurrentUser.  # noqa: E501


        :return: The two_factor_auth_enabled of this CurrentUser.  # noqa: E501
        :rtype: bool
        """
        return self._two_factor_auth_enabled

    @two_factor_auth_enabled.setter
    def two_factor_auth_enabled(self, two_factor_auth_enabled):
        """Sets the two_factor_auth_enabled of this CurrentUser.


        :param two_factor_auth_enabled: The two_factor_auth_enabled of this CurrentUser.  # noqa: E501
        :type two_factor_auth_enabled: bool
        """
        if self.local_vars_configuration.client_side_validation and two_factor_auth_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `two_factor_auth_enabled`, must not be `None`")  # noqa: E501

        self._two_factor_auth_enabled = two_factor_auth_enabled

    @property
    def two_factor_auth_enabled_date(self):
        """Gets the two_factor_auth_enabled_date of this CurrentUser.  # noqa: E501


        :return: The two_factor_auth_enabled_date of this CurrentUser.  # noqa: E501
        :rtype: datetime
        """
        return self._two_factor_auth_enabled_date

    @two_factor_auth_enabled_date.setter
    def two_factor_auth_enabled_date(self, two_factor_auth_enabled_date):
        """Sets the two_factor_auth_enabled_date of this CurrentUser.


        :param two_factor_auth_enabled_date: The two_factor_auth_enabled_date of this CurrentUser.  # noqa: E501
        :type two_factor_auth_enabled_date: datetime
        """

        self._two_factor_auth_enabled_date = two_factor_auth_enabled_date

    @property
    def unsubscribe(self):
        """Gets the unsubscribe of this CurrentUser.  # noqa: E501


        :return: The unsubscribe of this CurrentUser.  # noqa: E501
        :rtype: bool
        """
        return self._unsubscribe

    @unsubscribe.setter
    def unsubscribe(self, unsubscribe):
        """Sets the unsubscribe of this CurrentUser.


        :param unsubscribe: The unsubscribe of this CurrentUser.  # noqa: E501
        :type unsubscribe: bool
        """
        if self.local_vars_configuration.client_side_validation and unsubscribe is None:  # noqa: E501
            raise ValueError("Invalid value for `unsubscribe`, must not be `None`")  # noqa: E501

        self._unsubscribe = unsubscribe

    @property
    def updated_at(self):
        """Gets the updated_at of this CurrentUser.  # noqa: E501


        :return: The updated_at of this CurrentUser.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CurrentUser.


        :param updated_at: The updated_at of this CurrentUser.  # noqa: E501
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user_icon(self):
        """Gets the user_icon of this CurrentUser.  # noqa: E501


        :return: The user_icon of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._user_icon

    @user_icon.setter
    def user_icon(self, user_icon):
        """Sets the user_icon of this CurrentUser.


        :param user_icon: The user_icon of this CurrentUser.  # noqa: E501
        :type user_icon: str
        """
        if self.local_vars_configuration.client_side_validation and user_icon is None:  # noqa: E501
            raise ValueError("Invalid value for `user_icon`, must not be `None`")  # noqa: E501

        self._user_icon = user_icon

    @property
    def username(self):
        """Gets the username of this CurrentUser.  # noqa: E501

        -| **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429).  # noqa: E501

        :return: The username of this CurrentUser.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CurrentUser.

        -| **DEPRECATED:** VRChat API no longer return usernames of other users. [See issue by Tupper for more information](https://github.com/pypy-vrc/VRCX/issues/429).  # noqa: E501

        :param username: The username of this CurrentUser.  # noqa: E501
        :type username: str
        """

        self._username = username

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrentUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CurrentUser):
            return True

        return self.to_dict() != other.to_dict()
