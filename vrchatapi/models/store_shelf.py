# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class StoreShelf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'listing_ids': 'list[str]',
        'listings': 'list[ProductListing]',
        'shelf_description': 'str',
        'shelf_layout': 'str',
        'shelf_title': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'id': 'id',
        'listing_ids': 'listingIds',
        'listings': 'listings',
        'shelf_description': 'shelfDescription',
        'shelf_layout': 'shelfLayout',
        'shelf_title': 'shelfTitle',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, listing_ids=None, listings=None, shelf_description=None, shelf_layout=None, shelf_title=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """StoreShelf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._listing_ids = None
        self._listings = None
        self._shelf_description = None
        self._shelf_layout = None
        self._shelf_title = None
        self._updated_at = None
        self.discriminator = None

        self.id = id
        self.listing_ids = listing_ids
        if listings is not None:
            self.listings = listings
        self.shelf_description = shelf_description
        self.shelf_layout = shelf_layout
        self.shelf_title = shelf_title
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this StoreShelf.  # noqa: E501


        :return: The id of this StoreShelf.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StoreShelf.


        :param id: The id of this StoreShelf.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def listing_ids(self):
        """Gets the listing_ids of this StoreShelf.  # noqa: E501


        :return: The listing_ids of this StoreShelf.  # noqa: E501
        :rtype: list[str]
        """
        return self._listing_ids

    @listing_ids.setter
    def listing_ids(self, listing_ids):
        """Sets the listing_ids of this StoreShelf.


        :param listing_ids: The listing_ids of this StoreShelf.  # noqa: E501
        :type listing_ids: list[str]
        """
        if self.local_vars_configuration.client_side_validation and listing_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `listing_ids`, must not be `None`")  # noqa: E501

        self._listing_ids = listing_ids

    @property
    def listings(self):
        """Gets the listings of this StoreShelf.  # noqa: E501


        :return: The listings of this StoreShelf.  # noqa: E501
        :rtype: list[ProductListing]
        """
        return self._listings

    @listings.setter
    def listings(self, listings):
        """Sets the listings of this StoreShelf.


        :param listings: The listings of this StoreShelf.  # noqa: E501
        :type listings: list[ProductListing]
        """

        self._listings = listings

    @property
    def shelf_description(self):
        """Gets the shelf_description of this StoreShelf.  # noqa: E501


        :return: The shelf_description of this StoreShelf.  # noqa: E501
        :rtype: str
        """
        return self._shelf_description

    @shelf_description.setter
    def shelf_description(self, shelf_description):
        """Sets the shelf_description of this StoreShelf.


        :param shelf_description: The shelf_description of this StoreShelf.  # noqa: E501
        :type shelf_description: str
        """
        if self.local_vars_configuration.client_side_validation and shelf_description is None:  # noqa: E501
            raise ValueError("Invalid value for `shelf_description`, must not be `None`")  # noqa: E501

        self._shelf_description = shelf_description

    @property
    def shelf_layout(self):
        """Gets the shelf_layout of this StoreShelf.  # noqa: E501


        :return: The shelf_layout of this StoreShelf.  # noqa: E501
        :rtype: str
        """
        return self._shelf_layout

    @shelf_layout.setter
    def shelf_layout(self, shelf_layout):
        """Sets the shelf_layout of this StoreShelf.


        :param shelf_layout: The shelf_layout of this StoreShelf.  # noqa: E501
        :type shelf_layout: str
        """
        if self.local_vars_configuration.client_side_validation and shelf_layout is None:  # noqa: E501
            raise ValueError("Invalid value for `shelf_layout`, must not be `None`")  # noqa: E501

        self._shelf_layout = shelf_layout

    @property
    def shelf_title(self):
        """Gets the shelf_title of this StoreShelf.  # noqa: E501


        :return: The shelf_title of this StoreShelf.  # noqa: E501
        :rtype: str
        """
        return self._shelf_title

    @shelf_title.setter
    def shelf_title(self, shelf_title):
        """Sets the shelf_title of this StoreShelf.


        :param shelf_title: The shelf_title of this StoreShelf.  # noqa: E501
        :type shelf_title: str
        """
        if self.local_vars_configuration.client_side_validation and shelf_title is None:  # noqa: E501
            raise ValueError("Invalid value for `shelf_title`, must not be `None`")  # noqa: E501

        self._shelf_title = shelf_title

    @property
    def updated_at(self):
        """Gets the updated_at of this StoreShelf.  # noqa: E501


        :return: The updated_at of this StoreShelf.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this StoreShelf.


        :param updated_at: The updated_at of this StoreShelf.  # noqa: E501
        :type updated_at: str
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoreShelf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StoreShelf):
            return True

        return self.to_dict() != other.to_dict()
