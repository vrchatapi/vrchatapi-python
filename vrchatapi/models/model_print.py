# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class ModelPrint(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'author_id': 'str',
        'author_name': 'str',
        'created_at': 'datetime',
        'files': 'PrintFiles',
        'id': 'str',
        'note': 'str',
        'owner_id': 'str',
        'timestamp': 'datetime',
        'world_id': 'str',
        'world_name': 'str'
    }

    attribute_map = {
        'author_id': 'authorId',
        'author_name': 'authorName',
        'created_at': 'createdAt',
        'files': 'files',
        'id': 'id',
        'note': 'note',
        'owner_id': 'ownerId',
        'timestamp': 'timestamp',
        'world_id': 'worldId',
        'world_name': 'worldName'
    }

    def __init__(self, author_id=None, author_name=None, created_at=None, files=None, id=None, note=None, owner_id=None, timestamp=None, world_id=None, world_name=None, local_vars_configuration=None):  # noqa: E501
        """ModelPrint - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._author_id = None
        self._author_name = None
        self._created_at = None
        self._files = None
        self._id = None
        self._note = None
        self._owner_id = None
        self._timestamp = None
        self._world_id = None
        self._world_name = None
        self.discriminator = None

        self.author_id = author_id
        self.author_name = author_name
        self.created_at = created_at
        self.files = files
        self.id = id
        self.note = note
        if owner_id is not None:
            self.owner_id = owner_id
        self.timestamp = timestamp
        self.world_id = world_id
        self.world_name = world_name

    @property
    def author_id(self):
        """Gets the author_id of this ModelPrint.  # noqa: E501

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :return: The author_id of this ModelPrint.  # noqa: E501
        :rtype: str
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this ModelPrint.

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :param author_id: The author_id of this ModelPrint.  # noqa: E501
        :type author_id: str
        """
        if self.local_vars_configuration.client_side_validation and author_id is None:  # noqa: E501
            raise ValueError("Invalid value for `author_id`, must not be `None`")  # noqa: E501

        self._author_id = author_id

    @property
    def author_name(self):
        """Gets the author_name of this ModelPrint.  # noqa: E501


        :return: The author_name of this ModelPrint.  # noqa: E501
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this ModelPrint.


        :param author_name: The author_name of this ModelPrint.  # noqa: E501
        :type author_name: str
        """
        if self.local_vars_configuration.client_side_validation and author_name is None:  # noqa: E501
            raise ValueError("Invalid value for `author_name`, must not be `None`")  # noqa: E501

        self._author_name = author_name

    @property
    def created_at(self):
        """Gets the created_at of this ModelPrint.  # noqa: E501


        :return: The created_at of this ModelPrint.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ModelPrint.


        :param created_at: The created_at of this ModelPrint.  # noqa: E501
        :type created_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def files(self):
        """Gets the files of this ModelPrint.  # noqa: E501


        :return: The files of this ModelPrint.  # noqa: E501
        :rtype: PrintFiles
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this ModelPrint.


        :param files: The files of this ModelPrint.  # noqa: E501
        :type files: PrintFiles
        """
        if self.local_vars_configuration.client_side_validation and files is None:  # noqa: E501
            raise ValueError("Invalid value for `files`, must not be `None`")  # noqa: E501

        self._files = files

    @property
    def id(self):
        """Gets the id of this ModelPrint.  # noqa: E501


        :return: The id of this ModelPrint.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelPrint.


        :param id: The id of this ModelPrint.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def note(self):
        """Gets the note of this ModelPrint.  # noqa: E501


        :return: The note of this ModelPrint.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ModelPrint.


        :param note: The note of this ModelPrint.  # noqa: E501
        :type note: str
        """
        if self.local_vars_configuration.client_side_validation and note is None:  # noqa: E501
            raise ValueError("Invalid value for `note`, must not be `None`")  # noqa: E501

        self._note = note

    @property
    def owner_id(self):
        """Gets the owner_id of this ModelPrint.  # noqa: E501

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :return: The owner_id of this ModelPrint.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this ModelPrint.

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :param owner_id: The owner_id of this ModelPrint.  # noqa: E501
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def timestamp(self):
        """Gets the timestamp of this ModelPrint.  # noqa: E501


        :return: The timestamp of this ModelPrint.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ModelPrint.


        :param timestamp: The timestamp of this ModelPrint.  # noqa: E501
        :type timestamp: datetime
        """
        if self.local_vars_configuration.client_side_validation and timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def world_id(self):
        """Gets the world_id of this ModelPrint.  # noqa: E501

        WorldID be \"offline\" on User profiles if you are not friends with that user.  # noqa: E501

        :return: The world_id of this ModelPrint.  # noqa: E501
        :rtype: str
        """
        return self._world_id

    @world_id.setter
    def world_id(self, world_id):
        """Sets the world_id of this ModelPrint.

        WorldID be \"offline\" on User profiles if you are not friends with that user.  # noqa: E501

        :param world_id: The world_id of this ModelPrint.  # noqa: E501
        :type world_id: str
        """
        if self.local_vars_configuration.client_side_validation and world_id is None:  # noqa: E501
            raise ValueError("Invalid value for `world_id`, must not be `None`")  # noqa: E501

        self._world_id = world_id

    @property
    def world_name(self):
        """Gets the world_name of this ModelPrint.  # noqa: E501


        :return: The world_name of this ModelPrint.  # noqa: E501
        :rtype: str
        """
        return self._world_name

    @world_name.setter
    def world_name(self, world_name):
        """Sets the world_name of this ModelPrint.


        :param world_name: The world_name of this ModelPrint.  # noqa: E501
        :type world_name: str
        """
        if self.local_vars_configuration.client_side_validation and world_name is None:  # noqa: E501
            raise ValueError("Invalid value for `world_name`, must not be `None`")  # noqa: E501

        self._world_name = world_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelPrint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModelPrint):
            return True

        return self.to_dict() != other.to_dict()
