# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class Instance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active': 'bool',
        'age_gate': 'bool',
        'can_request_invite': 'bool',
        'capacity': 'int',
        'client_number': 'str',
        'content_settings': 'InstanceContentSettings',
        'display_name': 'str',
        'full': 'bool',
        'game_server_version': 'int',
        'id': 'str',
        'instance_id': 'str',
        'instance_persistence_enabled': 'str',
        'location': 'str',
        'n_users': 'int',
        'name': 'str',
        'owner_id': 'str',
        'permanent': 'bool',
        'photon_region': 'Region',
        'platforms': 'InstancePlatforms',
        'player_persistence_enabled': 'bool',
        'region': 'InstanceRegion',
        'secure_name': 'str',
        'short_name': 'str',
        'tags': 'list[str]',
        'type': 'InstanceType',
        'world_id': 'str',
        'hidden': 'str',
        'friends': 'str',
        'private': 'str',
        'queue_enabled': 'bool',
        'queue_size': 'int',
        'recommended_capacity': 'int',
        'role_restricted': 'bool',
        'strict': 'bool',
        'user_count': 'int',
        'world': 'World',
        'users': 'list[LimitedUserInstance]',
        'group_access_type': 'GroupAccessType',
        'has_capacity_for_you': 'bool',
        'nonce': 'str',
        'closed_at': 'datetime',
        'hard_close': 'bool'
    }

    attribute_map = {
        'active': 'active',
        'age_gate': 'ageGate',
        'can_request_invite': 'canRequestInvite',
        'capacity': 'capacity',
        'client_number': 'clientNumber',
        'content_settings': 'contentSettings',
        'display_name': 'displayName',
        'full': 'full',
        'game_server_version': 'gameServerVersion',
        'id': 'id',
        'instance_id': 'instanceId',
        'instance_persistence_enabled': 'instancePersistenceEnabled',
        'location': 'location',
        'n_users': 'n_users',
        'name': 'name',
        'owner_id': 'ownerId',
        'permanent': 'permanent',
        'photon_region': 'photonRegion',
        'platforms': 'platforms',
        'player_persistence_enabled': 'playerPersistenceEnabled',
        'region': 'region',
        'secure_name': 'secureName',
        'short_name': 'shortName',
        'tags': 'tags',
        'type': 'type',
        'world_id': 'worldId',
        'hidden': 'hidden',
        'friends': 'friends',
        'private': 'private',
        'queue_enabled': 'queueEnabled',
        'queue_size': 'queueSize',
        'recommended_capacity': 'recommendedCapacity',
        'role_restricted': 'roleRestricted',
        'strict': 'strict',
        'user_count': 'userCount',
        'world': 'world',
        'users': 'users',
        'group_access_type': 'groupAccessType',
        'has_capacity_for_you': 'hasCapacityForYou',
        'nonce': 'nonce',
        'closed_at': 'closedAt',
        'hard_close': 'hardClose'
    }

    def __init__(self, active=True, age_gate=None, can_request_invite=True, capacity=None, client_number=None, content_settings=None, display_name=None, full=False, game_server_version=None, id=None, instance_id=None, instance_persistence_enabled=None, location=None, n_users=None, name=None, owner_id=None, permanent=False, photon_region=None, platforms=None, player_persistence_enabled=None, region=None, secure_name=None, short_name=None, tags=None, type=None, world_id=None, hidden=None, friends=None, private=None, queue_enabled=None, queue_size=None, recommended_capacity=None, role_restricted=None, strict=None, user_count=None, world=None, users=None, group_access_type=None, has_capacity_for_you=None, nonce=None, closed_at=None, hard_close=None, local_vars_configuration=None):  # noqa: E501
        """Instance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._active = None
        self._age_gate = None
        self._can_request_invite = None
        self._capacity = None
        self._client_number = None
        self._content_settings = None
        self._display_name = None
        self._full = None
        self._game_server_version = None
        self._id = None
        self._instance_id = None
        self._instance_persistence_enabled = None
        self._location = None
        self._n_users = None
        self._name = None
        self._owner_id = None
        self._permanent = None
        self._photon_region = None
        self._platforms = None
        self._player_persistence_enabled = None
        self._region = None
        self._secure_name = None
        self._short_name = None
        self._tags = None
        self._type = None
        self._world_id = None
        self._hidden = None
        self._friends = None
        self._private = None
        self._queue_enabled = None
        self._queue_size = None
        self._recommended_capacity = None
        self._role_restricted = None
        self._strict = None
        self._user_count = None
        self._world = None
        self._users = None
        self._group_access_type = None
        self._has_capacity_for_you = None
        self._nonce = None
        self._closed_at = None
        self._hard_close = None
        self.discriminator = None

        self.active = active
        self.age_gate = age_gate
        self.can_request_invite = can_request_invite
        self.capacity = capacity
        self.client_number = client_number
        self.content_settings = content_settings
        self.display_name = display_name
        self.full = full
        if game_server_version is not None:
            self.game_server_version = game_server_version
        self.id = id
        self.instance_id = instance_id
        self.instance_persistence_enabled = instance_persistence_enabled
        self.location = location
        self.n_users = n_users
        self.name = name
        self.owner_id = owner_id
        self.permanent = permanent
        self.photon_region = photon_region
        self.platforms = platforms
        self.player_persistence_enabled = player_persistence_enabled
        self.region = region
        self.secure_name = secure_name
        self.short_name = short_name
        self.tags = tags
        self.type = type
        self.world_id = world_id
        if hidden is not None:
            self.hidden = hidden
        if friends is not None:
            self.friends = friends
        if private is not None:
            self.private = private
        self.queue_enabled = queue_enabled
        self.queue_size = queue_size
        self.recommended_capacity = recommended_capacity
        if role_restricted is not None:
            self.role_restricted = role_restricted
        self.strict = strict
        self.user_count = user_count
        self.world = world
        if users is not None:
            self.users = users
        if group_access_type is not None:
            self.group_access_type = group_access_type
        if has_capacity_for_you is not None:
            self.has_capacity_for_you = has_capacity_for_you
        if nonce is not None:
            self.nonce = nonce
        self.closed_at = closed_at
        self.hard_close = hard_close

    @property
    def active(self):
        """Gets the active of this Instance.  # noqa: E501


        :return: The active of this Instance.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Instance.


        :param active: The active of this Instance.  # noqa: E501
        :type active: bool
        """
        if self.local_vars_configuration.client_side_validation and active is None:  # noqa: E501
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def age_gate(self):
        """Gets the age_gate of this Instance.  # noqa: E501


        :return: The age_gate of this Instance.  # noqa: E501
        :rtype: bool
        """
        return self._age_gate

    @age_gate.setter
    def age_gate(self, age_gate):
        """Sets the age_gate of this Instance.


        :param age_gate: The age_gate of this Instance.  # noqa: E501
        :type age_gate: bool
        """

        self._age_gate = age_gate

    @property
    def can_request_invite(self):
        """Gets the can_request_invite of this Instance.  # noqa: E501


        :return: The can_request_invite of this Instance.  # noqa: E501
        :rtype: bool
        """
        return self._can_request_invite

    @can_request_invite.setter
    def can_request_invite(self, can_request_invite):
        """Sets the can_request_invite of this Instance.


        :param can_request_invite: The can_request_invite of this Instance.  # noqa: E501
        :type can_request_invite: bool
        """
        if self.local_vars_configuration.client_side_validation and can_request_invite is None:  # noqa: E501
            raise ValueError("Invalid value for `can_request_invite`, must not be `None`")  # noqa: E501

        self._can_request_invite = can_request_invite

    @property
    def capacity(self):
        """Gets the capacity of this Instance.  # noqa: E501


        :return: The capacity of this Instance.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this Instance.


        :param capacity: The capacity of this Instance.  # noqa: E501
        :type capacity: int
        """
        if self.local_vars_configuration.client_side_validation and capacity is None:  # noqa: E501
            raise ValueError("Invalid value for `capacity`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                capacity is not None and capacity < 0):  # noqa: E501
            raise ValueError("Invalid value for `capacity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._capacity = capacity

    @property
    def client_number(self):
        """Gets the client_number of this Instance.  # noqa: E501

        Always returns \"unknown\".  # noqa: E501

        :return: The client_number of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._client_number

    @client_number.setter
    def client_number(self, client_number):
        """Sets the client_number of this Instance.

        Always returns \"unknown\".  # noqa: E501

        :param client_number: The client_number of this Instance.  # noqa: E501
        :type client_number: str
        """
        if self.local_vars_configuration.client_side_validation and client_number is None:  # noqa: E501
            raise ValueError("Invalid value for `client_number`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                client_number is not None and len(client_number) < 1):
            raise ValueError("Invalid value for `client_number`, length must be greater than or equal to `1`")  # noqa: E501

        self._client_number = client_number

    @property
    def content_settings(self):
        """Gets the content_settings of this Instance.  # noqa: E501


        :return: The content_settings of this Instance.  # noqa: E501
        :rtype: InstanceContentSettings
        """
        return self._content_settings

    @content_settings.setter
    def content_settings(self, content_settings):
        """Sets the content_settings of this Instance.


        :param content_settings: The content_settings of this Instance.  # noqa: E501
        :type content_settings: InstanceContentSettings
        """
        if self.local_vars_configuration.client_side_validation and content_settings is None:  # noqa: E501
            raise ValueError("Invalid value for `content_settings`, must not be `None`")  # noqa: E501

        self._content_settings = content_settings

    @property
    def display_name(self):
        """Gets the display_name of this Instance.  # noqa: E501


        :return: The display_name of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Instance.


        :param display_name: The display_name of this Instance.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def full(self):
        """Gets the full of this Instance.  # noqa: E501


        :return: The full of this Instance.  # noqa: E501
        :rtype: bool
        """
        return self._full

    @full.setter
    def full(self, full):
        """Sets the full of this Instance.


        :param full: The full of this Instance.  # noqa: E501
        :type full: bool
        """
        if self.local_vars_configuration.client_side_validation and full is None:  # noqa: E501
            raise ValueError("Invalid value for `full`, must not be `None`")  # noqa: E501

        self._full = full

    @property
    def game_server_version(self):
        """Gets the game_server_version of this Instance.  # noqa: E501


        :return: The game_server_version of this Instance.  # noqa: E501
        :rtype: int
        """
        return self._game_server_version

    @game_server_version.setter
    def game_server_version(self, game_server_version):
        """Sets the game_server_version of this Instance.


        :param game_server_version: The game_server_version of this Instance.  # noqa: E501
        :type game_server_version: int
        """

        self._game_server_version = game_server_version

    @property
    def id(self):
        """Gets the id of this Instance.  # noqa: E501

        InstanceID can be \"offline\" on User profiles if you are not friends with that user and \"private\" if you are friends and user is in private instance.  # noqa: E501

        :return: The id of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Instance.

        InstanceID can be \"offline\" on User profiles if you are not friends with that user and \"private\" if you are friends and user is in private instance.  # noqa: E501

        :param id: The id of this Instance.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def instance_id(self):
        """Gets the instance_id of this Instance.  # noqa: E501

        InstanceID can be \"offline\" on User profiles if you are not friends with that user and \"private\" if you are friends and user is in private instance.  # noqa: E501

        :return: The instance_id of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this Instance.

        InstanceID can be \"offline\" on User profiles if you are not friends with that user and \"private\" if you are friends and user is in private instance.  # noqa: E501

        :param instance_id: The instance_id of this Instance.  # noqa: E501
        :type instance_id: str
        """
        if self.local_vars_configuration.client_side_validation and instance_id is None:  # noqa: E501
            raise ValueError("Invalid value for `instance_id`, must not be `None`")  # noqa: E501

        self._instance_id = instance_id

    @property
    def instance_persistence_enabled(self):
        """Gets the instance_persistence_enabled of this Instance.  # noqa: E501


        :return: The instance_persistence_enabled of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._instance_persistence_enabled

    @instance_persistence_enabled.setter
    def instance_persistence_enabled(self, instance_persistence_enabled):
        """Sets the instance_persistence_enabled of this Instance.


        :param instance_persistence_enabled: The instance_persistence_enabled of this Instance.  # noqa: E501
        :type instance_persistence_enabled: str
        """

        self._instance_persistence_enabled = instance_persistence_enabled

    @property
    def location(self):
        """Gets the location of this Instance.  # noqa: E501

        Represents a unique location, consisting of a world identifier and an instance identifier, or \"offline\" if the user is not on your friends list.  # noqa: E501

        :return: The location of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Instance.

        Represents a unique location, consisting of a world identifier and an instance identifier, or \"offline\" if the user is not on your friends list.  # noqa: E501

        :param location: The location of this Instance.  # noqa: E501
        :type location: str
        """
        if self.local_vars_configuration.client_side_validation and location is None:  # noqa: E501
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def n_users(self):
        """Gets the n_users of this Instance.  # noqa: E501


        :return: The n_users of this Instance.  # noqa: E501
        :rtype: int
        """
        return self._n_users

    @n_users.setter
    def n_users(self, n_users):
        """Sets the n_users of this Instance.


        :param n_users: The n_users of this Instance.  # noqa: E501
        :type n_users: int
        """
        if self.local_vars_configuration.client_side_validation and n_users is None:  # noqa: E501
            raise ValueError("Invalid value for `n_users`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                n_users is not None and n_users < 0):  # noqa: E501
            raise ValueError("Invalid value for `n_users`, must be a value greater than or equal to `0`")  # noqa: E501

        self._n_users = n_users

    @property
    def name(self):
        """Gets the name of this Instance.  # noqa: E501


        :return: The name of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Instance.


        :param name: The name of this Instance.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def owner_id(self):
        """Gets the owner_id of this Instance.  # noqa: E501

        A groupId if the instance type is \"group\", null if instance type is public, or a userId otherwise  # noqa: E501

        :return: The owner_id of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Instance.

        A groupId if the instance type is \"group\", null if instance type is public, or a userId otherwise  # noqa: E501

        :param owner_id: The owner_id of this Instance.  # noqa: E501
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def permanent(self):
        """Gets the permanent of this Instance.  # noqa: E501


        :return: The permanent of this Instance.  # noqa: E501
        :rtype: bool
        """
        return self._permanent

    @permanent.setter
    def permanent(self, permanent):
        """Sets the permanent of this Instance.


        :param permanent: The permanent of this Instance.  # noqa: E501
        :type permanent: bool
        """
        if self.local_vars_configuration.client_side_validation and permanent is None:  # noqa: E501
            raise ValueError("Invalid value for `permanent`, must not be `None`")  # noqa: E501

        self._permanent = permanent

    @property
    def photon_region(self):
        """Gets the photon_region of this Instance.  # noqa: E501


        :return: The photon_region of this Instance.  # noqa: E501
        :rtype: Region
        """
        return self._photon_region

    @photon_region.setter
    def photon_region(self, photon_region):
        """Sets the photon_region of this Instance.


        :param photon_region: The photon_region of this Instance.  # noqa: E501
        :type photon_region: Region
        """
        if self.local_vars_configuration.client_side_validation and photon_region is None:  # noqa: E501
            raise ValueError("Invalid value for `photon_region`, must not be `None`")  # noqa: E501

        self._photon_region = photon_region

    @property
    def platforms(self):
        """Gets the platforms of this Instance.  # noqa: E501


        :return: The platforms of this Instance.  # noqa: E501
        :rtype: InstancePlatforms
        """
        return self._platforms

    @platforms.setter
    def platforms(self, platforms):
        """Sets the platforms of this Instance.


        :param platforms: The platforms of this Instance.  # noqa: E501
        :type platforms: InstancePlatforms
        """
        if self.local_vars_configuration.client_side_validation and platforms is None:  # noqa: E501
            raise ValueError("Invalid value for `platforms`, must not be `None`")  # noqa: E501

        self._platforms = platforms

    @property
    def player_persistence_enabled(self):
        """Gets the player_persistence_enabled of this Instance.  # noqa: E501


        :return: The player_persistence_enabled of this Instance.  # noqa: E501
        :rtype: bool
        """
        return self._player_persistence_enabled

    @player_persistence_enabled.setter
    def player_persistence_enabled(self, player_persistence_enabled):
        """Sets the player_persistence_enabled of this Instance.


        :param player_persistence_enabled: The player_persistence_enabled of this Instance.  # noqa: E501
        :type player_persistence_enabled: bool
        """

        self._player_persistence_enabled = player_persistence_enabled

    @property
    def region(self):
        """Gets the region of this Instance.  # noqa: E501


        :return: The region of this Instance.  # noqa: E501
        :rtype: InstanceRegion
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Instance.


        :param region: The region of this Instance.  # noqa: E501
        :type region: InstanceRegion
        """
        if self.local_vars_configuration.client_side_validation and region is None:  # noqa: E501
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def secure_name(self):
        """Gets the secure_name of this Instance.  # noqa: E501


        :return: The secure_name of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._secure_name

    @secure_name.setter
    def secure_name(self, secure_name):
        """Sets the secure_name of this Instance.


        :param secure_name: The secure_name of this Instance.  # noqa: E501
        :type secure_name: str
        """
        if self.local_vars_configuration.client_side_validation and secure_name is None:  # noqa: E501
            raise ValueError("Invalid value for `secure_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                secure_name is not None and len(secure_name) < 1):
            raise ValueError("Invalid value for `secure_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._secure_name = secure_name

    @property
    def short_name(self):
        """Gets the short_name of this Instance.  # noqa: E501


        :return: The short_name of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this Instance.


        :param short_name: The short_name of this Instance.  # noqa: E501
        :type short_name: str
        """
        if (self.local_vars_configuration.client_side_validation and
                short_name is not None and len(short_name) < 1):
            raise ValueError("Invalid value for `short_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._short_name = short_name

    @property
    def tags(self):
        """Gets the tags of this Instance.  # noqa: E501

        The tags array on Instances usually contain the language tags of the people in the instance.   # noqa: E501

        :return: The tags of this Instance.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Instance.

        The tags array on Instances usually contain the language tags of the people in the instance.   # noqa: E501

        :param tags: The tags of this Instance.  # noqa: E501
        :type tags: list[str]
        """
        if self.local_vars_configuration.client_side_validation and tags is None:  # noqa: E501
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this Instance.  # noqa: E501


        :return: The type of this Instance.  # noqa: E501
        :rtype: InstanceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Instance.


        :param type: The type of this Instance.  # noqa: E501
        :type type: InstanceType
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def world_id(self):
        """Gets the world_id of this Instance.  # noqa: E501

        WorldID be \"offline\" on User profiles if you are not friends with that user.  # noqa: E501

        :return: The world_id of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._world_id

    @world_id.setter
    def world_id(self, world_id):
        """Sets the world_id of this Instance.

        WorldID be \"offline\" on User profiles if you are not friends with that user.  # noqa: E501

        :param world_id: The world_id of this Instance.  # noqa: E501
        :type world_id: str
        """
        if self.local_vars_configuration.client_side_validation and world_id is None:  # noqa: E501
            raise ValueError("Invalid value for `world_id`, must not be `None`")  # noqa: E501

        self._world_id = world_id

    @property
    def hidden(self):
        """Gets the hidden of this Instance.  # noqa: E501

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :return: The hidden of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Instance.

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :param hidden: The hidden of this Instance.  # noqa: E501
        :type hidden: str
        """

        self._hidden = hidden

    @property
    def friends(self):
        """Gets the friends of this Instance.  # noqa: E501

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :return: The friends of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._friends

    @friends.setter
    def friends(self, friends):
        """Sets the friends of this Instance.

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :param friends: The friends of this Instance.  # noqa: E501
        :type friends: str
        """

        self._friends = friends

    @property
    def private(self):
        """Gets the private of this Instance.  # noqa: E501

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :return: The private of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this Instance.

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :param private: The private of this Instance.  # noqa: E501
        :type private: str
        """

        self._private = private

    @property
    def queue_enabled(self):
        """Gets the queue_enabled of this Instance.  # noqa: E501


        :return: The queue_enabled of this Instance.  # noqa: E501
        :rtype: bool
        """
        return self._queue_enabled

    @queue_enabled.setter
    def queue_enabled(self, queue_enabled):
        """Sets the queue_enabled of this Instance.


        :param queue_enabled: The queue_enabled of this Instance.  # noqa: E501
        :type queue_enabled: bool
        """
        if self.local_vars_configuration.client_side_validation and queue_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `queue_enabled`, must not be `None`")  # noqa: E501

        self._queue_enabled = queue_enabled

    @property
    def queue_size(self):
        """Gets the queue_size of this Instance.  # noqa: E501


        :return: The queue_size of this Instance.  # noqa: E501
        :rtype: int
        """
        return self._queue_size

    @queue_size.setter
    def queue_size(self, queue_size):
        """Sets the queue_size of this Instance.


        :param queue_size: The queue_size of this Instance.  # noqa: E501
        :type queue_size: int
        """
        if self.local_vars_configuration.client_side_validation and queue_size is None:  # noqa: E501
            raise ValueError("Invalid value for `queue_size`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                queue_size is not None and queue_size < 0):  # noqa: E501
            raise ValueError("Invalid value for `queue_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._queue_size = queue_size

    @property
    def recommended_capacity(self):
        """Gets the recommended_capacity of this Instance.  # noqa: E501


        :return: The recommended_capacity of this Instance.  # noqa: E501
        :rtype: int
        """
        return self._recommended_capacity

    @recommended_capacity.setter
    def recommended_capacity(self, recommended_capacity):
        """Sets the recommended_capacity of this Instance.


        :param recommended_capacity: The recommended_capacity of this Instance.  # noqa: E501
        :type recommended_capacity: int
        """
        if self.local_vars_configuration.client_side_validation and recommended_capacity is None:  # noqa: E501
            raise ValueError("Invalid value for `recommended_capacity`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                recommended_capacity is not None and recommended_capacity < 0):  # noqa: E501
            raise ValueError("Invalid value for `recommended_capacity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._recommended_capacity = recommended_capacity

    @property
    def role_restricted(self):
        """Gets the role_restricted of this Instance.  # noqa: E501


        :return: The role_restricted of this Instance.  # noqa: E501
        :rtype: bool
        """
        return self._role_restricted

    @role_restricted.setter
    def role_restricted(self, role_restricted):
        """Sets the role_restricted of this Instance.


        :param role_restricted: The role_restricted of this Instance.  # noqa: E501
        :type role_restricted: bool
        """

        self._role_restricted = role_restricted

    @property
    def strict(self):
        """Gets the strict of this Instance.  # noqa: E501


        :return: The strict of this Instance.  # noqa: E501
        :rtype: bool
        """
        return self._strict

    @strict.setter
    def strict(self, strict):
        """Sets the strict of this Instance.


        :param strict: The strict of this Instance.  # noqa: E501
        :type strict: bool
        """
        if self.local_vars_configuration.client_side_validation and strict is None:  # noqa: E501
            raise ValueError("Invalid value for `strict`, must not be `None`")  # noqa: E501

        self._strict = strict

    @property
    def user_count(self):
        """Gets the user_count of this Instance.  # noqa: E501


        :return: The user_count of this Instance.  # noqa: E501
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this Instance.


        :param user_count: The user_count of this Instance.  # noqa: E501
        :type user_count: int
        """
        if self.local_vars_configuration.client_side_validation and user_count is None:  # noqa: E501
            raise ValueError("Invalid value for `user_count`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                user_count is not None and user_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `user_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._user_count = user_count

    @property
    def world(self):
        """Gets the world of this Instance.  # noqa: E501


        :return: The world of this Instance.  # noqa: E501
        :rtype: World
        """
        return self._world

    @world.setter
    def world(self, world):
        """Sets the world of this Instance.


        :param world: The world of this Instance.  # noqa: E501
        :type world: World
        """
        if self.local_vars_configuration.client_side_validation and world is None:  # noqa: E501
            raise ValueError("Invalid value for `world`, must not be `None`")  # noqa: E501

        self._world = world

    @property
    def users(self):
        """Gets the users of this Instance.  # noqa: E501

        The users field is present on instances created by the requesting user.  # noqa: E501

        :return: The users of this Instance.  # noqa: E501
        :rtype: list[LimitedUserInstance]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Instance.

        The users field is present on instances created by the requesting user.  # noqa: E501

        :param users: The users of this Instance.  # noqa: E501
        :type users: list[LimitedUserInstance]
        """

        self._users = users

    @property
    def group_access_type(self):
        """Gets the group_access_type of this Instance.  # noqa: E501


        :return: The group_access_type of this Instance.  # noqa: E501
        :rtype: GroupAccessType
        """
        return self._group_access_type

    @group_access_type.setter
    def group_access_type(self, group_access_type):
        """Sets the group_access_type of this Instance.


        :param group_access_type: The group_access_type of this Instance.  # noqa: E501
        :type group_access_type: GroupAccessType
        """

        self._group_access_type = group_access_type

    @property
    def has_capacity_for_you(self):
        """Gets the has_capacity_for_you of this Instance.  # noqa: E501


        :return: The has_capacity_for_you of this Instance.  # noqa: E501
        :rtype: bool
        """
        return self._has_capacity_for_you

    @has_capacity_for_you.setter
    def has_capacity_for_you(self, has_capacity_for_you):
        """Sets the has_capacity_for_you of this Instance.


        :param has_capacity_for_you: The has_capacity_for_you of this Instance.  # noqa: E501
        :type has_capacity_for_you: bool
        """

        self._has_capacity_for_you = has_capacity_for_you

    @property
    def nonce(self):
        """Gets the nonce of this Instance.  # noqa: E501


        :return: The nonce of this Instance.  # noqa: E501
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this Instance.


        :param nonce: The nonce of this Instance.  # noqa: E501
        :type nonce: str
        """

        self._nonce = nonce

    @property
    def closed_at(self):
        """Gets the closed_at of this Instance.  # noqa: E501


        :return: The closed_at of this Instance.  # noqa: E501
        :rtype: datetime
        """
        return self._closed_at

    @closed_at.setter
    def closed_at(self, closed_at):
        """Sets the closed_at of this Instance.


        :param closed_at: The closed_at of this Instance.  # noqa: E501
        :type closed_at: datetime
        """

        self._closed_at = closed_at

    @property
    def hard_close(self):
        """Gets the hard_close of this Instance.  # noqa: E501


        :return: The hard_close of this Instance.  # noqa: E501
        :rtype: bool
        """
        return self._hard_close

    @hard_close.setter
    def hard_close(self, hard_close):
        """Sets the hard_close of this Instance.


        :param hard_close: The hard_close of this Instance.  # noqa: E501
        :type hard_close: bool
        """

        self._hard_close = hard_close

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Instance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Instance):
            return True

        return self.to_dict() != other.to_dict()
