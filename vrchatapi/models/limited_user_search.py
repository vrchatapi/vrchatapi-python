# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class LimitedUserSearch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bio': 'str',
        'bio_links': 'list[str]',
        'current_avatar_image_url': 'str',
        'current_avatar_thumbnail_image_url': 'str',
        'current_avatar_tags': 'list[str]',
        'developer_type': 'DeveloperType',
        'display_name': 'str',
        'id': 'str',
        'is_friend': 'bool',
        'last_platform': 'str',
        'profile_pic_override': 'str',
        'pronouns': 'str',
        'status': 'UserStatus',
        'status_description': 'str',
        'tags': 'list[str]',
        'user_icon': 'str'
    }

    attribute_map = {
        'bio': 'bio',
        'bio_links': 'bioLinks',
        'current_avatar_image_url': 'currentAvatarImageUrl',
        'current_avatar_thumbnail_image_url': 'currentAvatarThumbnailImageUrl',
        'current_avatar_tags': 'currentAvatarTags',
        'developer_type': 'developerType',
        'display_name': 'displayName',
        'id': 'id',
        'is_friend': 'isFriend',
        'last_platform': 'last_platform',
        'profile_pic_override': 'profilePicOverride',
        'pronouns': 'pronouns',
        'status': 'status',
        'status_description': 'statusDescription',
        'tags': 'tags',
        'user_icon': 'userIcon'
    }

    def __init__(self, bio=None, bio_links=None, current_avatar_image_url=None, current_avatar_thumbnail_image_url=None, current_avatar_tags=None, developer_type=None, display_name=None, id=None, is_friend=None, last_platform=None, profile_pic_override=None, pronouns=None, status=None, status_description=None, tags=None, user_icon=None, local_vars_configuration=None):  # noqa: E501
        """LimitedUserSearch - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._bio = None
        self._bio_links = None
        self._current_avatar_image_url = None
        self._current_avatar_thumbnail_image_url = None
        self._current_avatar_tags = None
        self._developer_type = None
        self._display_name = None
        self._id = None
        self._is_friend = None
        self._last_platform = None
        self._profile_pic_override = None
        self._pronouns = None
        self._status = None
        self._status_description = None
        self._tags = None
        self._user_icon = None
        self.discriminator = None

        if bio is not None:
            self.bio = bio
        if bio_links is not None:
            self.bio_links = bio_links
        self.current_avatar_image_url = current_avatar_image_url
        self.current_avatar_thumbnail_image_url = current_avatar_thumbnail_image_url
        self.current_avatar_tags = current_avatar_tags
        self.developer_type = developer_type
        self.display_name = display_name
        self.id = id
        self.is_friend = is_friend
        self.last_platform = last_platform
        if profile_pic_override is not None:
            self.profile_pic_override = profile_pic_override
        if pronouns is not None:
            self.pronouns = pronouns
        self.status = status
        self.status_description = status_description
        self.tags = tags
        if user_icon is not None:
            self.user_icon = user_icon

    @property
    def bio(self):
        """Gets the bio of this LimitedUserSearch.  # noqa: E501


        :return: The bio of this LimitedUserSearch.  # noqa: E501
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this LimitedUserSearch.


        :param bio: The bio of this LimitedUserSearch.  # noqa: E501
        :type bio: str
        """

        self._bio = bio

    @property
    def bio_links(self):
        """Gets the bio_links of this LimitedUserSearch.  # noqa: E501

           # noqa: E501

        :return: The bio_links of this LimitedUserSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._bio_links

    @bio_links.setter
    def bio_links(self, bio_links):
        """Sets the bio_links of this LimitedUserSearch.

           # noqa: E501

        :param bio_links: The bio_links of this LimitedUserSearch.  # noqa: E501
        :type bio_links: list[str]
        """

        self._bio_links = bio_links

    @property
    def current_avatar_image_url(self):
        """Gets the current_avatar_image_url of this LimitedUserSearch.  # noqa: E501

        When profilePicOverride is not empty, use it instead.  # noqa: E501

        :return: The current_avatar_image_url of this LimitedUserSearch.  # noqa: E501
        :rtype: str
        """
        return self._current_avatar_image_url

    @current_avatar_image_url.setter
    def current_avatar_image_url(self, current_avatar_image_url):
        """Sets the current_avatar_image_url of this LimitedUserSearch.

        When profilePicOverride is not empty, use it instead.  # noqa: E501

        :param current_avatar_image_url: The current_avatar_image_url of this LimitedUserSearch.  # noqa: E501
        :type current_avatar_image_url: str
        """
        if self.local_vars_configuration.client_side_validation and current_avatar_image_url is None:  # noqa: E501
            raise ValueError("Invalid value for `current_avatar_image_url`, must not be `None`")  # noqa: E501

        self._current_avatar_image_url = current_avatar_image_url

    @property
    def current_avatar_thumbnail_image_url(self):
        """Gets the current_avatar_thumbnail_image_url of this LimitedUserSearch.  # noqa: E501

        When profilePicOverride is not empty, use it instead.  # noqa: E501

        :return: The current_avatar_thumbnail_image_url of this LimitedUserSearch.  # noqa: E501
        :rtype: str
        """
        return self._current_avatar_thumbnail_image_url

    @current_avatar_thumbnail_image_url.setter
    def current_avatar_thumbnail_image_url(self, current_avatar_thumbnail_image_url):
        """Sets the current_avatar_thumbnail_image_url of this LimitedUserSearch.

        When profilePicOverride is not empty, use it instead.  # noqa: E501

        :param current_avatar_thumbnail_image_url: The current_avatar_thumbnail_image_url of this LimitedUserSearch.  # noqa: E501
        :type current_avatar_thumbnail_image_url: str
        """
        if self.local_vars_configuration.client_side_validation and current_avatar_thumbnail_image_url is None:  # noqa: E501
            raise ValueError("Invalid value for `current_avatar_thumbnail_image_url`, must not be `None`")  # noqa: E501

        self._current_avatar_thumbnail_image_url = current_avatar_thumbnail_image_url

    @property
    def current_avatar_tags(self):
        """Gets the current_avatar_tags of this LimitedUserSearch.  # noqa: E501


        :return: The current_avatar_tags of this LimitedUserSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._current_avatar_tags

    @current_avatar_tags.setter
    def current_avatar_tags(self, current_avatar_tags):
        """Sets the current_avatar_tags of this LimitedUserSearch.


        :param current_avatar_tags: The current_avatar_tags of this LimitedUserSearch.  # noqa: E501
        :type current_avatar_tags: list[str]
        """
        if self.local_vars_configuration.client_side_validation and current_avatar_tags is None:  # noqa: E501
            raise ValueError("Invalid value for `current_avatar_tags`, must not be `None`")  # noqa: E501

        self._current_avatar_tags = current_avatar_tags

    @property
    def developer_type(self):
        """Gets the developer_type of this LimitedUserSearch.  # noqa: E501


        :return: The developer_type of this LimitedUserSearch.  # noqa: E501
        :rtype: DeveloperType
        """
        return self._developer_type

    @developer_type.setter
    def developer_type(self, developer_type):
        """Sets the developer_type of this LimitedUserSearch.


        :param developer_type: The developer_type of this LimitedUserSearch.  # noqa: E501
        :type developer_type: DeveloperType
        """
        if self.local_vars_configuration.client_side_validation and developer_type is None:  # noqa: E501
            raise ValueError("Invalid value for `developer_type`, must not be `None`")  # noqa: E501

        self._developer_type = developer_type

    @property
    def display_name(self):
        """Gets the display_name of this LimitedUserSearch.  # noqa: E501


        :return: The display_name of this LimitedUserSearch.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this LimitedUserSearch.


        :param display_name: The display_name of this LimitedUserSearch.  # noqa: E501
        :type display_name: str
        """
        if self.local_vars_configuration.client_side_validation and display_name is None:  # noqa: E501
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this LimitedUserSearch.  # noqa: E501

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :return: The id of this LimitedUserSearch.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LimitedUserSearch.

        A users unique ID, usually in the form of `usr_c1644b5b-3ca4-45b4-97c6-a2a0de70d469`. Legacy players can have old IDs in the form of `8JoV9XEdpo`. The ID can never be changed.  # noqa: E501

        :param id: The id of this LimitedUserSearch.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_friend(self):
        """Gets the is_friend of this LimitedUserSearch.  # noqa: E501


        :return: The is_friend of this LimitedUserSearch.  # noqa: E501
        :rtype: bool
        """
        return self._is_friend

    @is_friend.setter
    def is_friend(self, is_friend):
        """Sets the is_friend of this LimitedUserSearch.


        :param is_friend: The is_friend of this LimitedUserSearch.  # noqa: E501
        :type is_friend: bool
        """
        if self.local_vars_configuration.client_side_validation and is_friend is None:  # noqa: E501
            raise ValueError("Invalid value for `is_friend`, must not be `None`")  # noqa: E501

        self._is_friend = is_friend

    @property
    def last_platform(self):
        """Gets the last_platform of this LimitedUserSearch.  # noqa: E501

        This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`.  # noqa: E501

        :return: The last_platform of this LimitedUserSearch.  # noqa: E501
        :rtype: str
        """
        return self._last_platform

    @last_platform.setter
    def last_platform(self, last_platform):
        """Sets the last_platform of this LimitedUserSearch.

        This can be `standalonewindows` or `android`, but can also pretty much be any random Unity verison such as `2019.2.4-801-Release` or `2019.2.2-772-Release` or even `unknownplatform`.  # noqa: E501

        :param last_platform: The last_platform of this LimitedUserSearch.  # noqa: E501
        :type last_platform: str
        """
        if self.local_vars_configuration.client_side_validation and last_platform is None:  # noqa: E501
            raise ValueError("Invalid value for `last_platform`, must not be `None`")  # noqa: E501

        self._last_platform = last_platform

    @property
    def profile_pic_override(self):
        """Gets the profile_pic_override of this LimitedUserSearch.  # noqa: E501


        :return: The profile_pic_override of this LimitedUserSearch.  # noqa: E501
        :rtype: str
        """
        return self._profile_pic_override

    @profile_pic_override.setter
    def profile_pic_override(self, profile_pic_override):
        """Sets the profile_pic_override of this LimitedUserSearch.


        :param profile_pic_override: The profile_pic_override of this LimitedUserSearch.  # noqa: E501
        :type profile_pic_override: str
        """

        self._profile_pic_override = profile_pic_override

    @property
    def pronouns(self):
        """Gets the pronouns of this LimitedUserSearch.  # noqa: E501


        :return: The pronouns of this LimitedUserSearch.  # noqa: E501
        :rtype: str
        """
        return self._pronouns

    @pronouns.setter
    def pronouns(self, pronouns):
        """Sets the pronouns of this LimitedUserSearch.


        :param pronouns: The pronouns of this LimitedUserSearch.  # noqa: E501
        :type pronouns: str
        """

        self._pronouns = pronouns

    @property
    def status(self):
        """Gets the status of this LimitedUserSearch.  # noqa: E501


        :return: The status of this LimitedUserSearch.  # noqa: E501
        :rtype: UserStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LimitedUserSearch.


        :param status: The status of this LimitedUserSearch.  # noqa: E501
        :type status: UserStatus
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_description(self):
        """Gets the status_description of this LimitedUserSearch.  # noqa: E501


        :return: The status_description of this LimitedUserSearch.  # noqa: E501
        :rtype: str
        """
        return self._status_description

    @status_description.setter
    def status_description(self, status_description):
        """Sets the status_description of this LimitedUserSearch.


        :param status_description: The status_description of this LimitedUserSearch.  # noqa: E501
        :type status_description: str
        """
        if self.local_vars_configuration.client_side_validation and status_description is None:  # noqa: E501
            raise ValueError("Invalid value for `status_description`, must not be `None`")  # noqa: E501

        self._status_description = status_description

    @property
    def tags(self):
        """Gets the tags of this LimitedUserSearch.  # noqa: E501

        <- Always empty.  # noqa: E501

        :return: The tags of this LimitedUserSearch.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this LimitedUserSearch.

        <- Always empty.  # noqa: E501

        :param tags: The tags of this LimitedUserSearch.  # noqa: E501
        :type tags: list[str]
        """
        if self.local_vars_configuration.client_side_validation and tags is None:  # noqa: E501
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def user_icon(self):
        """Gets the user_icon of this LimitedUserSearch.  # noqa: E501


        :return: The user_icon of this LimitedUserSearch.  # noqa: E501
        :rtype: str
        """
        return self._user_icon

    @user_icon.setter
    def user_icon(self, user_icon):
        """Sets the user_icon of this LimitedUserSearch.


        :param user_icon: The user_icon of this LimitedUserSearch.  # noqa: E501
        :type user_icon: str
        """

        self._user_icon = user_icon

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LimitedUserSearch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LimitedUserSearch):
            return True

        return self.to_dict() != other.to_dict()
