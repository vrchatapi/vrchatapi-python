# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class GroupRoleTemplateValuesRoles(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'name': 'str',
        'base_permissions': 'list[GroupPermissions]',
        'is_added_on_join': 'bool'
    }

    attribute_map = {
        'description': 'description',
        'name': 'name',
        'base_permissions': 'basePermissions',
        'is_added_on_join': 'isAddedOnJoin'
    }

    def __init__(self, description=None, name=None, base_permissions=None, is_added_on_join=False, local_vars_configuration=None):  # noqa: E501
        """GroupRoleTemplateValuesRoles - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._name = None
        self._base_permissions = None
        self._is_added_on_join = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if base_permissions is not None:
            self.base_permissions = base_permissions
        if is_added_on_join is not None:
            self.is_added_on_join = is_added_on_join

    @property
    def description(self):
        """Gets the description of this GroupRoleTemplateValuesRoles.  # noqa: E501


        :return: The description of this GroupRoleTemplateValuesRoles.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GroupRoleTemplateValuesRoles.


        :param description: The description of this GroupRoleTemplateValuesRoles.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this GroupRoleTemplateValuesRoles.  # noqa: E501


        :return: The name of this GroupRoleTemplateValuesRoles.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GroupRoleTemplateValuesRoles.


        :param name: The name of this GroupRoleTemplateValuesRoles.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def base_permissions(self):
        """Gets the base_permissions of this GroupRoleTemplateValuesRoles.  # noqa: E501


        :return: The base_permissions of this GroupRoleTemplateValuesRoles.  # noqa: E501
        :rtype: list[GroupPermissions]
        """
        return self._base_permissions

    @base_permissions.setter
    def base_permissions(self, base_permissions):
        """Sets the base_permissions of this GroupRoleTemplateValuesRoles.


        :param base_permissions: The base_permissions of this GroupRoleTemplateValuesRoles.  # noqa: E501
        :type base_permissions: list[GroupPermissions]
        """

        self._base_permissions = base_permissions

    @property
    def is_added_on_join(self):
        """Gets the is_added_on_join of this GroupRoleTemplateValuesRoles.  # noqa: E501


        :return: The is_added_on_join of this GroupRoleTemplateValuesRoles.  # noqa: E501
        :rtype: bool
        """
        return self._is_added_on_join

    @is_added_on_join.setter
    def is_added_on_join(self, is_added_on_join):
        """Sets the is_added_on_join of this GroupRoleTemplateValuesRoles.


        :param is_added_on_join: The is_added_on_join of this GroupRoleTemplateValuesRoles.  # noqa: E501
        :type is_added_on_join: bool
        """

        self._is_added_on_join = is_added_on_join

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupRoleTemplateValuesRoles):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupRoleTemplateValuesRoles):
            return True

        return self.to_dict() != other.to_dict()
