# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class APIConfigConstantsGROUPS(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'capacity': 'int',
        'group_transfer_requirements': 'list[str]',
        'max_invites_requests': 'int',
        'max_joined': 'int',
        'max_joined_plus': 'int',
        'max_languages': 'int',
        'max_links': 'int',
        'max_management_roles': 'int',
        'max_owned': 'int',
        'max_roles': 'int'
    }

    attribute_map = {
        'capacity': 'CAPACITY',
        'group_transfer_requirements': 'GROUP_TRANSFER_REQUIREMENTS',
        'max_invites_requests': 'MAX_INVITES_REQUESTS',
        'max_joined': 'MAX_JOINED',
        'max_joined_plus': 'MAX_JOINED_PLUS',
        'max_languages': 'MAX_LANGUAGES',
        'max_links': 'MAX_LINKS',
        'max_management_roles': 'MAX_MANAGEMENT_ROLES',
        'max_owned': 'MAX_OWNED',
        'max_roles': 'MAX_ROLES'
    }

    def __init__(self, capacity=100000, group_transfer_requirements=None, max_invites_requests=50, max_joined=100, max_joined_plus=200, max_languages=10, max_links=3, max_management_roles=5, max_owned=5, max_roles=50, local_vars_configuration=None):  # noqa: E501
        """APIConfigConstantsGROUPS - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._capacity = None
        self._group_transfer_requirements = None
        self._max_invites_requests = None
        self._max_joined = None
        self._max_joined_plus = None
        self._max_languages = None
        self._max_links = None
        self._max_management_roles = None
        self._max_owned = None
        self._max_roles = None
        self.discriminator = None

        if capacity is not None:
            self.capacity = capacity
        if group_transfer_requirements is not None:
            self.group_transfer_requirements = group_transfer_requirements
        if max_invites_requests is not None:
            self.max_invites_requests = max_invites_requests
        if max_joined is not None:
            self.max_joined = max_joined
        if max_joined_plus is not None:
            self.max_joined_plus = max_joined_plus
        if max_languages is not None:
            self.max_languages = max_languages
        if max_links is not None:
            self.max_links = max_links
        if max_management_roles is not None:
            self.max_management_roles = max_management_roles
        if max_owned is not None:
            self.max_owned = max_owned
        if max_roles is not None:
            self.max_roles = max_roles

    @property
    def capacity(self):
        """Gets the capacity of this APIConfigConstantsGROUPS.  # noqa: E501

        Maximum group capacity  # noqa: E501

        :return: The capacity of this APIConfigConstantsGROUPS.  # noqa: E501
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this APIConfigConstantsGROUPS.

        Maximum group capacity  # noqa: E501

        :param capacity: The capacity of this APIConfigConstantsGROUPS.  # noqa: E501
        :type capacity: int
        """

        self._capacity = capacity

    @property
    def group_transfer_requirements(self):
        """Gets the group_transfer_requirements of this APIConfigConstantsGROUPS.  # noqa: E501

        Requirements for transferring group ownership  # noqa: E501

        :return: The group_transfer_requirements of this APIConfigConstantsGROUPS.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_transfer_requirements

    @group_transfer_requirements.setter
    def group_transfer_requirements(self, group_transfer_requirements):
        """Sets the group_transfer_requirements of this APIConfigConstantsGROUPS.

        Requirements for transferring group ownership  # noqa: E501

        :param group_transfer_requirements: The group_transfer_requirements of this APIConfigConstantsGROUPS.  # noqa: E501
        :type group_transfer_requirements: list[str]
        """

        self._group_transfer_requirements = group_transfer_requirements

    @property
    def max_invites_requests(self):
        """Gets the max_invites_requests of this APIConfigConstantsGROUPS.  # noqa: E501

        Maximum number of invite requests  # noqa: E501

        :return: The max_invites_requests of this APIConfigConstantsGROUPS.  # noqa: E501
        :rtype: int
        """
        return self._max_invites_requests

    @max_invites_requests.setter
    def max_invites_requests(self, max_invites_requests):
        """Sets the max_invites_requests of this APIConfigConstantsGROUPS.

        Maximum number of invite requests  # noqa: E501

        :param max_invites_requests: The max_invites_requests of this APIConfigConstantsGROUPS.  # noqa: E501
        :type max_invites_requests: int
        """

        self._max_invites_requests = max_invites_requests

    @property
    def max_joined(self):
        """Gets the max_joined of this APIConfigConstantsGROUPS.  # noqa: E501

        Maximum number of joined groups  # noqa: E501

        :return: The max_joined of this APIConfigConstantsGROUPS.  # noqa: E501
        :rtype: int
        """
        return self._max_joined

    @max_joined.setter
    def max_joined(self, max_joined):
        """Sets the max_joined of this APIConfigConstantsGROUPS.

        Maximum number of joined groups  # noqa: E501

        :param max_joined: The max_joined of this APIConfigConstantsGROUPS.  # noqa: E501
        :type max_joined: int
        """

        self._max_joined = max_joined

    @property
    def max_joined_plus(self):
        """Gets the max_joined_plus of this APIConfigConstantsGROUPS.  # noqa: E501

        Maximum number of joined groups for VRChat Plus members  # noqa: E501

        :return: The max_joined_plus of this APIConfigConstantsGROUPS.  # noqa: E501
        :rtype: int
        """
        return self._max_joined_plus

    @max_joined_plus.setter
    def max_joined_plus(self, max_joined_plus):
        """Sets the max_joined_plus of this APIConfigConstantsGROUPS.

        Maximum number of joined groups for VRChat Plus members  # noqa: E501

        :param max_joined_plus: The max_joined_plus of this APIConfigConstantsGROUPS.  # noqa: E501
        :type max_joined_plus: int
        """

        self._max_joined_plus = max_joined_plus

    @property
    def max_languages(self):
        """Gets the max_languages of this APIConfigConstantsGROUPS.  # noqa: E501

        Maximum number of supported languages  # noqa: E501

        :return: The max_languages of this APIConfigConstantsGROUPS.  # noqa: E501
        :rtype: int
        """
        return self._max_languages

    @max_languages.setter
    def max_languages(self, max_languages):
        """Sets the max_languages of this APIConfigConstantsGROUPS.

        Maximum number of supported languages  # noqa: E501

        :param max_languages: The max_languages of this APIConfigConstantsGROUPS.  # noqa: E501
        :type max_languages: int
        """

        self._max_languages = max_languages

    @property
    def max_links(self):
        """Gets the max_links of this APIConfigConstantsGROUPS.  # noqa: E501

        Maximum number of group links  # noqa: E501

        :return: The max_links of this APIConfigConstantsGROUPS.  # noqa: E501
        :rtype: int
        """
        return self._max_links

    @max_links.setter
    def max_links(self, max_links):
        """Sets the max_links of this APIConfigConstantsGROUPS.

        Maximum number of group links  # noqa: E501

        :param max_links: The max_links of this APIConfigConstantsGROUPS.  # noqa: E501
        :type max_links: int
        """

        self._max_links = max_links

    @property
    def max_management_roles(self):
        """Gets the max_management_roles of this APIConfigConstantsGROUPS.  # noqa: E501

        Maximum number of management roles in a group  # noqa: E501

        :return: The max_management_roles of this APIConfigConstantsGROUPS.  # noqa: E501
        :rtype: int
        """
        return self._max_management_roles

    @max_management_roles.setter
    def max_management_roles(self, max_management_roles):
        """Sets the max_management_roles of this APIConfigConstantsGROUPS.

        Maximum number of management roles in a group  # noqa: E501

        :param max_management_roles: The max_management_roles of this APIConfigConstantsGROUPS.  # noqa: E501
        :type max_management_roles: int
        """

        self._max_management_roles = max_management_roles

    @property
    def max_owned(self):
        """Gets the max_owned of this APIConfigConstantsGROUPS.  # noqa: E501

        Maximum number of groups a user can own  # noqa: E501

        :return: The max_owned of this APIConfigConstantsGROUPS.  # noqa: E501
        :rtype: int
        """
        return self._max_owned

    @max_owned.setter
    def max_owned(self, max_owned):
        """Sets the max_owned of this APIConfigConstantsGROUPS.

        Maximum number of groups a user can own  # noqa: E501

        :param max_owned: The max_owned of this APIConfigConstantsGROUPS.  # noqa: E501
        :type max_owned: int
        """

        self._max_owned = max_owned

    @property
    def max_roles(self):
        """Gets the max_roles of this APIConfigConstantsGROUPS.  # noqa: E501

        Maximum number of roles in a group  # noqa: E501

        :return: The max_roles of this APIConfigConstantsGROUPS.  # noqa: E501
        :rtype: int
        """
        return self._max_roles

    @max_roles.setter
    def max_roles(self, max_roles):
        """Sets the max_roles of this APIConfigConstantsGROUPS.

        Maximum number of roles in a group  # noqa: E501

        :param max_roles: The max_roles of this APIConfigConstantsGROUPS.  # noqa: E501
        :type max_roles: int
        """

        self._max_roles = max_roles

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, APIConfigConstantsGROUPS):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, APIConfigConstantsGROUPS):
            return True

        return self.to_dict() != other.to_dict()
