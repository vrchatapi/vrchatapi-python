# coding: utf-8

"""
    VRChat API Documentation


    The version of the OpenAPI document: 1.20.4
    Contact: vrchatapi.lpv0t@aries.fyi
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from vrchatapi.configuration import Configuration


class AvatarPublishedListingsInner(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'display_name': 'str',
        'image_id': 'str',
        'listing_id': 'str',
        'listing_type': 'str',
        'price_tokens': 'int'
    }

    attribute_map = {
        'description': 'description',
        'display_name': 'displayName',
        'image_id': 'imageId',
        'listing_id': 'listingId',
        'listing_type': 'listingType',
        'price_tokens': 'priceTokens'
    }

    def __init__(self, description=None, display_name=None, image_id=None, listing_id=None, listing_type=None, price_tokens=None, local_vars_configuration=None):  # noqa: E501
        """AvatarPublishedListingsInner - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._display_name = None
        self._image_id = None
        self._listing_id = None
        self._listing_type = None
        self._price_tokens = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if image_id is not None:
            self.image_id = image_id
        if listing_id is not None:
            self.listing_id = listing_id
        if listing_type is not None:
            self.listing_type = listing_type
        if price_tokens is not None:
            self.price_tokens = price_tokens

    @property
    def description(self):
        """Gets the description of this AvatarPublishedListingsInner.  # noqa: E501


        :return: The description of this AvatarPublishedListingsInner.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AvatarPublishedListingsInner.


        :param description: The description of this AvatarPublishedListingsInner.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this AvatarPublishedListingsInner.  # noqa: E501


        :return: The display_name of this AvatarPublishedListingsInner.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AvatarPublishedListingsInner.


        :param display_name: The display_name of this AvatarPublishedListingsInner.  # noqa: E501
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def image_id(self):
        """Gets the image_id of this AvatarPublishedListingsInner.  # noqa: E501


        :return: The image_id of this AvatarPublishedListingsInner.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this AvatarPublishedListingsInner.


        :param image_id: The image_id of this AvatarPublishedListingsInner.  # noqa: E501
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def listing_id(self):
        """Gets the listing_id of this AvatarPublishedListingsInner.  # noqa: E501


        :return: The listing_id of this AvatarPublishedListingsInner.  # noqa: E501
        :rtype: str
        """
        return self._listing_id

    @listing_id.setter
    def listing_id(self, listing_id):
        """Sets the listing_id of this AvatarPublishedListingsInner.


        :param listing_id: The listing_id of this AvatarPublishedListingsInner.  # noqa: E501
        :type listing_id: str
        """

        self._listing_id = listing_id

    @property
    def listing_type(self):
        """Gets the listing_type of this AvatarPublishedListingsInner.  # noqa: E501


        :return: The listing_type of this AvatarPublishedListingsInner.  # noqa: E501
        :rtype: str
        """
        return self._listing_type

    @listing_type.setter
    def listing_type(self, listing_type):
        """Sets the listing_type of this AvatarPublishedListingsInner.


        :param listing_type: The listing_type of this AvatarPublishedListingsInner.  # noqa: E501
        :type listing_type: str
        """

        self._listing_type = listing_type

    @property
    def price_tokens(self):
        """Gets the price_tokens of this AvatarPublishedListingsInner.  # noqa: E501


        :return: The price_tokens of this AvatarPublishedListingsInner.  # noqa: E501
        :rtype: int
        """
        return self._price_tokens

    @price_tokens.setter
    def price_tokens(self, price_tokens):
        """Sets the price_tokens of this AvatarPublishedListingsInner.


        :param price_tokens: The price_tokens of this AvatarPublishedListingsInner.  # noqa: E501
        :type price_tokens: int
        """

        self._price_tokens = price_tokens

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AvatarPublishedListingsInner):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AvatarPublishedListingsInner):
            return True

        return self.to_dict() != other.to_dict()
